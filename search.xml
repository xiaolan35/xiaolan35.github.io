<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二分法思路</title>
      <link href="2021/04/09/er-fen-fa-si-lu/"/>
      <url>2021/04/09/er-fen-fa-si-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="二分法思路"><a href="#二分法思路" class="headerlink" title="二分法思路"></a>二分法思路</h3><p>有一个无序不重复的装满数字的列表，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>现在有一个需求，给定一个数字num，用二分法的方式查找出这个num所在的下标：</p><p><strong>实现步骤</strong></p><p>二分法，即将数组分割成两半，那么，我们肯定需要找到三个东西:</p><ul><li>起始下标</li><li>中间数的下标</li><li>末尾下标</li></ul><p>计算公式：中间数下标=（起始下标+末尾下标）/2</p><p>拿上面的例子来说，起始下标为0，末尾下标为arr.length-1(为啥减一，心里有点逼数)</p><p>那么中间下标就为3（打个比方，上面的例子）</p><p>中间下标找到了，那么对应的中间数也就找到了：arr[中间数下标]</p><p>我们就要去判断，输入的num和这个中间数谁大谁小，<strong>如果比中间数大，那么我们找这个数就只需要去考虑中间数右边的那一串数字，如果比中间数小，那么我们就去考虑左边的数字</strong></p><p>假如我们需要找的数字在中间数的右边，那我们就只需要把数组的起始下标改成中间数往右移动一位。反之，在左边的话就把末尾下标往左启动一位。再不清楚，画个图就能清楚了：</p><p><img src="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201122111838860.png" alt="image-20201122111838860"></p><p>我们用Java来实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// write your code here</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 问题：     *   给定一个数组，无序不重复，要求给定任何一个数字，找到对应的索引，用二分法     * 思路：     *   定义两个下标分别是0和arrays.length-1（因为这个长度才是数组的长度）     *   定义一个中间数为数组长度的一半。判断输入的数大于或者小于这个中间值     *   如果大于中间值，那么起始位置就用中间值+1     *   如果小于中间值，那么末尾位置就用中间值-1     * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//起始位置</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结束位置</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 计算中间位置</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云短信验证码工具类</title>
      <link href="2021/04/09/a-li-yun-duan-xin-yan-zheng-ma-gong-ju-lei/"/>
      <url>2021/04/09/a-li-yun-duan-xin-yan-zheng-ma-gong-ju-lei/</url>
      
        <content type="html"><![CDATA[<h4 id="阿里云短信验证码工具类"><a href="#阿里云短信验证码工具类" class="headerlink" title="阿里云短信验证码工具类"></a>阿里云短信验证码工具类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxy<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>DefaultAcsClient<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>IAcsClient<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>dysmsapi<span class="token punctuation">.</span>model<span class="token punctuation">.</span>v20170525<span class="token punctuation">.</span>SendSmsRequest<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>dysmsapi<span class="token punctuation">.</span>model<span class="token punctuation">.</span>v20170525<span class="token punctuation">.</span>SendSmsResponse<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ClientException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>profile<span class="token punctuation">.</span>DefaultProfile<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>profile<span class="token punctuation">.</span>IClientProfile<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmsTool</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//产品名称:云通信短信API产品,开发者无需替换</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String product <span class="token operator">=</span> <span class="token string">"Dysmsapi"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//产品域名,开发者无需替换</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String domain <span class="token operator">=</span> <span class="token string">"dysmsapi.aliyuncs.com"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TODO 此处需要替换成开发者自己的AK(在阿里云访问控制台寻找)</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String accessKeyId <span class="token operator">=</span> <span class="token string">"LTAI4GCJ4nhyB3sCQj7ftJ9P"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String accessKeySecret <span class="token operator">=</span> <span class="token string">"og4lIDixHgVlEYYXuHC9duhhZr0QT2"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SendSmsResponse <span class="token function">sendSms</span><span class="token punctuation">(</span>String phone <span class="token punctuation">,</span> String code<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClientException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//可自助调整超时时间</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"sun.net.client.defaultConnectTimeout"</span><span class="token punctuation">,</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"sun.net.client.defaultReadTimeout"</span><span class="token punctuation">,</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化acsClient,暂不支持region化</span>        IClientProfile profile <span class="token operator">=</span> DefaultProfile<span class="token punctuation">.</span><span class="token function">getProfile</span><span class="token punctuation">(</span><span class="token string">"cn-hangzhou"</span><span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        DefaultProfile<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">"cn-hangzhou"</span><span class="token punctuation">,</span> <span class="token string">"cn-hangzhou"</span><span class="token punctuation">,</span> product<span class="token punctuation">,</span> domain<span class="token punctuation">)</span><span class="token punctuation">;</span>        IAcsClient acsClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAcsClient</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//组装请求对象-具体描述见控制台-文档部分内容</span>        SendSmsRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendSmsRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必填:待发送手机号</span>        request<span class="token punctuation">.</span><span class="token function">setPhoneNumbers</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必填:短信签名-可在短信控制台中找到</span>        request<span class="token punctuation">.</span><span class="token function">setSignName</span><span class="token punctuation">(</span><span class="token string">"ABC商城"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必填:短信模板-可在短信控制台中找到</span>        request<span class="token punctuation">.</span><span class="token function">setTemplateCode</span><span class="token punctuation">(</span><span class="token string">"SMS_205138182"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//可选:模板中的变量替换JSON串,如模板内容为"亲爱的${name},您的验证码为${code}"时,此处的值为</span>        request<span class="token punctuation">.</span><span class="token function">setTemplateParam</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//选填-上行短信扩展码(无特殊需求用户请忽略此字段)</span>        <span class="token comment" spellcheck="true">//request.setSmsUpExtendCode("90997");</span>        <span class="token comment" spellcheck="true">//可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者</span>        <span class="token comment" spellcheck="true">//request.setOutId("yourOutId");</span>        <span class="token comment" spellcheck="true">//hint 此处可能会抛出异常，注意catch</span>        SendSmsResponse sendSmsResponse <span class="token operator">=</span> acsClient<span class="token punctuation">.</span><span class="token function">getAcsResponse</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sendSmsResponse<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxy<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author Zxy * @Date 2020/11/19 10:00 * @Version 1.0 */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用到Algerian字体，系统里没有的话需要安装字体，字体只显示大写，去掉了1,0,i,o几个容易混淆的字符</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String VERIFY_CODES <span class="token operator">=</span> <span class="token string">"1234567890"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 使用系统默认字符源生成验证码     * @param verifySize    验证码长度     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">generateVerifyCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> verifySize<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">generateVerifyCode</span><span class="token punctuation">(</span>verifySize<span class="token punctuation">,</span> VERIFY_CODES<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用指定源生成验证码     * @param verifySize    验证码长度     * @param sources   验证码字符源     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">generateVerifyCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> verifySize<span class="token punctuation">,</span> String sources<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sources <span class="token operator">==</span> null <span class="token operator">||</span> sources<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sources <span class="token operator">=</span> VERIFY_CODES<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> codesLen <span class="token operator">=</span> sources<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder verifyCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>verifySize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> verifySize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            verifyCode<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sources<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>codesLen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> verifyCode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">generateVerifyCode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>liunx虚拟机安装</title>
      <link href="2021/04/09/linux/"/>
      <url>2021/04/09/linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="1-Linux的引言"><a href="#1-Linux的引言" class="headerlink" title="1.Linux的引言"></a>1.Linux的引言</h2><p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于<code>POSIX和Unix</code>的<code>多用户</code>、<code>多任务</code>、<code>支持多线程和多CPU的操作系统</code>。伴随着互联网的发展，<code>Linux得到了来自全世界软件爱好者、组织、公司的支持</code>。它除了在<code>服务器操作系统</code>方面保持着强劲的发展势头以外，在个人电脑、嵌入式系统上都有着长足的进步。目前Linux存在着许多不同的Linux发行版本，<code>但它们都使用了Linux内核</code>。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、台式计算机。</p><p><img src="Linux.assets/image-20191011200827437.png" alt="image-20191011200827437"></p><hr><h2 id="2-Linux的诞生"><a href="#2-Linux的诞生" class="headerlink" title="2.Linux的诞生"></a>2.Linux的诞生</h2><p>20世纪80年代，计算机硬件的性能不断提高，PC的市场不断扩大，当时可供计算机选用的操作系统主要有Unix、DOS和MacOS这几种。Unix价格昂贵，不能运行于<a href="https://baike.baidu.com/item/PC/107">PC</a>；<a href="https://baike.baidu.com/item/DOS/32025">DOS</a>显得简陋，且源代码被软件厂商严格保密；</p><p><a href="https://baike.baidu.com/item/MacOS/8654551">MacOS</a>是一种专门用于苹果计算机的操作系统。此时，计算机科学领域迫切需要一个更加完善、强大、廉价和完全开放的操作系统。由于供教学使用的典型操作系统很少，因此当时在荷兰当教授的美国人AndrewS.Tanenbaum编写了一个操作系统，名为<a href="https://baike.baidu.com/item/MINIX/7106045">MINIX</a>，为了向学生讲述操作系统内部工作原理。MINIX虽然很好，但只是一个用于教学目的的简单操作系统，而不是一个强有力的实用操作系统，然而最大的好处就是公开源代码。<code>全世界学计算机的学生都通过钻研MINIX源代码来了解电脑里运行的MINIX操作系统，芬兰赫尔辛基大学大学二年级的学生Linus Torvalds就是其中一个，在吸收了MINIX精华的基础上，Linus于1991年写出了属于自己的Linux操作系统，版本为Linux0.01，是Linux时代开始的标志</code>。<code>他利用Unix的核心，去除繁杂的核心程序，改写成适用于一般计算机的x86系统，并放在网络上供大家下载，1994年推出完整的核心Version1.0，至此，Linux逐渐成为功能完善、稳定的操作系统，并被广泛使用。</code></p><blockquote><p><code>总结</code>:Linux出现于<code>1991年</code>，是由<code>芬兰赫尔辛基大学学生</code>,<code>Linus Torvalds</code>和后来加入的众多爱好者共同开发完成。</p></blockquote><p><img src="Linux.assets/image-20191011201019566.png" alt="image-20191011201019566"></p><hr><h2 id="3-Linux的特点"><a href="#3-Linux的特点" class="headerlink" title="3.Linux的特点"></a>3.Linux的特点</h2><h3 id="3-1-完全免费"><a href="#3-1-完全免费" class="headerlink" title="3.1 完全免费"></a>3.1 完全免费</h3><p>Linux是一款免费的操作系统，用户可以通过网络或其他途径免费获得，并可以任意修改其<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81/3969">源代码</a>。这是其他的操作系统所做不到的。正是由于这一点，来自全世界的无数<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E5%91%98/62748">程序员</a>参与了Linux的修改、编写工作，程序员可以根据自己的兴趣和灵感对其进行改变，这让Linux吸收了无数程序员的精华，不断壮大。</p><h3 id="3-2-多用户、多任务"><a href="#3-2-多用户、多任务" class="headerlink" title="3.2 多用户、多任务"></a>3.2 多用户、多任务</h3><p>Linux支持多用户，各个用户对于自己的文件设备有自己特殊的权利，保证了各用户之间互不影响。<code>多任务</code>则是现在电脑最主要的一个特点，Linux可以使多个程序同时并独立地运行。同时``丰富的网络功能，可靠的系统安全，良好的可移植性，具有标准兼容性，出色的速度性能`。</p><hr><h2 id="4-Linux之Cent-OS"><a href="#4-Linux之Cent-OS" class="headerlink" title="4.Linux之Cent OS"></a>4.Linux之Cent OS</h2><h3 id="4-1-centos-引言"><a href="#4-1-centos-引言" class="headerlink" title="4.1 centos 引言"></a>4.1 centos 引言</h3><p><code>CentOS（Community Enterprise Operating System，中文意思是社区企业操作系统）是Linux发行版之一</code>，它是来自于Red Hat Enterprise Linux依照<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81/114160">开放源代码</a>规定释出的源代码所编译而成。由于出自同样的<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81/3587471">源代码</a>，因此有些要求高度稳定性的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571">服务器</a>以CentOS替代商业版的[Red Hat](<a href="https://baike.baidu.com/item/Red">https://baike.baidu.com/item/Red</a> Hat) Enterprise Linux使用。两者的不同，在于<strong>CentOS完全开源</strong>。</p><h3 id="4-2-centos-和-readheat区别"><a href="#4-2-centos-和-readheat区别" class="headerlink" title="4.2 centos 和 readheat区别"></a>4.2 centos 和 readheat区别</h3><p>目前的Linux操作系统主要应用于生产环境，<code>主流企业的Linux系统仍旧是RedHat或者CentOS</code>,他们出自于同样的源代码,但centos完全免费。其独有的yum命令支持在线升级，可以即时更新系统，不像RedHat 那样需要花钱购买支持服务！</p><hr><h2 id="5-安装-Cent-OS"><a href="#5-安装-Cent-OS" class="headerlink" title="5.安装 Cent OS"></a>5.安装 Cent OS</h2><h3 id="5-1-环境准备"><a href="#5-1-环境准备" class="headerlink" title="5.1 环境准备"></a>5.1 环境准备</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 环境要求:</span><span class="token code keyword">        1. windows7+</span><span class="token code keyword">        2. VMware Workstation8+,</span><span class="token code keyword">        3. CentOS系统(镜像)</span></code></pre><h3 id="5-2-安装Cent-OS"><a href="#5-2-安装Cent-OS" class="headerlink" title="5.2 安装Cent OS"></a>5.2 安装Cent OS</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.下载centos </span></code></pre><blockquote><p><a href="https://www.centos.org/">官网</a>:<a href="https://www.centos.org/">https://www.centos.org/</a></p><p><a href="http://isoredirect.centos.org/centos/7/isos/x86_64/">官网的下载地址</a>:<a href="http://isoredirect.centos.org/centos/7/isos/x86_64/">http://isoredirect.centos.org/centos/7/isos/x86_64/</a></p></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.第一步:打开VMware Workstation</span></code></pre><p><img src="Linux.assets/image-20191011204617583.png" alt="image-20191011204617583"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 2.选择菜单File的第一项新建虚拟机</span></code></pre><p><img src="Linux.assets/image-20191011204734492.png" alt="image-20191011204734492"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.选择自定义虚拟机安装</span></code></pre><p><img src="Linux.assets/image-20191011204806260.png" alt="image-20191011204806260"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 4.选择下一步</span></code></pre><p><img src="Linux.assets/640-20191011204836520.jpeg" alt="img"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 5. 虚拟机设置之后安装系统</span></code></pre><p><img src="Linux.assets/640-20191011204924175.jpeg" alt="img"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 6.选择虚拟机安装系统以及版本</span></code></pre><p><img src="Linux.assets/image-20191011204948492.png" alt="image-20191011204948492"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 7.选择虚拟机名称与位置</span></code></pre><p><img src="Linux.assets/image-20191011205013122.png" alt="image-20191011205013122"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 8.设置处理器数</span></code></pre><p><img src="Linux.assets/image-20191011205034829.png" alt="image-20191011205034829"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 9.设置虚拟机内存</span></code></pre><p><img src="Linux.assets/image-20191011205101094.png" alt="image-20191011205101094"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 10.选择网络模式</span></code></pre><p><img src="Linux.assets/image-20191011205123751.png" alt="image-20191011205123751"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 11.选择io总线 下一步</span></code></pre><p><img src="Linux.assets/image-20191011205152854.png" alt="image-20191011205152854"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 12.选择新建硬盘</span></code></pre><p><img src="Linux.assets/image-20191011205218692.png" alt="image-20191011205218692"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 13.选择硬盘类型</span></code></pre><p><img src="Linux.assets/640.png" alt="img"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 14.拆分硬盘</span></code></pre><p><img src="Linux.assets/640-20191011205308573.jpeg" alt="img"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 15.设置磁盘位置</span></code></pre><p><img src="Linux.assets/640-20191011205334834.png" alt="img"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 16.创建完成</span></code></pre><p><img src="Linux.assets/640-20191011205358801.jpeg" alt="img"></p><hr><h2 id="6-Linux中目录结构"><a href="#6-Linux中目录结构" class="headerlink" title="6.Linux中目录结构"></a>6.Linux中目录结构</h2><p><img src="Linux.assets/image-20191011205611690.png" alt="image-20191011205611690"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 目录结构    </span><span class="token code keyword">    bin  (binaries)存放二进制可执行文件                                                                                                     [重点]</span><span class="token code keyword">    sbin  (super user binaries)存放二进制可执行文件，只有root才能访问</span><span class="token code keyword">    etc (etcetera)存放系统配置文件                                                                                                            [重点]</span><span class="token code keyword">    usr  (unix shared resources)用于存放共享的系统资源                                                                      [重点]</span><span class="token code keyword">    home 存放用户文件的根目录                                                                                                                         [重点]</span><span class="token code keyword">    root  超级用户目录                                                                                                                               [重点]</span><span class="token code keyword">    dev (devices)用于存放设备文件</span><span class="token code keyword">    lib  (library)存放跟文件系统中的程序运行所需要的共享库及内核模块</span><span class="token code keyword">    mnt  (mount)系统管理员安装临时文件系统的安装点</span><span class="token code keyword">    boot 存放用于系统引导时使用的各种文件</span><span class="token code keyword">    tmp  (temporary)用于存放各种临时文件                                                                                               [重点]</span><span class="token code keyword">    var  (variable)用于存放运行时需要改变数据的文件</span></code></pre><hr><h2 id="7-Linux中常用指令"><a href="#7-Linux中常用指令" class="headerlink" title="7. Linux中常用指令"></a>7. Linux中常用指令</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Linux中命令格式:</span>    <span class="token code keyword">        命令  -选项  参数    如:  ls -l /usr </span></code></pre><blockquote><p><code>注意:在linux中命令严格区分大小写</code></p></blockquote><h3 id="7-1-ls-命令"><a href="#7-1-ls-命令" class="headerlink" title="7.1 ls 命令"></a>7.1 ls 命令</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> ls  显示文件和目录列表    (list)</span><span class="token code keyword">    常用参数:  </span><span class="token code keyword">        -l (long)     长格式显示文件和目录信息</span><span class="token code keyword">        -a (all)     显示所有文件和目录(包含隐藏文件和目录)</span><span class="token code keyword">        -R         递归显示指定目录下的文件清单，即会显示指定目录分支内各子目录中的文件清单。</span></code></pre><pre class=" language-shell"><code class="language-shell"># 0. ls (查看目录下文件和目录)[root@localhost ~]# lsaa  aa.txt# 1. ls -l (长格式展示文件)[root@localhost ~]# ls -l总用量 60drwxrwxr-x      2   user1  user1    4096    Aug 17 09:10 abc- rw- r-- r--    1   user1  user1    17     Aug 17 09:04 host.conf- rw- r-- r--    1   user1  user1    38450  Aug 17 09:04 php.ini`长格式含义:`文件类型 文件权限   链接数  属主    属组    大小   日期   时间    文件名d     rwxrwxr-x     2     user1  user1 4096  Aug 17 09:10  abc# 2. ls -a (显示所有文件)[root@localhost ~]# ls -a.   aa      .bash_history  .bash_profile  .cshrc  .tcshrc..  aa.txt  .bash_logout   .bashrc        .pki    .viminfo# 3. ls -R (递归显示文件)[root@localhost ~]# ls -R.:aa  aa.txt./aa:</code></pre><h3 id="7-2-操作文件命令-重点"><a href="#7-2-操作文件命令-重点" class="headerlink" title="7.2 操作文件命令[重点]"></a>7.2 操作文件命令[重点]</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.cd 用来切换目录</span><span class="token title important"><span class="token punctuation">#</span> 1.pwd 显示当前工作目录（print working directory）</span><span class="token title important"><span class="token punctuation">#</span> 2.touch 创建空文件         </span><span class="token title important"><span class="token punctuation">#</span> 3.mkdir 创建目录（make directoriy）</span><span class="token code keyword">            -p 父目录不存在情况下先生成父目录 （parents）            </span><span class="token title important"><span class="token punctuation">#</span> 4.cp 复制文件或目录（copy）</span><span class="token code keyword">      cp  文件名    目录   复制文件到指定目录中</span><span class="token code keyword">      cp  -r 目录名    目录   复制指定目录到指定目录中</span><span class="token code keyword">            -r 递归处理，将指定目录下的文件与子目录一并拷贝（recursive）     </span><span class="token title important"><span class="token punctuation">#</span> 5.mv 移动文件或目录、文件或目录改名（move）</span><span class="token code keyword">            mv 文件名    新文件名      文件改名</span><span class="token code keyword">            mv 文件名    目录名         文件移动</span><span class="token code keyword">            mv 目录名    不存在目录名  目录改名   </span><span class="token code keyword">      mv 目录名      已存在目录名  目录移动</span><span class="token title important"><span class="token punctuation">#</span> 6.rm 删除文件（remove）</span><span class="token code keyword">            -r 同时删除该目录下的所有文件（recursive）</span><span class="token code keyword">            -f 强制删除文件或目录（force）</span><span class="token title important"><span class="token punctuation">#</span> 7.rmdir 删除空目录（remove directoriy）</span><span class="token title important"><span class="token punctuation">#</span> 8.cat 显示文本文件内容 （catenate） 用来展示少量内容</span><span class="token title important"><span class="token punctuation">#</span> 9.more、less 分页显示文本文件内容   退出用q退出</span><span class="token title important"><span class="token punctuation">#</span> 10.head、tail查看文本中开头或结尾部分的内容</span><span class="token code keyword">        head  -n  5  a.log 查看a.log文件的前5行</span><span class="token title important"><span class="token punctuation">#</span> 11.tail  -f  b.log 循环读取（fellow）</span><span class="token title important"><span class="token punctuation">#</span> 12.echo 输出命令</span><span class="token code keyword">            echo   I love baby                                说明:用来向屏幕输出一句话</span><span class="token code keyword">            echo I Love baby  >>  aa.txt            说明:将这段内容输入到 文件中</span></code></pre><h3 id="7-3-网络相关命令"><a href="#7-3-网络相关命令" class="headerlink" title="7.3 网络相关命令"></a>7.3 网络相关命令</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.ip addr 查看IP地址</span><span class="token code keyword">        ip a  简化写法</span><span class="token title important"><span class="token punctuation">#</span> 2.ping 测试网络连通性</span><span class="token code keyword">        ping 192.168.0.1</span></code></pre><h3 id="7-4-tar命令-windows-winrar-好压"><a href="#7-4-tar命令-windows-winrar-好压" class="headerlink" title="7.4 tar命令(windows winrar 好压)"></a>7.4 tar命令(windows winrar 好压)</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> tar 命令   </span><span class="token code keyword">        -c 建立一个压缩文件的参数指令（create）</span><span class="token code keyword">        -x 解开一个压缩文件的参数指令（extract）</span><span class="token code keyword">        -z 是否需要用 gzip 压缩  </span><span class="token code keyword">        -v 压缩的过程中显示文件（verbose）</span><span class="token code keyword">        -f 使用档名，在 f 之后要立即接档名（file）</span><span class="token code keyword">`通常组合使用:`</span><span class="token code keyword">            tar -cvf aaa.tar file1.txt file2.txt                     将file1和2打包成aaa.tar</span><span class="token code keyword">            </span><span class="token code keyword">            tar -zcvf aaa.tar.gz file1.txt file2.txt             将file1和2打包成aaa.tar并压缩</span><span class="token code keyword">            tar -zxvf aaa.tar.gz file1.txt file2.txt             将aaa.tar.gz解压</span></code></pre><h3 id="7-5-systemctl-服务命令"><a href="#7-5-systemctl-服务命令" class="headerlink" title="7.5 systemctl 服务命令"></a>7.5 systemctl 服务命令</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> systemctl </span>  systemctl status|start|stop|restart 服务名  mysqld firewalld(防火墙) network(网络)<span class="token code keyword">    systemctl status 服务名          说明:查看某个服务的运行状态</span><span class="token code keyword">    systemctl start 服务名                     说明:启动某个服务</span><span class="token code keyword">    systemctl restart 服务名                 说明:重启某个服务</span><span class="token code keyword">    systemctl stop 服务名                         说明:停止某个服务</span></code></pre><h3 id="7-6-进程相关命令"><a href="#7-6-进程相关命令" class="headerlink" title="7.6 进程相关命令"></a>7.6 进程相关命令</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.ps 询在当前控制台上运行的进程</span><span class="token code keyword">        ps  -aux   说明:查询系统中所有运行的进程，包括后台进程，其中参数a是所有进程，参数x包括不占用控制台的进程，参数u显示用户。</span><span class="token code keyword">        ps  -ef         说明:查询系统中所有运行的进程，包括后台进程，而且可以显示出每个进程的父进程号。</span><span class="token code keyword">    ps -aux|grep 进程 服务名  关键字 tomcat  重点</span><span class="token title important"><span class="token punctuation">#</span> 2.top    命令  动态显示系统进程</span><span class="token title important"><span class="token punctuation">#</span> 3.kill 杀死进程</span><span class="token code keyword">        kill  3029 说明：上述命令中3029是进程号；一般在执行kill命令之前，先用ps或pstree来查询一下将要被杀掉的进程的进程号。 </span><span class="token code keyword">        kill  -9  3029 说明:强制终止3029号进程的运行，其中参数-9代表强制的意思,实际上kill命令是向该进程发送信号，</span><span class="token code keyword">                                                该进程接到信号后决定是否停止运行，有些守护进程必须要收到参数9才终止运行。</span><span class="token code keyword">        </span></code></pre><h3 id="7-7-vi命令"><a href="#7-7-vi命令" class="headerlink" title="7.7 vi命令"></a>7.7 vi命令</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> vi / vim是Unix / Linux上最常用的文本编辑器而且功能非常强大。</span></code></pre><p><img src="Linux.assets/image-20191011213625815.png" alt="image-20191011213625815"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 常用命令:</span><span class="token code keyword">        i                        在光标前插入</span><span class="token code keyword">         I                        在光标当前行开始插入</span><span class="token code keyword">         a                        在光标后插入</span><span class="token code keyword">         A                        在光标当前行末尾插入</span><span class="token code keyword">         o                        在光标当前行的下一行插入新行</span><span class="token code keyword">         O                        在光标当前行的上一行插入新行</span><span class="token code keyword">         ----------------重点---------------------------</span><span class="token code keyword">         :set nu            显示行号</span><span class="token code keyword">         :set nonu        取消行号</span><span class="token code keyword">         gg                    到文本的第一行</span><span class="token code keyword">         G                        到文本的最后一行</span><span class="token code keyword">         :n                    到文本的第n行</span><span class="token code keyword">         ------------------重点-------------------------</span><span class="token code keyword">         u                        undo,取消上一步操作</span><span class="token code keyword">         Ctrl + r        redo,返回到undo之前</span><span class="token code keyword">         </span><span class="token code keyword">         -------------------重点------------------------</span><span class="token code keyword">         Shift+ zz        保存退出，与“:wq”作用相同</span><span class="token code keyword">        :q                    退出不保存</span><span class="token code keyword">        :q!                    强制退出不保存</span><span class="token code keyword">        :wq                    保存退出</span><span class="token code keyword">        :wq!                强制保存退出</span></code></pre><h3 id="7-8-软件相关命令"><a href="#7-8-软件相关命令" class="headerlink" title="7.8 软件相关命令"></a>7.8 软件相关命令</h3><p><code>RPM命令</code></p><blockquote><p>​    <code>RPM是RedHat Package Manager（RedHat软件包管理工具）的缩写，这一文件格式名称虽然打上了RedHat的标志，但是其原始设计理念是开放式的，现在包括RedHat、CentOS、SUSE等Linux的分发版本都有采用，可以算是公认的行业标准了。RPM文件在Linux系统中的安装最为简便,</code></p></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> rpm 命令  </span><span class="token code keyword">    常用参数:</span><span class="token code keyword">      i：安装应用程序（install）</span><span class="token code keyword">      e：卸载应用程序（erase）</span><span class="token code keyword">      vh：显示进度；（verbose   hash） </span><span class="token code keyword">      U：升级软件包；（update） </span><span class="token code keyword">      qa: 显示所有已安装软件包（query all）</span><span class="token code keyword">    例子：rmp  -ivh  gcc-c++-4.4.7-3.el6.x86_64.rpm</span>安装 <span class="token code keyword">    rpm -ivh  xxxx.rpm  # 显示进度安装程序</span><span class="token code keyword">    rpm -evh  xxxx.rpm # 显示进度卸载程序</span><span class="token code keyword">    rpm -Uvh  xxx.rpm # 显示进度升级安装包</span><span class="token code keyword">    rpm -qa # 显示所有已安装的程序</span></code></pre><p><code>YUM命令</code></p><blockquote><p>​    <code>Yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE、CentOS中的Shell前端软件包管理器。基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</code></p></blockquote><pre class=" language-markdown"><code class="language-markdown">例子：<span class="token code keyword">    yum  install  gcc-c++</span><span class="token code keyword">    yum  remove   gcc-c++</span><span class="token code keyword">    yum  update   gcc-c++</span>    <span class="token code keyword">    yum install|remove|update  依赖名称</span></code></pre><blockquote><p><code>使用YUM命令必须连接外部网络</code></p></blockquote><h3 id="7-9-用户和组相关命令"><a href="#7-9-用户和组相关命令" class="headerlink" title="7.9 用户和组相关命令"></a>7.9 用户和组相关命令</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.查看当前用户：whoami</span><span class="token title important"><span class="token punctuation">#</span> 2.查看登录用户：who</span><span class="token code keyword">    -m或am I    只显示运行who命令的用户名、登录终端和登录时间</span><span class="token code keyword">    -q或--count    只显示用户的登录账号和登录用户的数量</span><span class="token title important"><span class="token punctuation">#</span> 3.退出用户:        exit</span><span class="token title important"><span class="token punctuation">#</span> 4.添加、删除组账号：groupadd、groupdel</span><span class="token title important"><span class="token punctuation">#</span> 5.添加用户账号：useradd</span><span class="token code keyword">        -g    指定组名称  说明:如果创建用户的时候，不指定组名，那么系统会自动创建一个和用户名一样的组名。</span><span class="token title important"><span class="token punctuation">#</span> 6.设置用户密码：passwd　[用户名]</span><span class="token title important"><span class="token punctuation">#</span> 7.su 切换用户</span><span class="token code keyword">        su  root </span></code></pre><h3 id="7-10-权限相关命令"><a href="#7-10-权限相关命令" class="headerlink" title="7.10 权限相关命令"></a>7.10 权限相关命令</h3><blockquote><p>Linux文件有<code>三种</code>典型的权限，<code>即r读权限、w写权限和x执行权限</code>。在长格式输出中在文件类型的后面有9列权限位，实际上这是针对不同用户而设定的。<code>r=4，w=2，x=1</code></p></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> chmod </span>  all = user + group + other   chmod  u+rwx,g+rwx,o+rwx   文件名<span class="token code keyword">    字母法：chmod u/g/o/a +/-/= rwx 文件</span>    <span class="token code keyword">    [ u/g/o/a ]    含义</span><span class="token code keyword">        u    user                     表示该文件的所有者</span><span class="token code keyword">        g    group                 表示与该文件的所有者属于同一组( group )者，即用户组</span><span class="token code keyword">        o    other                 表示其他以外的人</span><span class="token code keyword">        a    all                     表示这三者皆是</span><span class="token code keyword">    [ +-= ]    含义</span><span class="token code keyword">        +                                增加权限</span><span class="token code keyword">        -                                撤销权限</span><span class="token code keyword">        =                                设定权限</span><span class="token code keyword">    rwx    含义</span><span class="token code keyword">        r                                read 表示可读取，对于一个目录，如果没有r权限，那么就意味着不能通过ls查看这个目录的内容。</span><span class="token code keyword">        w                                write 表示可写入，对于一个目录，如果没有w权限，那么就意味着不能在目录下创建新的文件。</span><span class="token code keyword">        x                                excute 表示可执行，对于一个目录，如果没有x权限，那么就意味着不能通过cd进入这个目录。</span>      数字法:   4读 2写  1执行<span class="token code keyword">      chmod 777 文件名</span></code></pre><hr><h2 id="8-CRT终端操作"><a href="#8-CRT终端操作" class="headerlink" title="8.CRT终端操作"></a>8.CRT终端操作</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.准备工作</span><span class="token code keyword">        安装CRT客户端工具,安装winscp工具</span><span class="token title important"><span class="token punctuation">#</span> 1.设置linux获取ip地址 (编辑网络配置文件)    </span><span class="token code keyword">        vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token title important"><span class="token punctuation">#</span> 2.修改ens33配置文件:</span><span class="token code keyword">    BOOTPROTO=dhcp</span><span class="token code keyword">    ONBOOT=yes</span><span class="token title important"><span class="token punctuation">#</span> 3.重启启动网路服务加载修改配置生效</span><span class="token code keyword">        systemctl restart network</span><span class="token title important"><span class="token punctuation">#</span> 4.查看ip地址</span><span class="token code keyword">        ip addr</span><span class="token title important"><span class="token punctuation">#</span> 5.此时ip已经获取</span><span class="token code keyword">        ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><span class="token code keyword">    link/ether 00:0c:29:07:16:9e brd ff:ff:ff:ff:ff:ff</span><span class="token code keyword">    inet 192.168.202.136/24 brd 192.168.202.255 scope global noprefixroute dynamic ens33</span><span class="token code keyword">       valid_lft 1459sec preferred_lft 1459sec</span><span class="token code keyword">    inet6 fe80::b22b:7e01:db87:52fe/64 scope link noprefixroute </span><span class="token title important"><span class="token punctuation">#</span> 6.测试外部网络连通(保证宿主机windows可以上网前提)</span><span class="token code keyword">        ping www.baidu.com</span><span class="token title important"><span class="token punctuation">#</span> 7.使用CRT工具连接即可</span></code></pre><h2 id="9-安装JDK"><a href="#9-安装JDK" class="headerlink" title="9.安装JDK"></a>9.安装JDK</h2><h3 id="9-1-下载jdk"><a href="#9-1-下载jdk" class="headerlink" title="9.1 下载jdk"></a>9.1 下载jdk</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.下载jdk</span><span class="token code keyword">    https://www.oracle.com/technetwork/java/javase/downloads/index.html</span><span class="token code keyword">    https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</span><span class="token title important"><span class="token punctuation">#</span> 2.通过CRT|WinSCP工具将jdk上传到linux系统中    </span></code></pre><p><img src="Linux.assets/image-20191013121013589.png" alt="image-20191013121013589"></p><h3 id="9-2-tar包安装"><a href="#9-2-tar包安装" class="headerlink" title="9.2 tar包安装"></a>9.2 tar包安装</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.将JDK解压缩到指定目录</span><span class="token code keyword">    tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/</span><span class="token code keyword">    注意:-C参数是将JDK解压之后文件放入usr目录中</span><span class="token title important"><span class="token punctuation">#</span> 2.进入jdk解压缩目录查看</span><span class="token code keyword">    cd /usr/jdk1.8.0_171/</span><span class="token title important"><span class="token punctuation">#</span> 3.查看详细信息</span><span class="token code keyword">    [root@localhost jdk1.8.0_171]# ls</span><span class="token code keyword">        bin        db       javafx-src.zip  lib      man          release  THIRDPARTYLICENSEREADME-JAVAFX.txt</span><span class="token code keyword">        COPYRIGHT  include  jre             LICENSE  README.html  src.zip  THIRDPARTYLICENSEREADME.txt</span><span class="token title important"><span class="token punctuation">#</span> 4.配置环境变量</span><span class="token code keyword">     vi /etc/profile</span><span class="token code keyword">     </span><span class="token title important"><span class="token punctuation">#</span> 5.在文件末尾加入如下配置</span><span class="token code keyword">    export JAVA_HOME=/usr/jdk1.8.0_171</span><span class="token code keyword">    export PATH=$PATH:$JAVA_HOME/bin</span><span class="token title important"><span class="token punctuation">#</span> 6.加载配置生效</span><span class="token code keyword">    source /etc/profile    加载配置生效</span><span class="token code keyword">    reboot                 重启系统</span><span class="token code keyword">    注意: 以上两个选项选择任意一个即可source可以不用重启立即生效,某些情况下source无法生效时,可以使用重启试试</span><span class="token title important"><span class="token punctuation">#</span> 7.测试环境变量</span><span class="token code keyword">    java</span><span class="token code keyword">    javac</span><span class="token code keyword">    java -version</span></code></pre><h3 id="9-3-rpm包安装"><a href="#9-3-rpm包安装" class="headerlink" title="9.3 rpm包安装"></a>9.3 rpm包安装</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.安装jdk</span><span class="token code keyword">    [root@localhost ~]# rpm -ivh jdk-8u171-linux-x64.rpm </span><span class="token code keyword">        准备中...                          ################################# [100%]</span><span class="token code keyword">        正在升级/安装...</span><span class="token code keyword">           1:jdk1.8-2000:1.8.0_171-fcs        ################################# [100%]</span><span class="token code keyword">            Unpacking JAR files...</span><span class="token code keyword">        tools.jar...</span><span class="token code keyword">        plugin.jar...</span><span class="token code keyword">        javaws.jar...</span><span class="token code keyword">        deploy.jar...</span><span class="token code keyword">        rt.jar...</span><span class="token code keyword">        jsse.jar...</span><span class="token code keyword">        charsets.jar...</span><span class="token code keyword">        localedata.jar...</span><span class="token title important"><span class="token punctuation">#</span> 2.搜索默认安装位置</span><span class="token code keyword">     [root@localhost ~]# find / -name "java"</span><span class="token code keyword">         /usr/java/jdk1.8.0_171-amd64/bin/java</span><span class="token code keyword">        /usr/java/jdk1.8.0_171-amd64/jre/bin/java</span><span class="token title important"><span class="token punctuation">#</span> 3.配置环境变量</span><span class="token code keyword">     vi /etc/profile</span><span class="token title important"><span class="token punctuation">#</span> 4.在文件末尾加入如下配置</span><span class="token code keyword">    export JAVA_HOME=/usr/java/jdk1.8.0_171-amd64/</span><span class="token code keyword">    export PATH=$PATH:$JAVA_HOME/bin</span><span class="token title important"><span class="token punctuation">#</span> 5.加载配置生效</span><span class="token code keyword">    source /etc/profile    加载配置生效</span><span class="token code keyword">    reboot                 重启系统</span><span class="token code keyword">    注意: 以上两个选项选择任意一个即可source可以不用重启立即生效,某些情况下source无法生效时,可以使用重启试试</span><span class="token title important"><span class="token punctuation">#</span> 6.测试环境变量</span><span class="token code keyword">    java</span><span class="token code keyword">    javac</span><span class="token code keyword">    java -version</span>    </code></pre><hr><h2 id="10-安装Tomcat"><a href="#10-安装Tomcat" class="headerlink" title="10.安装Tomcat"></a>10.安装Tomcat</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.下载tomcat</span><span class="token code keyword">    http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.46/bin/apache-tomcat-8.5.46.tar.gz</span><span class="token title important"><span class="token punctuation">#</span> 1.通过工具上传到Linux系统中</span><span class="token title important"><span class="token punctuation">#</span> 2.解压缩到/usr目录中</span><span class="token code keyword">    [root@localhost ~]# tar -zxvf apache-tomcat-8.5.46.tar.gz -C /usr/</span><span class="token code keyword">    -C 用来指定解压缩的位置</span><span class="token title important"><span class="token punctuation">#</span> 3.查看解压内容</span><span class="token code keyword">    [root@localhost apache-tomcat-8.5.46]# ls -l</span><span class="token code keyword">    总用量 124</span><span class="token code keyword">    drwxr-x---. 2 root root  4096 10月 13 12:27 bin</span><span class="token code keyword">    -rw-r-----. 1 root root 19318 9月  17 02:19 BUILDING.txt</span><span class="token code keyword">    drwx------. 2 root root   238 9月  17 02:19 conf</span><span class="token code keyword">    -rw-r-----. 1 root root  5407 9月  17 02:19 CONTRIBUTING.md</span><span class="token code keyword">    drwxr-x---. 2 root root  4096 10月 13 12:27 lib</span><span class="token code keyword">    -rw-r-----. 1 root root 57011 9月  17 02:19 LICENSE</span><span class="token code keyword">    drwxr-x---. 2 root root     6 9月  17 02:17 logs</span><span class="token code keyword">    -rw-r-----. 1 root root  1726 9月  17 02:19 NOTICE</span><span class="token code keyword">    -rw-r-----. 1 root root  3255 9月  17 02:19 README.md</span><span class="token code keyword">    -rw-r-----. 1 root root  7139 9月  17 02:19 RELEASE-NOTES</span><span class="token code keyword">    -rw-r-----. 1 root root 16262 9月  17 02:19 RUNNING.txt</span><span class="token code keyword">    drwxr-x---. 2 root root    30 10月 13 12:27 temp</span><span class="token code keyword">    drwxr-x---. 7 root root    81 9月  17 02:17 webapps</span><span class="token code keyword">    drwxr-x---. 2 root root     6 9月  17 02:17 work</span><span class="token title important"><span class="token punctuation">#</span> 4.启动tomcat</span><span class="token code keyword">    [root@localhost apache-tomcat-8.5.46]# ./bin/startup.sh </span><span class="token title important"><span class="token punctuation">#</span> 5.关闭网络防火墙</span><span class="token code keyword">    systemctl stop firewalld       关闭网络防火墙</span><span class="token code keyword">    systemctl disable firewalld  关闭开机自启动(永久关闭)</span><span class="token title important"><span class="token punctuation">#</span> 6.在windows中访问tomcat</span><span class="token code keyword">    http://10.15.0.8:8080/</span><span class="token title important"><span class="token punctuation">#</span> 7.显示tomcat实时控制台信息</span><span class="token code keyword">    进入tomcat的logs目录中使用tail -f catalina.out 命令实时查看控制台信息 </span><span class="token title important"><span class="token punctuation">#</span> 8.关闭tomcat</span><span class="token code keyword">    在tomcat的bin目录下面使用 ./shutdown.sh</span></code></pre><hr><h2 id="11-安装MySQL"><a href="#11-安装MySQL" class="headerlink" title="11.安装MySQL"></a>11.安装MySQL</h2><h3 id="11-1-环境准备"><a href="#11-1-环境准备" class="headerlink" title="11.1 环境准备"></a>11.1 环境准备</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.卸载mariadb，否则安装mysql会出现冲突</span><span class="token title important"><span class="token punctuation">#</span> 2.执行命令rpm -qa | grep mariadb</span><span class="token title important"><span class="token punctuation">#</span> 3.列出所有被安装的mariadb rpm 包；</span><span class="token title important"><span class="token punctuation">#</span> 4.执行命令rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64</span></code></pre><h3 id="11-2-本地安装-5-6版本默认root没有密码"><a href="#11-2-本地安装-5-6版本默认root没有密码" class="headerlink" title="11.2 本地安装(5.6版本默认root没有密码)"></a>11.2 本地安装(5.6版本默认root没有密码)</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.上传下载好的软件包到系统中</span></code></pre><p><img src="Linux.assets/image-20191013124602190.png" alt="image-20191013124602190"></p><pre class=" language-shell"><code class="language-shell"># 0.执行本地安装包之前必须先安装vim    yum install -y vim# 1.安装步骤    rpm -ivh perl-*    rpm -ivh net-tools-2.0-0.22.20131004git.el7.x86_64.rpm    rpm -ivh mysql-community-common-5.6.42-2.el7.x86_64.rpm    rpm -ivh mysql-community-libs-5.6.42-2.el7.x86_64.rpm    rpm -ivh mysql-community-client-5.6.42-2.el7.x86_64.rpm    rpm -ivh mysql-community-server-5.6.42-2.el7.x86_64.rpm</code></pre><h3 id="11-3-在线安装"><a href="#11-3-在线安装" class="headerlink" title="11.3 在线安装"></a>11.3 在线安装</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.添加官方的yum源创建并编辑mysql-community.repo文件</span><span class="token code keyword">        vi /etc/yum.repos.d/mysql-community.repo</span><span class="token title important"><span class="token punctuation">#</span> 2.粘贴以下内容到源文件中</span><span class="token code keyword">        [mysql56-community]</span><span class="token code keyword">    name=MySQL 5.6 Community Server</span><span class="token code keyword">    baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/</span><span class="token code keyword">    enabled=1</span><span class="token code keyword">    gpgcheck=0</span><span class="token code keyword">    gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span>    <span class="token code keyword">    注意:如果需要安装mysql5.7只需要将baseurl修改即可 </span><span class="token code keyword">        baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span><span class="token title important"><span class="token punctuation">#</span> 3.安装mysql</span><span class="token code keyword">    sudo yum install -y mysql-community-server</span></code></pre><h3 id="11-4-设置root用户密码"><a href="#11-4-设置root用户密码" class="headerlink" title="11.4 设置root用户密码"></a>11.4 设置root用户密码</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.启动mysql数据库</span><span class="token code keyword">    [root@localhost mysql]# systemctl start mysqld</span><span class="token title important"><span class="token punctuation">#</span> 2.修改mysql数据库密码</span><span class="token code keyword">    mysqladmin -u root -p password 回车 输入原始密码 在输入新的密码</span>    <span class="token code keyword">    注意:5.7之前版本安装完成之后没有密码,mysql5.7之后的版本的初始密码是随机生成的，放在了&amp;nbsp;/var/log/mysqld.log</span><span class="token code keyword">            使用命令&amp;nbsp;grep ‘temporary password’ /var/log/mysqld.log&amp;nbsp;读出来即可</span><span class="token code keyword">            ROOT!Q2w</span><span class="token title important"><span class="token punctuation">#</span> 3.登录mysql</span><span class="token code keyword">    [root@localhost mysql]# mysql -u root -p  </span></code></pre><h3 id="11-5-开启远程访问"><a href="#11-5-开启远程访问" class="headerlink" title="11.5 开启远程访问"></a>11.5 开启远程访问</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.安装完成mysql时,发现mysql数据库,不允许我们远程连接需要修改设置</span></code></pre><p><img src="Linux.assets/image-20191013130519305.png" alt="image-20191013130519305"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 2.登录mysql,并选择使用mysql数据库</span></code></pre><p><img src="Linux.assets/image-20191013130544372.png" alt="image-20191013130544372"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.查看mysql库中的所有表</span></code></pre><p><img src="Linux.assets/image-20191013130645099.png" alt="image-20191013130645099"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 4.查询user表</span></code></pre><p><img src="Linux.assets/image-20191013130748107.png" alt="image-20191013130748107"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 5.执行如下命令</span><span class="token code keyword">    grant all privileges on *.* to 'root'@'%' identified by 'ROOT!Q2w' with grant option;</span></code></pre><p><img src="Linux.assets/image-20191013131257409.png" alt="image-20191013131257409"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 6.刷新权限</span><span class="token code keyword">    flush privileges;</span></code></pre><p><img src="Linux.assets/image-20191013131324656.png" alt="image-20191013131324656"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 7.重启服务</span><span class="token code keyword">    systemctl restart mysqld</span><span class="token title important"><span class="token punctuation">#</span> 8.测试连接</span></code></pre><p><img src="Linux.assets/image-20191013131419858.png" alt="image-20191013131419858"></p><hr><h2 id="12-MySQL主从复制"><a href="#12-MySQL主从复制" class="headerlink" title="12.MySQL主从复制"></a>12.MySQL主从复制</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.架构规划</span><span class="token code keyword">    192.168.202.201    master  主节点</span><span class="token code keyword">    192.168.202.202    slave   从节点</span><span class="token title important"><span class="token punctuation">#</span> 1.修改mysql的配置文件</span><span class="token code keyword">    [root@localhost mysql]# vim /etc/my.cnf</span><span class="token title important"><span class="token punctuation">#</span> 2.分别在配置文件中加入如下配置</span><span class="token code keyword">    mysql(master):</span><span class="token code keyword">        server-id=1</span><span class="token code keyword">        log-bin=mysql-bin</span><span class="token code keyword">        log-slave-updates</span><span class="token code keyword">        slave-skip-errors=all</span>    <span class="token code keyword">    msyql(slave):</span><span class="token code keyword">        server-id=2</span><span class="token code keyword">        log-bin=mysql-bin</span><span class="token code keyword">        log-slave-updates</span><span class="token code keyword">        slave-skip-errors=all</span><span class="token code keyword">        </span><span class="token code keyword">        注意:两个机器的server-id不能一致</span></code></pre><p><img src="Linux.assets/image-20191013201349444.png" alt="image-20191013201349444"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.重启mysql服务</span><span class="token code keyword">    systemctl restart mysqld</span><span class="token title important"><span class="token punctuation">#</span> 4.登录mysql执行如下命令检测配置是否生效</span><span class="token code keyword">    SHOW VARIABLES like 'server_id';</span></code></pre><img src="Linux.assets/image-20191013201523812.png" alt="image-20191013201523812"><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 5.登录master节点执行如下命令</span><span class="token code keyword">        show master status;</span></code></pre><p><img src="Linux.assets/image-20191013203543728.png" alt="image-20191013203543728"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 6.登录从节点执行如下命令:</span><span class="token code keyword">        change master to </span><span class="token code keyword">        master_host='10.15.0.9',</span><span class="token code keyword">        master_user='root',</span><span class="token code keyword">        master_password='root',</span><span class="token code keyword">        master_log_file='mysql-bin.000001',</span><span class="token code keyword">        master_log_pos=120;</span></code></pre><p><img src="Linux.assets/image-20191013204344807.png" alt="image-20191013204344807"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 7.开启从节点</span><span class="token code keyword">        start slave; </span><span class="token code keyword">        stop  slave;</span></code></pre><p><img src="Linux.assets/image-20191013204413766.png" alt="image-20191013204413766"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 8.查看从节点状态</span><span class="token code keyword">        show slave status\G;</span><span class="token code keyword">        ************************** 1. row ***************************</span><span class="token code keyword">               Slave_IO_State: Waiting for master to send event</span><span class="token code keyword">                  Master_Host: 10.15.0.9</span><span class="token code keyword">                  Master_User: root</span><span class="token code keyword">                  Master_Port: 3306</span><span class="token code keyword">                Connect_Retry: 60</span><span class="token code keyword">              Master_Log_File: mysql-bin.000001</span><span class="token code keyword">          Read_Master_Log_Pos: 120</span><span class="token code keyword">               Relay_Log_File: mysqld-relay-bin.000002</span><span class="token code keyword">                Relay_Log_Pos: 283</span><span class="token code keyword">        Relay_Master_Log_File: mysql-bin.000001</span><span class="token code keyword">             Slave_IO_Running: Yes</span><span class="token code keyword">            Slave_SQL_Running: Yes</span><span class="token code keyword">       </span><span class="token code keyword">    注意:</span><span class="token code keyword">            1.出现 Slave_IO_Running: Yes 和 Slave_SQL_Running: Yes 说名成功,</span><span class="token code keyword">            2.如果在搭建过程出现错误,可以查看查看错误日志文件 cat /var/log/mysqld.log</span> <span class="token title important"><span class="token punctuation">#</span> 9.通过客户端工具进行测试</span>    <span class="token title important"><span class="token punctuation">#</span> 10.关闭主从复制(在从节点执行)</span><span class="token code keyword">    stop slave;</span></code></pre><ul><li>注意:如果出现Slave I/O: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work. Error_code: 1593错误,请执行如下命令,rm -rf /var/lib/mysql/auto.cnf删除这个文件,之所以出现会出现这样的问题，是因为我的从库主机是克隆的主库所在的主机，所以auto.cnf文件中保存的UUID会出现重复.</li></ul><hr><h2 id="13-读写分离"><a href="#13-读写分离" class="headerlink" title="13.读写分离"></a>13.读写分离</h2><h3 id="13-1-MyCat引言"><a href="#13-1-MyCat引言" class="headerlink" title="13.1 MyCat引言"></a>13.1 MyCat引言</h3><p>基于阿里开源的Cobar产品而研发，Cobar的稳定性、可靠性、优秀的架构和性能以及众多成熟的使用案例使得MYCAT一开始就拥有一个很好的起点，站在巨人的肩膀上，我们能看到更远。业界优秀的开源项目和创新思路被广泛融入到MYCAT的基因中，使得MYCAT在很多方面都领先于目前其他一些同类的开源项目，甚至超越某些商业产品。</p><p>MYCAT背后有一支强大的技术团队，其参与者都是5年以上资深软件工程师、架构师、DBA等，优秀的技术团队保证了MYCAT的产品质量。MYCAT并不依托于任何一个商业公司，因此不像某些开源项目，将一些重要的特性封闭在其商业产品中，使得开源项目成了一个摆设. </p><h3 id="13-2-安装Mycat"><a href="#13-2-安装Mycat" class="headerlink" title="13.2 安装Mycat"></a>13.2 安装Mycat</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.下载mycat</span><span class="token code keyword">    http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz</span><span class="token title important"><span class="token punctuation">#</span> 2.解压mycat</span><span class="token code keyword">    tar -zxvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz</span></code></pre><p><img src="Linux.assets/image-20191014225929256.png" alt="image-20191014225929256"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.查看解压之后目录]</span><span class="token code keyword">    [root@localhost mycat]# ls</span><span class="token code keyword">    总用量 12</span><span class="token code keyword">    drwxr-xr-x. 2 root root  190 10月 14 22:58 bin</span><span class="token code keyword">    drwxrwxrwx. 2 root root    6 3月   1 2016 catlet</span><span class="token code keyword">    drwxrwxrwx. 4 root root 4096 10月 14 22:58 conf</span><span class="token code keyword">    drwxr-xr-x. 2 root root 4096 10月 14 22:58 lib</span><span class="token code keyword">    drwxrwxrwx. 2 root root    6 10月 28 2016 logs</span><span class="token code keyword">    -rwxrwxrwx. 1 root root  217 10月 28 2016 version.txt</span></code></pre><p><img src="Linux.assets/image-20191014230002014.png" alt="image-20191014230002014"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 4.移动到/usr目录</span><span class="token code keyword">    mv mycat/ /usr/</span><span class="token title important"><span class="token punctuation">#</span> 5.配置mycat中conf下的配置schema.xml</span></code></pre><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 定义MyCat的逻辑库  --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schema</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test_schema<span class="token punctuation">"</span></span> <span class="token attr-name">checkSQLschema</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">sqlMaxLimit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testNode<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schema</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 定义MyCat的数据节点 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testNode<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dtHost<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dtHost<span class="token punctuation">"</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>native<span class="token punctuation">"</span></span> <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span>  <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">></span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--写节点--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostM1<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>192.168.28.128:3306<span class="token punctuation">"</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                          <span class="token comment" spellcheck="true">&lt;!--从节点--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>readHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostS1<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>192.168.28.129:3306<span class="token punctuation">"</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>writeHost</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">></span></span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 6.配置登陆mycat的权限server.xml</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 这里配置的都是一些系统属性，可以自己查看mycat文--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultSqlParser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>druidparser<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>charset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>utf8mb4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>schemas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>test_schema<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 7.启动mycat</span><span class="token code keyword">     ./mycat console</span><span class="token title important"><span class="token punctuation">#</span> 8.查看日志</span><span class="token code keyword">    tail -f ../logs/mycat.log</span><span class="token title important"><span class="token punctuation">#</span> 9.数据库连接配置,测试</span></code></pre><h2 id="14-安装Nginx"><a href="#14-安装Nginx" class="headerlink" title="14.安装Nginx"></a>14.安装Nginx</h2><h3 id="14-1-Nginx的引言"><a href="#14-1-Nginx的引言" class="headerlink" title="14.1 Nginx的引言"></a>14.1 Nginx的引言</h3><p><code>Nginx</code>是一款<a href="http://baike.baidu.com/subview/1318763/16205192.htm">轻量级</a>的<a href="http://baike.baidu.com/subview/3912/15992867.htm">Web</a> 服务器/<a href="http://baike.baidu.com/view/1165595.htm">反向代理</a>服务器及<a href="http://baike.baidu.com/view/1524.htm">电子邮件</a>（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，<a href="http://baike.baidu.com/view/684757.htm">并发</a>能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：<a href="http://baike.baidu.com/view/1412737.htm">京东</a>、<a href="http://baike.baidu.com/view/2410.htm">新浪</a>、<a href="http://baike.baidu.com/view/6043.htm">网易</a>、<a href="http://baike.baidu.com/view/1591.htm">腾讯</a>、<a href="http://baike.baidu.com/view/3629.htm">淘宝</a>等。</p><h3 id="14-2-Nginx的安装"><a href="#14-2-Nginx的安装" class="headerlink" title="14.2 Nginx的安装"></a>14.2 Nginx的安装</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.安装必要依赖</span><span class="token code keyword">    yum install -y gcc pcre-devel zlib-devel</span><span class="token title important"><span class="token punctuation">#</span> 1.下载Nginx</span><span class="token code keyword">    http://nginx.org/en/download.html</span><span class="token title important"><span class="token punctuation">#</span> 2.将Nginx上传到linux中,并解压缩</span><span class="token code keyword">     tar -zxvf nginx-1.11.1.tar.gz</span><span class="token title important"><span class="token punctuation">#</span> 3.查看Nginx安装目录</span><span class="token code keyword">    [root@localhost nginx-1.11.1]# ls</span><span class="token code keyword">    auto  CHANGES  CHANGES.ru  conf  configure  contrib  html  LICENSE  man  README  src</span><span class="token title important"><span class="token punctuation">#</span> 4.在Nginx安装目录中执行如下命令:(指定安装位置)</span><span class="token code keyword">    ./configure --prefix=/usr/nginx</span><span class="token title important"><span class="token punctuation">#</span> 5.执行上述命令后,执行如下命令:</span><span class="token code keyword">    make &amp;&amp; make install</span><span class="token title important"><span class="token punctuation">#</span> 6.编译完成后进入编译安装目录/usr/nginx目录中查看:</span><span class="token code keyword">    [root@localhost nginx]# ls -l</span><span class="token code keyword">    总用量 4</span><span class="token code keyword">    drwxr-xr-x. 2 root root 4096 10月 14 21:17 conf</span><span class="token code keyword">    drwxr-xr-x. 2 root root   40 10月 14 21:17 html</span><span class="token code keyword">    drwxr-xr-x. 2 root root    6 10月 14 21:17 logs</span><span class="token code keyword">    drwxr-xr-x. 2 root root   19 10月 14 21:17 sbin</span><span class="token title important"><span class="token punctuation">#</span> 7.启动nginx,进入nginx安装目录的sbin目录中执行:</span><span class="token code keyword">    ./nginx   </span><span class="token title important"><span class="token punctuation">#</span> 8.在windows中浏览器访问,可以看到nginx欢迎页面:</span><span class="token code keyword">    http://10.15.0.8:80/</span>    <span class="token code keyword">        注意:关闭网络防火墙</span><span class="token title important"><span class="token punctuation">#</span> 9.关闭nginx,进入nginx安装目录的sbin目录中执行:</span><span class="token code keyword">    ./nginx -s stop</span><span class="token title important"><span class="token punctuation">#</span> 10.nginx配置文件在nginx安装目录的conf目录中:</span><span class="token code keyword">    [root@localhost conf]# ls -l</span><span class="token code keyword">    总用量 60</span><span class="token code keyword">    -rw-r--r--. 1 root root 2656 10月 14 21:17 nginx.conf</span><span class="token code keyword">    .......</span><span class="token code keyword">    注意:nginx.conf为nginx的配置文件,可以在nginx.conf修改nginx默认配置</span></code></pre><hr><h2 id="15-Tomcat负载均衡集群"><a href="#15-Tomcat负载均衡集群" class="headerlink" title="15.Tomcat负载均衡集群"></a>15.Tomcat负载均衡集群</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.准备多个tomcat</span><span class="token code keyword">     tar -zxvf apache-tomcat-8.5.46.tar.gz #解压缩一个新的tomcat安装包</span><span class="token code keyword">     mv apache-tomcat-8.5.46 tomcat1              #将名称改为tomcat1</span><span class="token code keyword">     cp -r tomcat1/ tomcat2                                 #复制一份</span><span class="token code keyword">     cp -r tomcat1/ tomcat3                #复制一份</span><span class="token title important"><span class="token punctuation">#</span> 1.此时当前目录中有三个服务器,如下:</span><span class="token code keyword">    [root@localhost ~]# ls -l</span><span class="token code keyword">    总用量 12248</span><span class="token code keyword">    -rwxrwxrwx. 1 root root  11623939 10月 13 12:25 apache-tomcat-8.5.46.tar.gz</span><span class="token code keyword">    drwxr-xr-x. 9 root root       220 10月 14 21:28 tomcat1</span><span class="token code keyword">    drwxr-xr-x. 9 root root       220 10月 14 21:38 tomcat2</span><span class="token code keyword">    drwxr-xr-x. 9 root root       220 10月 14 21:38 tomcat3</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 2.修改tomcat1端口号:(伪分布式)</span><span class="token code keyword">        vim tomcat1/conf/server.xml,命令修改如下内容:</span><span class="token code keyword">        a.&lt;Server port="8001" shutdown="SHUTDOWN">   ---关闭端口</span><span class="token code keyword">        b.&lt;Connector port="8888" protocol="HTTP/1.1" ---http协议端口</span><span class="token code keyword">               connectionTimeout="20000"</span><span class="token code keyword">               redirectPort="8443" /></span><span class="token code keyword">           c.&lt;Connector port="10010" protocol="AJP/1.3" redirectPort="8443" /> ---AJP协议端口</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.修改tomcat2端口号:(伪分布式)</span><span class="token code keyword">        vim tomcat2/conf/server.xml,命令修改如下内容:</span><span class="token code keyword">      a.&lt;Server port="8002" shutdown="SHUTDOWN"></span><span class="token code keyword">        b.&lt;Connector port="8889" protocol="HTTP/1.1"</span><span class="token code keyword">               connectionTimeout="20000"</span><span class="token code keyword">               redirectPort="8443" /></span><span class="token code keyword">       c.&lt;Connector port="10011" protocol="AJP/1.3" redirectPort="8443" /></span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 4.修改tomcat3端口号:(伪分布式)</span><span class="token code keyword">        vim tomcat2/conf/server.xml,命令修改如下内容:</span><span class="token code keyword">      a.&lt;Server port="8003" shutdown="SHUTDOWN"></span><span class="token code keyword">        b.&lt;Connector port="8890" protocol="HTTP/1.1"</span><span class="token code keyword">               connectionTimeout="20000"</span><span class="token code keyword">               redirectPort="8443" /></span><span class="token code keyword">       c.&lt;Connector port="10012" protocol="AJP/1.3" redirectPort="8443" /></span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 5.将多个tomcat启动:</span><span class="token code keyword">        tomcat1/bin/startup.sh </span><span class="token code keyword">        tomcat2/bin/startup.sh </span><span class="token code keyword">        tomcat3/bin/startup.sh</span>    <span class="token title important"><span class="token punctuation">#</span> 6.查看tomcat是否启动成功</span><span class="token code keyword">        ps -aux|grep tomcat</span></code></pre><p><img src="Linux.assets/image-20191014215035543.png" alt="image-20191014215035543"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 7.在windows中分别访问tomcat,都看到主页代表启动成功:</span>    <span class="token code keyword">    http://10.15.0.8:8888/</span><span class="token code keyword">    http://10.15.0.8:8889/</span><span class="token code keyword">    http://10.15.0.8:8890/</span>    <span class="token code keyword">    注意:这步一定要关闭网路防火墙</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 8.将多个tomcat配置到nginx的配置文件中:</span><span class="token code keyword">    1).在server标签上加入如下配置:</span><span class="token code keyword">    upstream tomcat-servers {</span><span class="token code keyword">      server 10.15.0.8:8888;</span><span class="token code keyword">      server 10.15.0.8:8889;</span><span class="token code keyword">      server 10.15.0.8:8890;</span><span class="token code keyword">    }</span><span class="token code keyword">    2).将配置文件中 location /替换为如下配置:</span><span class="token code keyword">        location / {</span><span class="token code keyword">             proxy_pass http://tomcat-servers;</span><span class="token code keyword">             proxy_redirect    off;</span><span class="token code keyword">             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><span class="token code keyword">             proxy_set_header X-Real-IP $remote_addr;</span><span class="token code keyword">             proxy_set_header Host $http_host;</span><span class="token code keyword">             proxy_next_upstream http_502 http_504 error timeout invalid_header;</span><span class="token code keyword">           }</span></code></pre><p><img src="Linux.assets/image-20191014215825240.png" alt="image-20191014215825240"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 9.进入nginx安装目录sbin目录启动nginx</span><span class="token code keyword">    ./nginx -c /usr/nginx/conf/nginx.conf</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 10.访问nginx,看到其中一个tomcat画面:</span><span class="token code keyword">    http://10.15.0.8/ </span></code></pre><p><img src="Linux.assets/image-20191014220145379.png" alt="image-20191014220145379"></p><h3 id="15-1Nginx负载均衡策略"><a href="#15-1Nginx负载均衡策略" class="headerlink" title="15.1Nginx负载均衡策略"></a>15.1Nginx负载均衡策略</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.轮询</span><span class="token code keyword">     说明: 默认策略,每个请求会按时间顺序逐一分配到不同的后端服务器</span><span class="token title important"><span class="token punctuation">#</span> 2.weight 权重</span><span class="token code keyword">    说明: weight参数用于指定轮询几率，weight的默认值为1,；weight的数值与访问比率成正比 </span><span class="token code keyword">    upstream tomcat-servers {</span><span class="token code keyword">        server localhost:8080   weight=2;  </span><span class="token code keyword">        server localhost:8081;  </span><span class="token code keyword">        server localhost:8082   backup;  </span><span class="token code keyword">    }</span><span class="token code keyword">    注意：1.权重越高分配到需要处理的请求越多。2.此策略可以与least_conn和ip_hash结合使用主要用于后端服务器性能不均</span><span class="token title important"><span class="token punctuation">#</span> 3.ip_hash  4%3=1 </span><span class="token code keyword">    　说明:指定负载均衡器按照基于客户端IP的分配方式，这个方法确保了相同的客户端的请求一直发送到相同的服务器，以保证session会话。这样每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题。</span><span class="token code keyword">    　upstream tomcat-servers {</span><span class="token code keyword">        ip_hash;    #保证每个访客固定访问一个后端服务器</span><span class="token code keyword">        server localhost:8080;</span><span class="token code keyword">        ......</span><span class="token code keyword">    }</span><span class="token title important"><span class="token punctuation">#</span> 4.least_conn</span><span class="token code keyword">    说明: 把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least_conn这种方式就可以达到更好的负载均衡效果。</span><span class="token code keyword">    upstream tomcat-servers{</span><span class="token code keyword">        least_conn;    #把请求转发给连接数较少的后端服务器</span><span class="token code keyword">        server localhost:8080;</span><span class="token code keyword">    }</span></code></pre><hr><h2 id="16-MSM配置"><a href="#16-MSM配置" class="headerlink" title="16.MSM配置"></a>16.MSM配置</h2><blockquote><p>Memcached Session Manager基于memcache缓存的session共享.即使用cacheDB存取session信息，应用服务器接受新请求将session信息保存在cache DB中，当应用服务器发生故障时，调度器会遍历寻找可用节点，分发请求，当应用服务器发现session不在本机内存时，则去cacheDB中查找，如果找到则复制到本机，这样实现session共享和高可用。</p></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.准备一个memcache服务</span><span class="token title important"><span class="token punctuation">#</span> 1.安装memcached</span><span class="token code keyword">     yum install -y memcached</span><span class="token title important"><span class="token punctuation">#</span> 2.启动memcached</span><span class="token code keyword">    memcached -p 11211 -vvv -u root</span><span class="token title important"><span class="token punctuation">#</span> 3.tomcat安装的lib目录中放入与memcache整合jar包</span><span class="token code keyword">        cp *.jar tomcat1/lib</span><span class="token code keyword">        cp *.jar tomcat2/lib</span><span class="token code keyword">        cp *.jar tomcat3/lib</span><span class="token title important"><span class="token punctuation">#</span> 4.配置tomcat目录中conf目录中context.xml(所有tomcat均需要配置)</span><span class="token code keyword">    &lt;Context></span><span class="token code keyword">    &lt;Manager className="de.javakaffee.web.msm.MemcachedBackupSessionManager"</span><span class="token code keyword">        memcachedNodes="n1:10.15.0.8:11211"</span><span class="token code keyword">        sticky="false"  </span><span class="token code keyword">            sessionBackupAsync="false"  </span><span class="token code keyword">        requestUriIgnorePattern=".*\.(ico|png|gif|jpg|css|js)$"</span><span class="token code keyword">        transcoderFactoryClass="de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory"</span><span class="token code keyword">        /></span><span class="token code keyword">    &lt;/Context></span><span class="token title important"><span class="token punctuation">#</span> 5.放入测试项目进行测试</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql索引</title>
      <link href="2021/04/09/mysql-suo-yin/"/>
      <url>2021/04/09/mysql-suo-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql-索引"><a href="#MySql-索引" class="headerlink" title="MySql 索引"></a>MySql 索引</h2><h4 id="什么是索引-index"><a href="#什么是索引-index" class="headerlink" title="什么是索引  index"></a>什么是索引  index</h4><pre class=" language-markdown"><code class="language-markdown">官方定义：一种能帮mysql提高查询效率的数据结构<span class="token list punctuation">-</span> 索引的优点  <span class="token list punctuation">1.</span> 大大提升数据查询效率<span class="token list punctuation">-</span> 索引缺点  <span class="token list punctuation">1.</span> 维护索引需要耗费数据资源  <span class="token list punctuation">2.</span> 索引需要占用电脑空间  <span class="token list punctuation">3.</span> 当对表进行增删改时，因为要维护索引，速度会受到影响</code></pre><h4 id="索引分类-面试必问"><a href="#索引分类-面试必问" class="headerlink" title="索引分类(面试必问)"></a>索引分类(面试必问)</h4><pre class=" language-markdown"><code class="language-markdown">InnoDB<span class="token list punctuation">-</span> a. 主键索引<span class="token code keyword">    设定为主键后数据库会自动创立索引，innodb为聚簇索引  主键索引的索引列的值不能为空</span><span class="token list punctuation">-</span> b. 单值索引（单列索引、普通索引）<span class="token code keyword">    即一个索引只包含一个列，一个表可以有多个单列索引</span><span class="token list punctuation">-</span> c. 唯一索引<span class="token code keyword">    索引的值必须唯一，但允许有空值  唯一索引列值可以存null 但是只能存在一个null</span><span class="token list punctuation">-</span> d. 复合索引<span class="token code keyword">    即一个索引包含多个列</span><span class="token list punctuation">-</span> e. Full Text 全文索引（MYSQL5.7之前 只能用于MYISAM引擎）</code></pre><h4 id="索引的基本操作"><a href="#索引的基本操作" class="headerlink" title="索引的基本操作"></a>索引的基本操作</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 主键索引 自动创建<span class="token list punctuation">-</span> 主键索引是在建表时自动创建的CREATE TABLE t_user(id VARCHAR(20) PRIMARY KEY,name VARCHAR(20))<span class="token list punctuation">-</span> 查看表的索引SHOW INDEX FROM t_user</code></pre><img src="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210304105253785.png" alt="image-20210304105253785" style="zoom:200%;"><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">2.</span> 单列索引（普通索引 单值索引）<span class="token list punctuation">-</span> 普通索引的创建：<span class="token code keyword">    - 建表时创建 </span><span class="token code keyword">    CREATE TABLE t_user1(</span><span class="token code keyword">    id VARCHAR(20) PRIMARY KEY,</span><span class="token code keyword">    name VARCHAR(20),</span><span class="token code keyword">    KEY(name)</span><span class="token code keyword">    )</span><span class="token code keyword">    show index from t_user1</span><span class="token code keyword">    - 建表之后创建</span><span class="token code keyword">    CREATE INDEX name_index on t_user(name)</span></code></pre><p>效果图，第一张是建表时创建，第二张是建表之后创建</p><img src="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210304110357367.png" alt="image-20210304110357367" style="zoom:200%;"><img src="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210304110431593.png" alt="image-20210304110431593" style="zoom:200%;"><pre class=" language-markdown"><code class="language-markdown"></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">3.</span> 唯一索引<span class="token list punctuation">-</span> 唯一索引的创建<span class="token code keyword">    - 建表时创建</span><span class="token code keyword">    CREATE TABLE t_user2(</span><span class="token code keyword">    id VARCHAR(20) PRIMARY KEY,</span><span class="token code keyword">    name VARCHAR(20),</span><span class="token code keyword">    UNIQUE(name)</span><span class="token code keyword">    )</span><span class="token code keyword">    show index from t_user2;</span>    <span class="token code keyword">    - 建表后创建</span><span class="token code keyword">    create index unique name_index on t_user2(name)</span></code></pre><img src="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210304133328268.png" alt="image-20210304133328268" style="zoom:200%;"><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">4.</span> 复合索引<span class="token list punctuation">-</span> 复合索引的创建<span class="token code keyword">    - 建表时创建</span><span class="token code keyword">    create table t_user3(</span><span class="token code keyword">    id varchar(20) primary key,</span><span class="token code keyword">    name varchar(20),</span><span class="token code keyword">    age int,</span><span class="token code keyword">    key(name,age)</span><span class="token code keyword">    )</span><span class="token code keyword">    show index from t_user3</span><span class="token code keyword">    - 建表后创建</span><span class="token code keyword">    create index on t_user3(name,age)</span>    <span class="token code keyword">    根据索引查找：</span><span class="token code keyword">    name age bir #1.左前缀原则 2.mysql引擎在查询时为了更好的利用索引，在查询过程中会动态的调整查询字段的顺序</span></code></pre><img src="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210304133757586.png" alt="image-20210304133757586" style="zoom:200%;"><h4 id="索引的底层原理"><a href="#索引的底层原理" class="headerlink" title="索引的底层原理"></a>索引的底层原理</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 我们执行以下语句    <span class="token code keyword">    create table t_emp(id int primary key,name varchar(20),age int);</span><span class="token code keyword">    insert into t_emp values(5,'d',22);</span><span class="token code keyword">    insert into t_emp values(6,'d',29);</span><span class="token code keyword">    insert into t_emp values(7,'e',28);</span><span class="token code keyword">    insert into t_emp values(1,'a',27);</span><span class="token code keyword">    insert into t_emp values(2,'b',26);</span><span class="token code keyword">    insert into t_emp values(3,'c',25);</span><span class="token code keyword">    insert into t_emp values(4,'a',24);</span><span class="token code keyword">    insert into t_emp values(8,'f',22);</span><span class="token code keyword">    insert into t_emp values(9,'v',21);</span><span class="token code keyword">    show index from t_emp</span><span class="token code keyword">    select * from t_emp</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 我们在插入时是无序的，但是查询结果却是有序的<span class="token list punctuation">-</span> 为什么要进行排序<span class="token code keyword">    为了方便快捷查询</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>seo</title>
      <link href="2021/04/09/seo-bi-ji/"/>
      <url>2021/04/09/seo-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>网站打开速度<br>域名不易过长<br>网站爬虫越多越容易收录<br>     网站用户体验<br>     页面链接至少20-30（增加蜘蛛留存率）<br>查看百度爬虫网络日志<br>提高收录<br>       820 340<br>排名<br>    点击率<br>    跳出率（跳出率越低网站质量越高）<br>    关键词：优化方向，面向用户<br>       如何选择关键词<br>        百度指数：（简单理解为用户在百度搜索某关键词的数量）<br>        指数越高排名难得越大新站一般建议指数500左右的关键词<br>        相关结果：1千万（新站）<br>        广告位：（搜索某关键词展示的广告位 &lt;3）,关键词有商业价值<br>        首页数量：一个百度页面（10个自然排名 5个竞价广告） 自然排名&gt;4<br>    关键词密度：<br>       5*关键词在页面出现的次数/页面的总字数<br>    TDK:<br>       T:标题 （32左右）（可以选3个关键词 T 关键词1-关键词2-关键词3-品牌词）<br>       D:描述（60到80），用户需求（用户痛点，行业优势，包含关键词） 吧<br>       K:关键词<br>    网站栏目（站内点击）</p><pre><code>锚文本    增加网站点击率    增加用户停留时间    增加蜘蛛爬行率（每一个链接都是蜘蛛的入口）高质量锚文本   文字与链接内容匹配   排名关键词匹配性   设置密度不能超过1% 一个页面&lt;4   不能多个链接指向一个文章（回链）   站长用户需求的角度文章写作技巧      图文结合 1-3    字数要求 800~    不能乱写 挖掘关键词外链    吸引百度蜘蛛与用户    绿萝算法 友情链接    30个左右    网站权重 选择权重高    优质站点 （潜力股）    nofollow :禁止蜘蛛对该链接分配权重，禁止蜘蛛爬行该链接    rel="nofollow"    内页闪电算法：秒拍数据的要求   百度针对网站打开速度提出的一项优化规则      2-3秒之间 默认不加分不减分       大于3秒:      &lt;2秒：秒排标准      css/js文件少      网站图片太多，太大      根据network优化      服务器问题 利用站长工具查看服务器速度     H标签 nofollow :不重要的页面，外部链接 不浪费权重 alt：给图片做说明，要排名的关键词           wangzhiquan   wangzhiquan520</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>http协议</title>
      <link href="2021/04/09/http-xie-yi/"/>
      <url>2021/04/09/http-xie-yi/</url>
      
        <content type="html"><![CDATA[<h4 id="tcp"><a href="#tcp" class="headerlink" title="tcp"></a>tcp</h4><p>TCP提供一个面向连接的，可靠的字节流服务<br>面向连接意味着两个使用TCP的应用（通常是一个客户端和服务器）在彼此交换数据之前必须先建立<br>一个TCP连接。<br>在一个TCP连接中，仅有两方进行彼此通信</p><h4 id="tcp提供可靠传输"><a href="#tcp提供可靠传输" class="headerlink" title="tcp提供可靠传输"></a>tcp提供可靠传输</h4><p>应用数据被分割成tcp认为最合适发送的数据块（便于传输）<br>当tcp发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段（快递）<br>当tcp收到发自TCP连接另一端的数据它将发送一个确认，这个确认不是立即发送，通常将推迟几分之一秒（一般200ms）。<br>tcp将保持它首部和数据的校验和（保证数据没有被破坏）<br>解决ip ip缺点，丢包，重复，乱序<br>tcp报文段作为ip数据报来传输，而ip数据报的到可能会失序，因此TCP报文段的到达也可能会失序，如果必要，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。<br>既然ip数据报会发生重复，tcp的接收端必须丢弃重复的数据。<br>tcp还能提供流量控制，tcpl连接的每一方都要固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这样将防止较快主机致使较慢主机的缓冲区溢出。</p><h4 id="tcp字节流"><a href="#tcp字节流" class="headerlink" title="tcp字节流"></a>tcp字节流</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="2021/04/09/shu-ju-jie-gou/"/>
      <url>2021/04/09/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><p>数据元素之间存在一对一的线性关系。</p><p>线性结构有两种不同的存储方式</p><p>线性结构常见的有：数组（稀疏数组、）、队列（单向队列，环形队列）、链表（单链表、环形链表、双链表）、栈</p><h3 id="顺序存储方式"><a href="#顺序存储方式" class="headerlink" title="顺序存储方式"></a>顺序存储方式</h3><p>顺序存储的线性表称为顺序表，顺序表中存储的元素的连续的（内存分配的地址）如数组。</p><p><strong>稀疏数组示例</strong>  围棋棋盘（二维数组转换为稀疏数组，稀疏数组转换为棋盘）</p><pre class=" language-java"><code class="language-java">​```<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestOne</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">//将棋盘二维数组转换为稀疏数组</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建棋盘数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//白子(1)：2行3列</span>        <span class="token comment" spellcheck="true">//黑子(2)：3行4列</span>        arr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        arr1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建稀疏数组</span>        <span class="token comment" spellcheck="true">//row col value</span>        <span class="token comment" spellcheck="true">// 11 11    2</span>        <span class="token comment" spellcheck="true">//2.1遍历求得棋盘中棋子的数量</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始棋盘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">:</span>arr1<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sum<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"棋盘中棋子的数量"</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * row col value         * 11  11  2         * 1   2   1         * 2   3   2         */</span>        xs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        xs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        xs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成稀疏数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                    System.out.println(i);</span><span class="token comment" spellcheck="true">//                    System.out.println(j);</span>                    z<span class="token operator">++</span><span class="token punctuation">;</span>                    xs<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    xs<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    xs<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        xs[1][0] = 1;</span><span class="token comment" spellcheck="true">//        xs[1][1] = 2;</span><span class="token comment" spellcheck="true">//        xs[1][2] = 1;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        xs[2][0] = 2;</span><span class="token comment" spellcheck="true">//        xs[2][1] = 3;</span><span class="token comment" spellcheck="true">//        xs[2][2] = 2;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"稀疏棋盘显示"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token operator">:</span>xs<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">:</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//稀疏数组转换为棋盘二维数组</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> qp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>xs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>xs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>xs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          qp<span class="token punctuation">[</span>xs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>xs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> xs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"稀疏数组转换完二维数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">:</span>qp<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sum<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>队列</strong></p><p>队列是一个有序列表，可以用数组或链表实现</p><p>遵循先进先出的原则，先存入队列的数据，要先取出，后存入的数据要后取出。</p><p><strong>数组模拟队列代码实现</strong></p><p>数组模拟队列示意图</p><p><img src="C:\Users\21974\AppData\Roaming\Typora\typora-user-images\image-20201218094258805.png" alt="image-20201218094258805"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayQueue</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 数组模拟队列     * rear：队列后置标志 （随着队列元素增加而增加） 初始化=-1     * front:队列前置标志（队列中头一个位置-1）（随着队列减少而增加）初始化=-1     * 构造     * 添加     * maxSize:队列能够存储的最大元素     * isMax（是否超出队列最大限制） = maxSize-1(因为数组索引从0开始)、     * isEmpty     * showQueue 遍历 队列     * showHead 返回队列头部     * getQueue     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rear<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayQueue arrayQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayQueue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户输入</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出菜单</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s：显示队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e：退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a：添加队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"g：从队列中取值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h：查看队列头部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>                    arrayQueue<span class="token punctuation">.</span><span class="token function">showQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"please inout number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> value <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    arrayQueue<span class="token punctuation">.</span><span class="token function">addQueue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'g'</span><span class="token operator">:</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取出的数据是："</span> <span class="token operator">+</span> arrayQueue<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        String message <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'h'</span><span class="token operator">:</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列头的数据是："</span> <span class="token operator">+</span> arrayQueue<span class="token punctuation">.</span><span class="token function">getHeadQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        String message <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span>                    scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ArrayQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//队列尾下表</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//队列头前一个位置的下标</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//队列是否为空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//队列是否已满</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> maxSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将元素存入队列中</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            rear<span class="token operator">++</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"元素添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列已满不能添加数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//取出队列数据</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列中没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列中没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        front<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查询队列</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回队列头部</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHeadQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列中没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列中没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述代码已经完成了一个最基本的队列，但是存在问题如下</p><p>1.目前数组只能使用一次，达不到复用效果</p><p>2.将这个数组使用算法改进成环形数组 核心取模（%）</p><p><strong>优化队列（取模）</strong></p><p><strong>数组模拟环形队列</strong></p><h3 id="链式存储方式"><a href="#链式存储方式" class="headerlink" title="链式存储方式"></a>链式存储方式</h3><p>链式存储方式称为链表，链表中的数据元素不一定是连续的，元素节点中存放数据元素以及相邻元素的地址信息，可以充分利用碎片内存</p><h2 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h2><p>元素之间不存在一对一关系</p><p>非线性结构包括：二维数组、多维数组、广义表、树结构、图结构</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手写Proimise</title>
      <link href="2021/04/09/shou-xie-promise-zhong-ji-ban/"/>
      <url>2021/04/09/shou-xie-promise-zhong-ji-ban/</url>
      
        <content type="html"><![CDATA[<p>手写Promise中级版</p><h4 id="搭建基本结构"><a href="#搭建基本结构" class="headerlink" title="搭建基本结构"></a>搭建基本结构</h4><p>lib/Promise.js</p><pre><code>/** *  * 自定义Promise函数模块 */(function (window){        function Promise(executor){    }    /**     * Promise原型对象的then()     * 指定成功和失败的回调函数     * 返回一个新的Promise对象     */    Promise.prototype.then = function(onResolved,onRejected){    }    /**     * Promise原型对象的catch()     * 指定失败的回调函数     * 返回一个新的Promise对象     */    Promise.prototype.catch = function(onRejected){    }    /**     * Promise函数对象的resolve方法     * 返回一个成功的Promise     *      */    Promise.resolve = function(value){    }    /**     * Promise函数的reject方法     * 返回一个指定reason的失败的promise     */    Promise.reject = function(reason){    }    /**     * Promsie函数对象all方法     * 返回一个promise，只有当所有promise都成功时才成功，否则只要有一个失败就失败     */    Promise.all = function(promises){    }    /**     * Promise函数对象的race方法     * 返回一个promise，其结果有第一个完成的promise决定     */    Promise.race = function(promises){            }    //向外暴露Promsie函数    window.Promise = Promise})(window)</code></pre><p>在index.html引入</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script src="./lib/Promise.js"&gt;&lt;/script&gt;    &lt;script&gt;        new Promise((resolve,reject)=&gt;{        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="实现Promise构造函数"><a href="#实现Promise构造函数" class="headerlink" title="实现Promise构造函数"></a>实现Promise构造函数</h4><p><strong>定义resolve与reject</strong></p><pre><code>(function (window){        function Promise(executor){        //定义resolve与reject函数        function resolve(value){        }        function reject(reason){                    }        //立即同步执行 执行器        executor(resolve,reject)    }    ...</code></pre><p>Promise构造函数接收一个执行，我们要在内部同步执行执行器<br>如</p><pre><code> &lt;script&gt;        new Promise((resolve,reject)=&gt;{            resolve(1)        })&lt;/script&gt;</code></pre><pre><code>...  //立即同步执行 执行器executor(resolve,reject)...</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql基本操作</title>
      <link href="2021/04/09/mysql-ji-ben-cao-zuo/"/>
      <url>2021/04/09/mysql-ji-ben-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本课程只讲部分必要的增删改查操作，mysql操作数据库的语句和方法有较多，需要同学们自己做知识扩展。</p><h2 id="一、Navicat安装"><a href="#一、Navicat安装" class="headerlink" title="一、Navicat安装"></a>一、Navicat安装</h2><p><code>Navicat for MySQL</code> 是一套全面的前端工具为数据库管理、开发和维护提供了一款直观而强大的图形界面，能同时连接 MySQL 和 MariaDB 数据库。</p><p>有关 <code>Navicat for MySQL</code> 软件的下载和安装，大家可以百度搜索，当然，我这里也给大家找到一篇文章：</p><p><a href="https://www.cnblogs.com/yanghongtao/p/10976526.html">https://www.cnblogs.com/yanghongtao/p/10976526.html</a></p><p>至于想要m1 mac版的童鞋，可以私信我。</p><h2 id="二、MySQL安装"><a href="#二、MySQL安装" class="headerlink" title="二、MySQL安装"></a>二、MySQL安装</h2><p>这里提供菜鸟教程的安装指引，含win、mac、linux:</p><p><a href="https://www.runoob.com/mysql/mysql-install.html">https://www.runoob.com/mysql/mysql-install.html</a></p><p>如果有纠结版本问题的话，可以直接默认最新版，本教程用的是版本5.6以上。</p><h2 id="三、数据库基本操作语句"><a href="#三、数据库基本操作语句" class="headerlink" title="三、数据库基本操作语句"></a>三、数据库基本操作语句</h2><h3 id="1、数据库操作"><a href="#1、数据库操作" class="headerlink" title="1、数据库操作"></a>1、数据库操作</h3><p>连接数据库：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这里默认用户名是root，密码请先设置为简单的123456即可</span>mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p123456</code></pre><p>创建、删除与显示数据库：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建数据库</span>mysql<span class="token operator">></span> create database test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除数据库（不要轻易使用）</span>mysql<span class="token operator">></span> drop database test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 显示数据库</span>mysql<span class="token operator">></span> show databases<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span> Database           <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> selectTest         <span class="token operator">|</span><span class="token operator">|</span> sys                <span class="token operator">|</span><span class="token operator">|</span> test               <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token number">8</span> rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span></code></pre><h3 id="2、表操作"><a href="#2、表操作" class="headerlink" title="2、表操作"></a>2、表操作</h3><p>表的查看、创建与删除：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建表(假设创建一张banner表，其中包含id和imgUrl字段)</span><span class="token comment" spellcheck="true">/*    INT                         整数型    PRIMARY KEY       主键约束    AUTO_INCREMENT    自增约束    VARCHAR                    长字符串    COMMENT                    字段注释*/</span>mysql<span class="token operator">></span> create table banner <span class="token punctuation">(</span>    id INT PRIMARY KEY AUTO_INCREMENT<span class="token punctuation">,</span>  imgUrl <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> COMMENT <span class="token string">'轮播图地址'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除表（不要轻易使用）</span>mysql<span class="token operator">></span> drop table banner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 查看表</span>mysql<span class="token operator">></span> show tables<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> Tables_in_kdlzx <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> banner          <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">1</span> row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 查看banner表字段（描述）</span>mysql<span class="token operator">></span> describe banner<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span> Field  <span class="token operator">|</span> Type         <span class="token operator">|</span> Null <span class="token operator">|</span> Key <span class="token operator">|</span> Default <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span> id     <span class="token operator">|</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">|</span> NO   <span class="token operator">|</span> PRI <span class="token operator">|</span> NULL    <span class="token operator">|</span> auto_increment <span class="token operator">|</span><span class="token operator">|</span> imgUrl <span class="token operator">|</span> <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token number">2</span> rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span></code></pre><h3 id="3、增删改查"><a href="#3、增删改查" class="headerlink" title="3、增删改查"></a>3、增删改查</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 往表里增加一条数据</span>mysql<span class="token operator">></span> insert into banner values <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'/assets/images/banner1.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 查看表中所有数据</span>mysql<span class="token operator">></span> select <span class="token operator">*</span> <span class="token keyword">from</span> banner<span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> imgUrl      <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> banner1<span class="token punctuation">.</span>png <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">1</span> row <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 专门针对某个字段进行数据添加</span><span class="token comment" spellcheck="true">// 由于id是一个自增字段，因此可以不用设置该字段的值，该字段即可自增</span>mysql<span class="token operator">></span> INSERT INTO banner SET imgUrl <span class="token operator">=</span> <span class="token string">'banner2.png'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span> id <span class="token operator">|</span> imgUrl      <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> banner1<span class="token punctuation">.</span>png <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> banner2<span class="token punctuation">.</span>png <span class="token operator">|</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token number">2</span> rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 清空表数据（不要轻易使用）</span>mysql<span class="token operator">></span> <span class="token keyword">delete</span> <span class="token keyword">from</span> banner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 更新一条数据</span>mysql<span class="token operator">></span> UPDATE banner SET imgUrl<span class="token operator">=</span><span class="token string">"banner3.png"</span> WHERE id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><h2 id="四、往数据库中添加项目所需数据"><a href="#四、往数据库中添加项目所需数据" class="headerlink" title="四、往数据库中添加项目所需数据"></a>四、往数据库中添加项目所需数据</h2><h4 id="banner数据："><a href="#banner数据：" class="headerlink" title="banner数据："></a>banner数据：</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建banner表格(终端运行)</span>create table banner <span class="token punctuation">(</span>    id INT NOT NULL PRIMARY KEY<span class="token punctuation">,</span>    imgUrl <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> NOT NULL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加数据</span><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./db'</span><span class="token punctuation">)</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> imgUrl<span class="token punctuation">:</span> <span class="token string">'/images/banner1.png'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> imgUrl<span class="token punctuation">:</span> <span class="token string">'/images/banner2.png'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> imgUrl<span class="token punctuation">:</span> <span class="token string">'/images/banner3.png'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>val<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这里记住，如果是字符串，必须在变量外层套一个引号，否则会出现sql语句报错</span>    <span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`INSERT INTO banner VALUES (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>imgUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">')`</span></span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 运行这份js文件</span>node xxx<span class="token punctuation">.</span>js</code></pre><h4 id="subject数据："><a href="#subject数据：" class="headerlink" title="subject数据："></a>subject数据：</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建subject表格(终端运行)</span>create table subject <span class="token punctuation">(</span>    id INT NOT NULL PRIMARY KEY<span class="token punctuation">,</span>    icon <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> NOT NULL<span class="token punctuation">,</span>    title <span class="token function">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> NOT NULL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加数据</span><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./db'</span><span class="token punctuation">)</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">'/images/subjectIcons1.png'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"Java EE"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">'/images/subjectIcons2.png'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"全栈UI设计"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">'/images/subjectIcons3.png'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"H5前端"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">'/images/subjectIcons4.png'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"Python"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">'/images/subjectIcons5.png'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"iOS"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">'/images/subjectIcons6.png'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"大数据"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">'/images/subjectIcons7.png'</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"C++"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>val<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`INSERT INTO subject VALUES (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">')`</span></span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="五、联表查询"><a href="#五、联表查询" class="headerlink" title="五、联表查询"></a>五、联表查询</h2><p>这里我们通过对首页资讯模块与文章页进行联表数据处理。</p><h3 id="1、文章数据录入"><a href="#1、文章数据录入" class="headerlink" title="1、文章数据录入"></a>1、文章数据录入</h3><p>我们先录入三篇文章，创建三份txt文件放在assets中：</p><h4 id="vue-txt-内容："><a href="#vue-txt-内容：" class="headerlink" title="* vue.txt 内容："></a>* vue.txt 内容：</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Vue 提出的渐进式框架的理念，也即是『既是框架，又不是框架』，取决于你想怎么用。最近跟 Yehuda Katz 的聊天的时候，他表示 Ember 团队关注 Vue 已经有一阵子，并且觉得在框架/模块化的平衡这一点上 Vue 做到了他们一直想做的。他们也在试图把 Ember 的各个部件做得更解耦更容易被单独使用。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Vue 有一个其他框架真的都没有的理念，同时也是我觉得真正关系到 Vue 的成功的一点，那就是『把高大上的思想变得平易近人』。每个喜欢 Vue 的用户，都会提到容易上手和文档友好。我想说，易用性不是偶然的，做到易用而强大也不是简单的事情，不信你可以试试。对我来说，衡量 Vue 的成功不在于它能让多少人拿来装逼，而是它能让多少人更快更有效率地开发出应用，更早下班回家陪老婆孩子。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h4 id="angular-txt-内容"><a href="#angular-txt-内容" class="headerlink" title="* angular.txt 内容:"></a>* angular.txt 内容:</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>在最近开发的一个功能中，我们无法在 T 项目中通过某个 Angular 组件触发另一个 AngularJS 组件的展示。我们经过很长时间才弄清楚了其中的来龙去脉。就像我在之前某封 aha moment 邮件里说的那样，避免写出错误代码的方式是真正理解你编写的代码。所以在这里我不会仅仅给出解决方案，还会详细叙述这个问题背后的机理。如果以后你遇到了相似的问题，希望这篇文章能给你带来帮助。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>很多年前我听过一个笑话，说如果你拿一个疑问去问专家，你的一个疑问会变成三个疑问，因为他会用另外两个你更不明白的词来解释这个疑问。但后来我发现这不是笑话而是绝大部分我自己面临的现状。所以在解释这个问题的过程中，我不可避免的需要引入更多的知识进行，好在它们都易于理解，只是有些冗长。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>无论是 Angular 还是 AngularJS ，其中最重要的一个机制是判断当前 UI 是否要进行更新。我们可以把这种机制统一解读为 “脏检查”，即判断数据是否发生了变化。但是在 Angular 和 AngularJS 中字面上的 “脏检查” 背后的逻辑却大相径庭。在 Angular 中这种机制称之为 change detection（以下我们简称 CD），而在 AngularJS 中这种机制称之为 dirty checking（以下简称 DC）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>想象一个最简单的场景：你在页面上点击了一个按钮。但如果你在点击事件的回调函数中更改了一些数值，Angular 是怎么知道的？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>因为 Angular 采用 monkey patch 的方式重写并覆盖了浏览器的 addEventListenter 接口，在调用回调函数的同时手动触发了 CD。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h4 id="react-txt-内容："><a href="#react-txt-内容：" class="headerlink" title="* react.txt 内容："></a>* react.txt 内容：</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Props、State的概念都很清晰，组件的普通属性是指在组件中直接挂载到this下的属性。其实，Props和State也是组件的两个普通属性，因为我们可以通过this.props 和 this.state 直接获取到。那么Props、State 和 组件的其他普通属性，分别应该在什么场景下使用呢？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Props和State都是用于组件渲染的，也就是说，一个组件最终长成什么样，取决于这个组件的Props和State。Props和State的变化都会触发组件的render方法。但这两者也是有区别的。Props是只读的数据，它是由父组件传递过来的；而State是组件内部自己维护的状态，是可变的。State可以根据Props的变化而变化。如果组件中还需要其他属性，而这个属性又与组件的渲染无关（也就是render方法中不会用到），那么就可以把这个属性直接挂在到this下，而不是作为组件的一个状态。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>例如，组件中需要一个定时器，每隔几秒改变一下组件的状态，就可以定义一个this.timer属性，以备在componentWillUnmount时，清除定时器。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>父组件每次render方法被调用，或者组件自己每次调用setState方法，都会触发组件的render方法（前提是shouldComponentUpdate使用默认行为，总是返回true）。那么组件每次render，是不是都会导致实体DOM的重新创建呢？答案是，不是！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>React之所以比直接操作DOM的JS库快，原因是React在实体DOM之上，抽象出一层虚拟DOM，render方法执行后，得到的是虚拟DOM，React 会把组将当前的虚拟DOM结构和前一次的虚拟DOM结构做比较，只有存在差异性，React才会把差异的内容同步到实体DOM上。如果两次render后的虚拟DOM结构保持一致，并不会触发实体DOM的修改。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="2、文件读取"><a href="#2、文件读取" class="headerlink" title="2、文件读取"></a>2、文件读取</h3><h4 id="先测试文件读取"><a href="#先测试文件读取" class="headerlink" title="* 先测试文件读取"></a>* 先测试文件读取</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 测试读取vue.txt文件</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`../assets/vue.txt`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里读取到的文件是二进制文件流，因此要转字符串</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="封装文件读取函数"><a href="#封装文件读取函数" class="headerlink" title="* 封装文件读取函数"></a>* 封装文件读取函数</h4><p>如果上面这一步可以成功，那就把这个方法封装一下，方便我们调用：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 读取文件的函数</span><span class="token keyword">function</span> <span class="token function">readFileFn</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`../assets/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>subject<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.txt`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="3、建表"><a href="#3、建表" class="headerlink" title="3、建表"></a>3、建表</h3><p>建立 <code>zixun</code> 与 <code>article</code> 两张表</p><pre class=" language-mysql"><code class="language-mysql">// 创建联表数据（，终端运行）CREATE TABLE zixun(    id INT PRIMARY KEY COMMENT '资讯id',    title VARCHAR(100) COMMENT '标题',    subtitle VARCHAR(100) COMMENT '子标题',    icon VARCHAR(100) NOT NULL COMMENT 'logo');CREATE TABLE article(    id INT PRIMARY KEY COMMENT '资讯id',    title VARCHAR(20) COMMENT '标题',    author VARCHAR(20) COMMENT '作者',    date VARCHAR(20) COMMENT '日期',    imgUrl VARCHAR(100) COMMENT '配图',    content LONGTEXT COMMENT '内容-存储html标签',        FOREIGN KEY (id) REFERENCES zixun(id));</code></pre><h4 id="添加zixun表数据："><a href="#添加zixun表数据：" class="headerlink" title="* 添加zixun表数据："></a>* 添加zixun表数据：</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 给表zixun添加数据</span><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./db'</span><span class="token punctuation">)</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">'/images/angular.gif'</span><span class="token punctuation">,</span> subtitle<span class="token punctuation">:</span> <span class="token string">"学会用 Angular 构建应用，把这些代码和能力复用在多种不同平台的应用上"</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"一套框架多种平台 移动端&amp;桌面端"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">'/images/vue.gif'</span><span class="token punctuation">,</span> subtitle<span class="token punctuation">:</span> <span class="token string">"不断繁荣的生态系统，可以在一个库和一套完整框架之间自如伸缩"</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"渐进式的JavaScript 框架"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">'/images/react.gif'</span><span class="token punctuation">,</span> subtitle<span class="token punctuation">:</span> <span class="token string">"组件逻辑使用 JavaScript 编写而非模版，你可以轻松地在应用中传递数据，并使得状态与 DOM 分离"</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"用于构建用户界面的 JavaScript 库"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>val<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`INSERT INTO zixun VALUES (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>subtitle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">')`</span></span><span class="token punctuation">;</span>    db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="添加article表数据："><a href="#添加article表数据：" class="headerlink" title="* 添加article表数据："></a>* 添加article表数据：</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./db'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 读取文件的函数</span><span class="token keyword">function</span> <span class="token function">readFileFn</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`../assets/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>subject<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.txt`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> vueContent<span class="token punctuation">,</span> reactContent<span class="token punctuation">,</span> angularContent<span class="token punctuation">;</span><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 分别读取这几份txt文件</span>    vueContent <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFileFn</span><span class="token punctuation">(</span><span class="token string">'vue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reactContent <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFileFn</span><span class="token punctuation">(</span><span class="token string">'react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    angularContent <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFileFn</span><span class="token punctuation">(</span><span class="token string">'angular'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"一套框架多种平台 移动端&amp;桌面端"</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">"张三丰"</span><span class="token punctuation">,</span> date<span class="token punctuation">:</span> <span class="token string">"2013-03-22"</span><span class="token punctuation">,</span> imgUrl<span class="token punctuation">:</span> <span class="token string">"/images/dt.png"</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> angularContent<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"渐进式的JavaScript 框架"</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">"小鱼儿"</span><span class="token punctuation">,</span> date<span class="token punctuation">:</span> <span class="token string">"2014-04-23"</span><span class="token punctuation">,</span> imgUrl<span class="token punctuation">:</span> <span class="token string">"/images/dt.png"</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> vueContent<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"一套框架多种平台 移动端&amp;桌面端"</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">"花无缺"</span><span class="token punctuation">,</span> date<span class="token punctuation">:</span> <span class="token string">"2015-05-24"</span><span class="token punctuation">,</span> imgUrl<span class="token punctuation">:</span> <span class="token string">"/images/dt.png"</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> reactContent<span class="token punctuation">}</span>    <span class="token punctuation">]</span>    data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>val<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`INSERT INTO article VALUES (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>imgUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">')`</span></span><span class="token punctuation">;</span>        db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>koa2快速入门</title>
      <link href="2021/04/09/koa2-kuai-su-ru-men/"/>
      <url>2021/04/09/koa2-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本课程只适合学过 <code>nodeJs</code> 的同学。</p><h2 id="一、Koa2安装"><a href="#一、Koa2安装" class="headerlink" title="一、Koa2安装"></a>一、Koa2安装</h2><p>创建一个空白目录，然后进入终端，并在终端对koa进行安装：</p><pre class=" language-js"><code class="language-js"># 项目初始化npm init <span class="token operator">-</span>y# 安装koa2npm i koa2 <span class="token operator">-</span>S</code></pre><h2 id="二、入口文件"><a href="#二、入口文件" class="headerlink" title="二、入口文件"></a>二、入口文件</h2><p>在项目根目录创建 <code>app.js</code> 文件，并在上一步操作中生成的 <code>package.json</code> 里配置：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"node app.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>在 <code>app.js</code> 中：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*     解释下面这段代码：    app.use()方法是：将给定的中间件方法添加到此应用程序。简单说就是调用中间件    app.use() 返回 this, 因此可以链式表达*/</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"Hello, Koa"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// ctx.body是ctx.response.body的简写</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at http://localhost:'</span><span class="token operator">+</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>然后运行 <code>npm start</code> ，并在浏览器输入 <code>http://localhost:9000/</code> 即可看到页面效果。</p><h2 id="三、洋葱模型"><a href="#三、洋葱模型" class="headerlink" title="三、洋葱模型"></a>三、洋葱模型</h2><p>学Koa必须要了解 <code>洋葱模型</code> :</p><img src="https://segmentfault.com/img/bV6DZG/view?w=478&amp;h=435" style="1px solid"><p><code>Koa</code> 和 <code>Express</code> 都会使用到中间件，Express的中间件是顺序执行，从第一个中间件执行到最后一个中间件，发出响应：</p><img src="https://upload-images.jianshu.io/upload_images/3663059-b6acea9ec3f0a8f9.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/883/format/webp" style="border: 1px solid"><p>Koa是从第一个中间件开始执行，遇到 <code>next</code> 进入下一个中间件，一直执行到最后一个中间件，在逆序，执行上一个中间件 <code>next</code> 之后的代码，一直到第一个中间件执行结束才发出响应。</p><img src="https://upload-images.jianshu.io/upload_images/3663059-03622ea2a9ffce2a.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/814/format/webp" style="border: 1px solid"><p>对于这个洋葱模型，我们用代码来解释一下。假如把上面的代码改写成：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at http://localhost:'</span><span class="token operator">+</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>那么在浏览器刷新后，控制台得到的顺序是：</p><pre><code>12321</code></pre><p>现在可以看到，我们通过 <code>next</code>可以先运行下个中间件，等中间件结束后，再继续运行当前 <code>next()</code> 之后的代码。</p><h2 id="四、路由安装"><a href="#四、路由安装" class="headerlink" title="四、路由安装"></a>四、路由安装</h2><p>当需要匹配不同路由时，可以安装：</p><pre><code>npm i koa-router</code></pre><p>将 <code>app.js</code> 修改：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"首页"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"列表页"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at http://localhost:'</span><span class="token operator">+</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>此时，到浏览器刷新并在地址栏最后添加 <code>/list</code> 即可得到首页和列表页。</p><p>备注：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 调用router.routes()来组装匹配好的路由，返回一个合并好的中间件</span><span class="token comment" spellcheck="true">// 调用router.allowedMethods()获得一个中间件，当发送了不符合的请求时，会返回 `405 Method Not Allowed` 或 `501 Not Implemented`</span>allowedMethods方法可以做以下配置：app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// throw: true, // 抛出错误，代替设置响应头状态</span>    <span class="token comment" spellcheck="true">// notImplemented: () => '不支持当前请求所需要的功能',</span>    <span class="token comment" spellcheck="true">// methodNotAllowed: () => '不支持的请求方式'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="五、路由拆分"><a href="#五、路由拆分" class="headerlink" title="五、路由拆分"></a>五、路由拆分</h2><p>有时候我们需要拆分路由，比如：</p><p>列表页下所有的子路由（即前端请求的api）与首页所有的子路由想分开处理，那么就需要拆分路由。</p><h3 id="1、创建-router-文件夹"><a href="#1、创建-router-文件夹" class="headerlink" title="1、创建 router 文件夹"></a>1、创建 <code>router</code> 文件夹</h3><p>创建router文件夹，并在其中创建：<code>index.js</code> （路由总入口文件）、<code>home.js</code> （首页总路由文件）、<code>list.js</code> （列表页总路由文件）：</p><pre class=" language-js"><code class="language-js"># app<span class="token punctuation">.</span>js<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router/index'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span># index<span class="token punctuation">.</span>js<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> home <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./home'</span><span class="token punctuation">)</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./list'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span># home<span class="token punctuation">.</span>js<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> home <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里的 '/' 就是指向 index.js 中的 /home</span>home<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"首页"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> home<span class="token punctuation">;</span># list<span class="token punctuation">.</span>js<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"列表页"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> list<span class="token punctuation">;</span></code></pre><p>到浏览器刷新 <code>localhost:9000/home</code> 与 <code>localhost:9000/list</code> 即可得到首页与列表页。</p><h3 id="2、路由重定向"><a href="#2、路由重定向" class="headerlink" title="2、路由重定向"></a>2、路由重定向</h3><p>那么有同学会问了，如果我想直接从 <code>localhost:9000</code> 重定向到 <code>localhost:9000/home</code> 该怎么办？</p><p>我们可以在 <code>router/index.js</code> 中做如下配置：</p><pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span>router<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3、404无效路由"><a href="#3、404无效路由" class="headerlink" title="3、404无效路由"></a>3、404无效路由</h3><p>如果被访问到无效路由，那么我们可以统一返回404页面：</p><p>在 <code>router</code> 下 <code>errorPage.js</code> :</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> errorPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>errorPage<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"访问页面不存在"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> errorPage<span class="token punctuation">;</span></code></pre><p>在 <code>app.js</code> 中引用：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 匹配不到页面的全部跳转去404</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"/404"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="六、统一异常处理（可选）"><a href="#六、统一异常处理（可选）" class="headerlink" title="六、统一异常处理（可选）"></a>六、统一异常处理（可选）</h2><p>作为后端开发，我们经常需要统一异常处理，避免每次都要自己手写404或200进行返回，因此我们可以创建 <code>utils/errorHandler.js</code> ：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 统一异常处理</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> fileName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            status <span class="token operator">=</span> ctx<span class="token punctuation">.</span>status<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//console.log(err);</span>            status <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">>=</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">400</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">404</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">500</span><span class="token punctuation">:</span>                    fileName <span class="token operator">=</span> status<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    fileName <span class="token operator">=</span> <span class="token string">"other"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后在 <code>app.js</code> 中引入：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> errorHandler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils/errorHandler.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token function">errorHandler</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其实这一块不写关系也不大，但最好还是加上。</p><h2 id="七、操作mysql函数封装"><a href="#七、操作mysql函数封装" class="headerlink" title="七、操作mysql函数封装"></a>七、操作mysql函数封装</h2><p>这里已经给大家直接封装好了一个库，专门用来操作mysql的。至于mysql的学习，将在独立的mysql教程中呈现。</p><p>首先，项目内安装 <code>mysql</code>：</p><pre class=" language-js"><code class="language-js">yarn add mysql</code></pre><p>现在，我们在 <code>utils</code> 目录下创建一个 <code>db.js</code> 文件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token keyword">var</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 连接的服务器(代码托管到线上后，需改为内网IP，而非外网)</span>    port<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// mysql服务运行的端口</span>    database<span class="token punctuation">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 选择的库</span>    user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 用户名</span>    password<span class="token punctuation">:</span> <span class="token string">'123456'</span> <span class="token comment" spellcheck="true">// 用户密码   </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//对数据库进行增删改查操作的基础</span><span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">{</span>        connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span>rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>rows<span class="token punctuation">)</span>            connection<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>query <span class="token operator">=</span> query<span class="token punctuation">;</span></code></pre><p>调用方式：</p><blockquote><p>假设要访问首页(‘/home’)时，要查询表users中所有的数据，可以如下操作：</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/db.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>home    <span class="token comment" spellcheck="true">// 页面底部外链</span>    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">let</span> sqlLang <span class="token operator">=</span> <span class="token template-string"><span class="token string">`select * from users`</span></span><span class="token punctuation">;</span>            db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlLang<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回拿到的数据</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="八、后端允许跨域"><a href="#八、后端允许跨域" class="headerlink" title="八、后端允许跨域"></a>八、后端允许跨域</h2><p>前端想跨域，可以设置proxy。如果后端允许跨域，可以如下操作：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 安装koa2-cors</span>cnpm i koa2<span class="token operator">-</span>cors<span class="token comment" spellcheck="true">// 这里cors中间件一定要写在路由之前</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="九、读取静态资源文件"><a href="#九、读取静态资源文件" class="headerlink" title="九、读取静态资源文件"></a>九、读取静态资源文件</h2><p>首先，在项目的根目录下创建 <code>assets</code> 后，将图片资源文件夹 <code>images</code> 放到其中，并且执行以下操作：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 安装koa-static</span>cnpm install koa<span class="token operator">-</span><span class="token keyword">static</span><span class="token comment" spellcheck="true">// 引入</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-static'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获取静态资源文件夹</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">'/assets'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>假设其中有一张图片叫做 <code>banner1.png</code>，那么我们打开浏览器，访问：<code>http://localhost:5050/images/banner1.png</code> 即可得到图片。这里注意：</p><blockquote><p>路径上不需要写assets，因为我们已经指定了访问资源时， <a href="http://localhost:5050/">http://localhost:5050</a> 自动指向 assets 文件夹。</p></blockquote><p>由此，我们知道数据库中图片的地址只需要填写 <code>/images/banner1.png</code> 即可。</p><h2 id="十、mysql录入数据"><a href="#十、mysql录入数据" class="headerlink" title="十、mysql录入数据"></a>十、mysql录入数据</h2><p>请参考当前目录下的《Chapter2-mysql2操作.md》。</p><h2 id="十一、POST请求"><a href="#十一、POST请求" class="headerlink" title="十一、POST请求"></a>十一、POST请求</h2><p>我们以登录举例讲post请求。</p><p>这里规定：前端发送 账号+密码 到后端，如果账号不存在于数据库，则注册账号。</p><p>如果账号存在于数据库中，则验证密码。</p><p>验证密码通过或注册账号成功，都返回token给前端。</p><h3 id="1、建表"><a href="#1、建表" class="headerlink" title="1、建表"></a>1、建表</h3><p>设定字段为account和pwd</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> users <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    account <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'账号'</span><span class="token punctuation">,</span>    pwd <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  token <span class="token keyword">LONGTEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'令牌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2、form表单页面"><a href="#2、form表单页面" class="headerlink" title="2、form表单页面"></a>2、form表单页面</h3><p>在 <code>assets</code> 下创建 <code>index.html</code> ：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>账号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入账号<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录/注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> <span class="token string">"/login/register"</span><span class="token punctuation">,</span>            method<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                account<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.account'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                pwd<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.pwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在浏览器直接访问 <code>http://localhost:5050/index.html</code> 即可进入表单页。</p><h3 id="3、安装中间件"><a href="#3、安装中间件" class="headerlink" title="3、安装中间件"></a>3、安装中间件</h3><p>安装 <code>koa-bodyparser</code> 与 <code>jsonwebtoken</code> 中间件:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// koa-bodyparser用于获取post请求数据</span>cnpm install koa<span class="token operator">-</span>bodyparser <span class="token operator">--</span>save<span class="token comment" spellcheck="true">// jsonwebtoken用于生成token</span>cnpm install jsonwebtoken <span class="token operator">--</span>save</code></pre><h4 id="JWT"><a href="#JWT" class="headerlink" title="* JWT"></a>* JWT</h4><p>在用户登录的路由中使用 jwt.sign 来生成token，一共定义三个参数，第一个是存入token的信息，第二个是token的钥匙，和config/passport.js的配置的钥匙相同，第三个是保存的时间，3600即一个小时，最后返回token，要在前面加Bearer:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> myaccount<span class="token punctuation">:</span> myaccount<span class="token punctuation">,</span> mypwd<span class="token punctuation">:</span> mypwd <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'secret'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> expiresIn<span class="token punctuation">:</span> <span class="token number">3600</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  token<span class="token punctuation">,</span>  msg<span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">}</span><span class="token function">resolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><h3 id="4、添加post接口"><a href="#4、添加post接口" class="headerlink" title="4、添加post接口"></a>4、添加post接口</h3><p>在 <code>router/login.js</code> 中加入：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span>login<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>login<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可以打印得到数据</span>    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"登录或注册"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="5、登录与自动注册"><a href="#5、登录与自动注册" class="headerlink" title="5、登录与自动注册"></a>5、登录与自动注册</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/db'</span><span class="token punctuation">)</span><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span>login<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"登录页面"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>login<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>login<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> myaccount <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>account<span class="token punctuation">;</span>    <span class="token keyword">let</span> mypwd <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>pwd<span class="token punctuation">;</span>    <span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`SELECT * FROM users WHERE account='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>myaccount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'`</span></span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 能找到对应的账号</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pwd <span class="token operator">==</span> mypwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 账号密码正确，返回token</span>            ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>                token<span class="token punctuation">:</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                msg<span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span>                account<span class="token punctuation">:</span> myaccount            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 密码错误</span>            ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span> <span class="token string">'密码错误'</span><span class="token punctuation">,</span>                account<span class="token punctuation">:</span> myaccount            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 找不到对应的账号，直接插入一个</span>        <span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 生成token</span>            <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> myaccount<span class="token punctuation">:</span> myaccount<span class="token punctuation">,</span> mypwd<span class="token punctuation">:</span> mypwd <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'secret'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> expiresIn<span class="token punctuation">:</span> <span class="token number">3600</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`INSERT INTO users (account, pwd, token) values ('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>myaccount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mypwd<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">')`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> datas<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 已插入数据，返回用户名与token</span>                <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>                    token<span class="token punctuation">,</span>                    msg<span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span>                    account<span class="token punctuation">:</span> myaccount                <span class="token punctuation">}</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> result1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> login<span class="token punctuation">;</span></code></pre><p>此时，前端做这个post请求后，就会得到相应的数据。</p><h2 id="十二、部署到服务器上"><a href="#十二、部署到服务器上" class="headerlink" title="十二、部署到服务器上"></a>十二、部署到服务器上</h2><p>部署需要先购买服务器，下载filezilla软件。</p><p>服务器上需要安装node 、mysql、pm2</p><p>具体教程请参考下面这篇文章</p><p><a href="https://blog.csdn.net/yh8899abc/article/details/105201742">https://blog.csdn.net/yh8899abc/article/details/105201742</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
