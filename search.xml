<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql基础</title>
      <link href="2021/04/28/mysql-ji-chu/"/>
      <url>2021/04/28/mysql-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>##本单元目标<br>    一、为什么要学习数据库<br>    二、数据库的相关概念<br>        DBMS、DB、SQL<br>    三、数据库存储数据的特点<br>    四、初始MySQL<br>        MySQL产品的介绍<br>        MySQL产品的安装          ★<br>        MySQL服务的启动和停止     ★<br>        MySQL服务的登录和退出     ★<br>        MySQL的常见命令和语法规范<br>    五、DQL语言的学习   ★<br>        基础查询        ★<br>        条件查询         ★<br>        排序查询         ★<br>        常见函数        ★<br>        分组函数        ★<br>        分组查询           ★<br>        连接查询         ★<br>        子查询       √<br>        分页查询       ★<br>        union联合查询    √            </p><pre><code>六、DML语言的学习    ★                 插入语句                            修改语句                            删除语句                        七、DDL语言的学习      库和表的管理     √                    常见数据类型介绍  √              常见约束        √            八、TCL语言的学习    事务和事务处理                 九、视图的讲解           √十、变量                      十一、存储过程和函数   十二、流程控制结构       </code></pre><p>##数据库的好处<br>    1.持久化数据到本地<br>    2.可以实现结构化查询，方便管理</p><p>##数据库相关概念<br>    1、DB：数据库，保存一组有组织的数据的容器<br>    2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据<br>    3、SQL:结构化查询语言，用于和DBMS通信的语言</p><p>##数据库存储数据的特点<br>    1、将数据放到表中，表再放到库中<br>    2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。<br>    3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。<br>    4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”<br>    5、表中的数据是按行存储的，每一行类似于java中的“对象”。</p><p>##MySQL产品的介绍和安装</p><p>###MySQL服务的启动和停止<br>    方式一：计算机——右击管理——服务<br>    方式二：通过管理员身份运行<br>    net start 服务名（启动服务）<br>    net stop 服务名（停止服务）</p><p>###MySQL服务的登录和退出<br>    方式一：通过mysql自带的客户端<br>    只限于root用户</p><pre><code>方式二：通过windows自带的客户端登录：mysql 【-h主机名 -P端口号 】-u用户名 -p密码退出：exit或ctrl+C</code></pre><p>###MySQL的常见命令 </p><pre><code>1.查看当前所有的数据库show databases;2.打开指定的库use 库名3.查看当前库的所有表show tables;4.查看其它库的所有表show tables from 库名;5.创建表create table 表名(    列名 列类型,    列名 列类型，    。。。);6.查看表结构desc 表名;7.查看服务器的版本方式一：登录到mysql服务端select version();方式二：没有登录到mysql服务端mysql --version或mysql --V</code></pre><p>###MySQL的语法规范<br>    1.不区分大小写,但建议关键字大写，表名、列名小写<br>    2.每条命令最好用分号结尾<br>    3.每条命令根据需要，可以进行缩进 或换行<br>    4.注释<br>        单行注释：#注释文字<br>        单行注释：– 注释文字<br>        多行注释：/* 注释文字  */</p><p>###SQL的语言分类<br>    DQL（Data Query Language）：数据查询语言<br>        select<br>    DML(Data Manipulate Language):数据操作语言<br>        insert 、update、delete<br>    DDL（Data Define Languge）：数据定义语言<br>        create、drop、alter<br>    TCL（Transaction Control Language）：事务控制语言<br>        commit、rollback</p><p>###SQL的常见命令</p><pre><code>show databases； 查看所有的数据库use 库名； 打开指定 的库show tables ; 显示库中的所有表show tables from 库名;显示指定库中的所有表create table 表名(    字段名 字段类型,        字段名 字段类型); 创建表desc 表名; 查看指定表的结构select * from 表名;显示表中的所有数据</code></pre><p>##DQL语言的学习<br>###进阶1：基础查询<br>    语法：<br>    SELECT 要查询的东西<br>    【FROM 表名】;</p><pre><code>类似于Java中 :System.out.println(要打印的东西);特点：①通过select查询完的结果 ，是一个虚拟的表格，不是真实存在② 要查询的东西 可以是常量值、可以是表达式、可以是字段、可以是函数</code></pre><p>###进阶2：条件查询<br>    条件查询：根据条件过滤原始表的数据，查询到想要的数据<br>    语法：<br>    select<br>        要查询的字段|表达式|常量值|函数<br>    from<br>        表<br>    where<br>        条件 ;</p><pre><code>分类：一、条件表达式    示例：salary&gt;10000    条件运算符：    &gt; &lt; &gt;= &lt;= = != &lt;&gt;二、逻辑表达式示例：salary&gt;10000 &amp;&amp; salary&lt;20000逻辑运算符：    and（&amp;&amp;）:两个条件如果同时成立，结果为true，否则为false    or(||)：两个条件只要有一个成立，结果为true，否则为false    not(!)：如果条件成立，则not后为false，否则为true三、模糊查询示例：last_name like 'a%'</code></pre><p>###进阶3：排序查询    </p><pre><code>语法：select    要查询的东西from    表where     条件order by 排序的字段|表达式|函数|别名 【asc|desc】</code></pre><p>###进阶4：常见函数<br>    一、单行函数<br>    1、字符函数<br>        concat拼接<br>        substr截取子串<br>        upper转换成大写<br>        lower转换成小写<br>        trim去前后指定的空格和字符<br>        ltrim去左边空格<br>        rtrim去右边空格<br>        replace替换<br>        lpad左填充<br>        rpad右填充<br>        instr返回子串第一次出现的索引<br>        length 获取字节个数</p><pre><code>2、数学函数    round 四舍五入    rand 随机数    floor向下取整    ceil向上取整    mod取余    truncate截断3、日期函数    now当前系统日期+时间    curdate当前系统日期    curtime当前系统时间    str_to_date 将字符转换成日期    date_format将日期转换成字符4、流程控制函数    if 处理双分支    case语句 处理多分支        情况1：处理等值判断        情况2：处理条件判断    5、其他函数    version版本    database当前库    user当前连接用户</code></pre><p>二、分组函数</p><pre><code>    sum 求和    max 最大值    min 最小值    avg 平均值    count 计数    特点：    1、以上五个分组函数都忽略null值，除了count(*)    2、sum和avg一般用于处理数值型        max、min、count可以处理任何数据类型    3、都可以搭配distinct使用，用于统计去重后的结果    4、count的参数可以支持：        字段、*、常量值，一般放1       建议使用 count(*)</code></pre><p>##进阶5：分组查询<br>    语法：<br>    select 查询的字段，分组函数<br>    from 表<br>    group by 分组的字段</p><pre><code>特点：1、可以按单个字段分组2、和分组函数一同查询的字段最好是分组后的字段3、分组筛选        针对的表    位置            关键字分组前筛选：    原始表        group by的前面        where分组后筛选：    分组后的结果集    group by的后面        having4、可以按多个字段分组，字段之间用逗号隔开5、可以支持排序6、having后可以支持别名</code></pre><p>##进阶6：多表连接查询</p><pre><code>笛卡尔乘积：如果连接条件省略或无效则会出现解决办法：添加上连接条件</code></pre><p>一、传统模式下的连接 ：等值连接——非等值连接</p><pre><code>1.等值连接的结果 = 多个表的交集2.n表连接，至少需要n-1个连接条件3.多个表不分主次，没有顺序要求4.一般为表起别名，提高阅读性和性能</code></pre><p>二、sql99语法：通过join关键字实现连接</p><pre><code>含义：1999年推出的sql语法支持：等值连接、非等值连接 （内连接）外连接交叉连接语法：select 字段，...from 表1【inner|left outer|right outer|cross】join 表2 on  连接条件【inner|left outer|right outer|cross】join 表3 on  连接条件【where 筛选条件】【group by 分组字段】【having 分组后的筛选条件】【order by 排序的字段或表达式】好处：语句上，连接条件和筛选条件实现了分离，简洁明了！</code></pre><p>三、自连接</p><p>案例：查询员工名和直接上级的名称</p><p>sql99</p><pre><code>SELECT e.last_name,m.last_nameFROM employees eJOIN employees m ON e.`manager_id`=m.`employee_id`;</code></pre><p>sql92</p><pre><code>SELECT e.last_name,m.last_nameFROM employees e,employees m WHERE e.`manager_id`=m.`employee_id`;</code></pre><p>##进阶7：子查询</p><p>含义：</p><pre><code>一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询在外面的查询语句，称为主查询或外查询</code></pre><p>特点：</p><pre><code>1、子查询都放在小括号内2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧3、子查询优先于主查询执行，主查询使用了子查询的执行结果4、子查询根据查询结果的行数不同分为以下两类：① 单行子查询    结果集只有一行    一般搭配单行操作符使用：&gt; &lt; = &lt;&gt; &gt;= &lt;=     非法使用子查询的情况：    a、子查询的结果为一组值    b、子查询的结果为空    ② 多行子查询    结果集有多行    一般搭配多行操作符使用：any、all、in、not in    in： 属于子查询结果中的任意一个就行    any和all往往可以用其他查询代替</code></pre><p>##进阶8：分页查询</p><p>应用场景：</p><pre><code>实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句</code></pre><p>语法：</p><pre><code>select 字段|表达式,...from 表【where 条件】【group by 分组字段】【having 条件】【order by 排序的字段】limit 【起始的条目索引，】条目数;</code></pre><p>特点：</p><pre><code>1.起始条目索引从0开始2.limit子句放在查询语句的最后3.公式：select * from  表 limit （page-1）*sizePerPage,sizePerPage假如:每页显示条目数sizePerPage要显示的页数 page</code></pre><p>##进阶9：联合查询</p><p>引入：<br>    union 联合、合并</p><p>语法：</p><pre><code>select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union  【all】.....select 字段|常量|表达式|函数 【from 表】 【where 条件】</code></pre><p>特点：</p><pre><code>1、多条查询语句的查询的列数必须是一致的2、多条查询语句的查询的列的类型几乎相同3、union代表去重，union all代表不去重</code></pre><p>##DML语言</p><p>###插入</p><p>语法：<br>    insert into 表名(字段名，…)<br>    values(值1，…);</p><p>特点：</p><pre><code>1、字段类型和值类型一致或兼容，而且一一对应2、可以为空的字段，可以不用插入值，或用null填充3、不可以为空的字段，必须插入值4、字段个数和值的个数必须一致5、字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致</code></pre><p>###修改</p><p>修改单表语法：</p><pre><code>update 表名 set 字段=新值,字段=新值【where 条件】</code></pre><p>修改多表语法：</p><pre><code>update 表1 别名1,表2 别名2set 字段=新值，字段=新值where 连接条件and 筛选条件</code></pre><p>###删除</p><p>方式1：delete语句 </p><p>单表的删除： ★<br>    delete from 表名 【where 筛选条件】</p><p>多表的删除：<br>    delete 别名1，别名2<br>    from 表1 别名1，表2 别名2<br>    where 连接条件<br>    and 筛选条件;</p><p>方式2：truncate语句</p><pre><code>truncate table 表名</code></pre><p>两种方式的区别【面试题】</p><pre><code>#1.truncate不能加where条件，而delete可以加where条件#2.truncate的效率高一丢丢#3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始#delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始#4.truncate删除不能回滚，delete删除可以回滚</code></pre><p>##DDL语句<br>###库和表的管理<br>库的管理：</p><pre><code>一、创建库create database 库名二、删除库drop database 库名</code></pre><p>表的管理：<br>    #1.创建表</p><pre><code>CREATE TABLE IF NOT EXISTS stuinfo(    stuId INT,    stuName VARCHAR(20),    gender CHAR,    bornDate DATETIME    );DESC studentinfo;#2.修改表 alter语法：ALTER TABLE 表名 ADD|MODIFY|DROP|CHANGE COLUMN 字段名 【字段类型】;#①修改字段名ALTER TABLE studentinfo CHANGE  COLUMN sex gender CHAR;#②修改表名ALTER TABLE stuinfo RENAME [TO]  studentinfo;#③修改字段类型和列级约束ALTER TABLE studentinfo MODIFY COLUMN borndate DATE ;#④添加字段ALTER TABLE studentinfo ADD COLUMN email VARCHAR(20) first;#⑤删除字段ALTER TABLE studentinfo DROP COLUMN email;#3.删除表DROP TABLE [IF EXISTS] studentinfo;</code></pre><p>###常见类型</p><pre><code>整型：    小数：    浮点型    定点型字符型：日期型：Blob类型：</code></pre><p>###常见约束</p><pre><code>NOT NULLDEFAULTUNIQUECHECKPRIMARY KEYFOREIGN KEY</code></pre><p>##数据库事务<br>###含义<br>    通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态</p><p>###特点<br>    （ACID）<br>    原子性：要么都执行，要么都回滚<br>    一致性：保证数据的状态操作前和操作后保持一致<br>    隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰<br>    持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</p><p>相关步骤：</p><pre><code>1、开启事务2、编写事务的一组逻辑操作单元（多条sql语句）3、提交事务或回滚事务</code></pre><p>###事务的分类：</p><p>隐式事务，没有明显的开启和结束事务的标志</p><pre><code>比如insert、update、delete语句本身就是一个事务</code></pre><p>显式事务，具有明显的开启和结束事务的标志</p><pre><code>    1、开启事务    取消自动提交事务的功能        2、编写事务的一组逻辑操作单元（多条sql语句）    insert    update    delete        3、提交事务或回滚事务</code></pre><p>###使用到的关键字</p><pre><code>set autocommit=0;start transaction;commit;rollback;savepoint  断点commit to 断点rollback to 断点</code></pre><p>###事务的隔离级别:</p><p>事务并发问题如何发生？</p><pre><code>当多个事务同时操作同一个数据库的相同数据时</code></pre><p>事务的并发问题有哪些？</p><pre><code>脏读：一个事务读取到了另外一个事务未提交的数据不可重复读：同一个事务中，多次读取到的数据不一致幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</code></pre><p>如何避免事务的并发问题？</p><pre><code>通过设置事务的隔离级别1、READ UNCOMMITTED2、READ COMMITTED 可以避免脏读3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读4、SERIALIZABLE可以避免脏读、不可重复读和幻读</code></pre><p>设置隔离级别：</p><pre><code>set session|global  transaction isolation level 隔离级别名;</code></pre><p>查看隔离级别：</p><pre><code>select @@tx_isolation;</code></pre><p>##视图<br>含义：理解成一张虚拟的表</p><p>视图和表的区别：</p><pre><code>    使用方式    占用物理空间视图    完全相同    不占用，仅仅保存的是sql逻辑表    完全相同    占用</code></pre><p>视图的好处：</p><pre><code>1、sql语句提高重用性，效率高2、和表实现了分离，提高了安全性</code></pre><p>###视图的创建<br>    语法：<br>    CREATE VIEW  视图名<br>    AS<br>    查询语句;<br>###视图的增删改查<br>    1、查看视图的数据 ★</p><pre><code>SELECT * FROM my_v4;SELECT * FROM my_v1 WHERE last_name='Partners';2、插入视图的数据INSERT INTO my_v4(last_name,department_id) VALUES('虚竹',90);3、修改视图的数据UPDATE my_v4 SET last_name ='梦姑' WHERE last_name='虚竹';4、删除视图的数据DELETE FROM my_v4;</code></pre><p>###某些视图不能更新<br>    包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union all<br>    常量视图<br>    Select中包含子查询<br>    join<br>    from一个不能更新的视图<br>    where子句的子查询引用了from子句中的表<br>###视图逻辑的更新<br>    #方式一：<br>    CREATE OR REPLACE VIEW test_v7<br>    AS<br>    SELECT last_name FROM employees<br>    WHERE employee_id&gt;100;</p><pre><code>#方式二:ALTER VIEW test_v7ASSELECT employee_id FROM employees;SELECT * FROM test_v7;</code></pre><p>###视图的删除<br>    DROP VIEW test_v1,test_v2,test_v3;<br>###视图结构的查看<br>    DESC test_v7;<br>    SHOW CREATE VIEW test_v7;</p><p>##存储过程</p><p>含义：一组经过预先编译的sql语句的集合<br>好处：</p><pre><code>1、提高了sql语句的重用性，减少了开发程序员的压力2、提高了效率3、减少了传输次数</code></pre><p>分类：</p><pre><code>1、无返回无参2、仅仅带in类型，无返回有参3、仅仅带out类型，有返回无参4、既带in又带out，有返回有参5、带inout，有返回有参注意：in、out、inout都可以在一个存储过程中带多个</code></pre><p>###创建存储过程<br>语法：</p><pre><code>create procedure 存储过程名(in|out|inout 参数名  参数类型,...)begin    存储过程体end</code></pre><p>类似于方法：</p><pre><code>修饰符 返回类型 方法名(参数类型 参数名,...){    方法体;}</code></pre><p>注意</p><pre><code>1、需要设置新的结束标记delimiter 新的结束标记示例：delimiter $CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)BEGIN    sql语句1;    sql语句2;END $2、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略begin end3、参数前面的符号的意思in:该参数只能作为输入 （该参数不能做返回值）out：该参数只能作为输出（该参数只能做返回值）inout：既能做输入又能做输出</code></pre><p>#调用存储过程<br>    call 存储过程名(实参列表)<br>##函数</p><p>###创建函数</p><p>学过的函数：LENGTH、SUBSTR、CONCAT等<br>语法：</p><pre><code>CREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型BEGIN    函数体END</code></pre><p>###调用函数<br>    SELECT 函数名（实参列表）</p><p>###函数和存储过程的区别</p><pre><code>        关键字        调用语法    返回值            应用场景函数        FUNCTION    SELECT 函数()    只能是一个        一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个存储过程    PROCEDURE    CALL 存储过程()    可以有0个或多个        一般用于更新</code></pre><p>##流程控制结构</p><p>###系统变量<br>一、全局变量</p><p>作用域：针对于所有会话（连接）有效，但不能跨重启</p><pre><code>查看所有全局变量SHOW GLOBAL VARIABLES;查看满足条件的部分系统变量SHOW GLOBAL VARIABLES LIKE '%char%';查看指定的系统变量的值SELECT @@global.autocommit;为某个系统变量赋值SET @@global.autocommit=0;SET GLOBAL autocommit=0;</code></pre><p>二、会话变量</p><p>作用域：针对于当前会话（连接）有效</p><pre><code>查看所有会话变量SHOW SESSION VARIABLES;查看满足条件的部分会话变量SHOW SESSION VARIABLES LIKE '%char%';查看指定的会话变量的值SELECT @@autocommit;SELECT @@session.tx_isolation;为某个会话变量赋值SET @@session.tx_isolation='read-uncommitted';SET SESSION tx_isolation='read-committed';</code></pre><p>###自定义变量<br>一、用户变量</p><p>声明并初始化：</p><pre><code>SET @变量名=值;SET @变量名:=值;SELECT @变量名:=值;</code></pre><p>赋值：</p><pre><code>方式一：一般用于赋简单的值SET 变量名=值;SET 变量名:=值;SELECT 变量名:=值;方式二：一般用于赋表 中的字段值SELECT 字段名或表达式 INTO 变量FROM 表;</code></pre><p>使用：</p><pre><code>select @变量名;</code></pre><p>二、局部变量</p><p>声明：</p><pre><code>declare 变量名 类型 【default 值】;</code></pre><p>赋值：</p><pre><code>方式一：一般用于赋简单的值SET 变量名=值;SET 变量名:=值;SELECT 变量名:=值;方式二：一般用于赋表 中的字段值SELECT 字段名或表达式 INTO 变量FROM 表;</code></pre><p>使用：</p><pre><code>select 变量名</code></pre><p>二者的区别：</p><pre><code>        作用域            定义位置        语法</code></pre><p>用户变量    当前会话        会话的任何地方        加@符号，不用指定类型<br>局部变量    定义它的BEGIN END中     BEGIN END的第一句话    一般不用加@,需要指定类型</p><p>###分支<br>一、if函数<br>    语法：if(条件，值1，值2)<br>    特点：可以用在任何位置</p><p>二、case语句</p><p>语法：</p><pre><code>情况一：类似于switchcase 表达式when 值1 then 结果1或语句1(如果是语句，需要加分号) when 值2 then 结果2或语句2(如果是语句，需要加分号)...else 结果n或语句n(如果是语句，需要加分号)end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）情况二：类似于多重ifcase when 条件1 then 结果1或语句1(如果是语句，需要加分号) when 条件2 then 结果2或语句2(如果是语句，需要加分号)...else 结果n或语句n(如果是语句，需要加分号)end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）</code></pre><p>特点：<br>    可以用在任何位置</p><p>三、if elseif语句</p><p>语法：</p><pre><code>if 情况1 then 语句1;elseif 情况2 then 语句2;...else 语句n;end if;</code></pre><p>特点：<br>    只能用在begin end中！！！！！！！！！！！！！！！</p><p>三者比较：<br>            应用场合<br>    if函数        简单双分支<br>    case结构    等值判断 的多分支<br>    if结构        区间判断 的多分支</p><p>###循环</p><p>语法：</p><pre><code>【标签：】WHILE 循环条件  DO    循环体END WHILE 【标签】;</code></pre><p>特点：</p><pre><code>只能放在BEGIN END里面如果要搭配leave跳转语句，需要使用标签，否则可以不用标签leave类似于java中的break语句，跳出所在循环！！！</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot整合Redis手机验证码储存</title>
      <link href="2021/04/09/springboot-zheng-he-redis-zuo-shou-ji-yan-zheng-ma-cun-chu/"/>
      <url>2021/04/09/springboot-zheng-he-redis-zuo-shou-ji-yan-zheng-ma-cun-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="Springboot整合Redis手机验证码储存"><a href="#Springboot整合Redis手机验证码储存" class="headerlink" title="Springboot整合Redis手机验证码储存"></a>Springboot整合Redis手机验证码储存</h2><h4 id="使用原始方式实现查询"><a href="#使用原始方式实现查询" class="headerlink" title="使用原始方式实现查询"></a>使用原始方式实现查询</h4><p><strong>application.yml</strong></p><pre class=" language-yml"><code class="language-yml">spring:  datasource:    url: jdbc:mysql:///springbootdata?serverTimezone=UTC&useUnicode=true&useSSL=true&characterEncoding=utf8    username: root    password: 1234  jpa:    show-sql: true</code></pre><p><strong>maven依赖</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>实体类comment</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_comment"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 映射的数据库表名</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 主键自增</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"a_id"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 对应的数据库列名</span>    <span class="token keyword">private</span> Integer aId<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>mapper层</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommentRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>Comment<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 根据id修改评论作者</span>    <span class="token annotation punctuation">@Transactional</span> <span class="token comment" spellcheck="true">// 更新的操作需要做事务控制</span>    <span class="token annotation punctuation">@Modifying</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"update t_comment c set c.author=?1 where c.id=?2"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">updateComment</span><span class="token punctuation">(</span>String author<span class="token punctuation">,</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>service层</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CommentRepository commentRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> Comment <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        Optional<span class="token operator">&lt;</span>Comment<span class="token operator">></span> optional <span class="token operator">=</span> commentRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Comment <span class="token function">updateComment</span><span class="token punctuation">(</span>Comment comment<span class="token punctuation">)</span><span class="token punctuation">{</span>        commentRepository<span class="token punctuation">.</span><span class="token function">updateComment</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>comment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteComment</span><span class="token punctuation">(</span><span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        commentRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>控制层</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CommentService commentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Comment <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        Comment comment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Comment <span class="token function">updateComment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token keyword">int</span> comment_id<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span> String author<span class="token punctuation">)</span><span class="token punctuation">{</span>        Comment comment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        comment<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>        Comment updateComment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">updateComment</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> updateComment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteComment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        commentService<span class="token punctuation">.</span><span class="token function">deleteComment</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="基于注解实现缓存"><a href="#基于注解实现缓存" class="headerlink" title="基于注解实现缓存"></a>基于注解实现缓存</h4><p>在主启动类上添加注解：@EnableCaching</p><p>该注解配置在类上，通常都是在主启动类上</p><p>在需要加缓存的方法上加一个注解：@Cacheable</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通常用过缓存数据</span><span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#result.id"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 用作更新数据</span><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 用作删除缓存数据</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CommentRepository commentRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">,</span> unless <span class="token operator">=</span> <span class="token string">"#result==null"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Comment <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> comment_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Optional<span class="token operator">&lt;</span>Comment<span class="token operator">></span> optional <span class="token operator">=</span> commentRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#result.id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Comment <span class="token function">updateComment</span><span class="token punctuation">(</span>Comment comment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        commentRepository<span class="token punctuation">.</span><span class="token function">updateComment</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteComment</span><span class="token punctuation">(</span><span class="token keyword">int</span> comment_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        commentRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CommentService commentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Comment <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        Comment comment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/update/{id}/{author}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Comment <span class="token function">updateComment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token keyword">int</span> comment_id<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span> String author<span class="token punctuation">)</span><span class="token punctuation">{</span>        Comment comment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        comment<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>        Comment updateComment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">updateComment</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> updateComment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteComment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        commentService<span class="token punctuation">.</span><span class="token function">deleteComment</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="基于API实现缓存"><a href="#基于API实现缓存" class="headerlink" title="基于API实现缓存"></a>基于API实现缓存</h4><p><strong>使用RedisTemplate</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiCommentService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CommentRepository commentRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> Comment <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先从缓存中拿数据</span>        Object object <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"comment_"</span> <span class="token operator">+</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>object<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Comment<span class="token punctuation">)</span>object<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果缓存中没有，就到数据库中查数据然后放缓存里面</span>            Optional<span class="token operator">&lt;</span>Comment<span class="token operator">></span> optional <span class="token operator">=</span> commentRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Comment comment <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将查询结果放缓存中，时间为1天</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"comment_"</span><span class="token operator">+</span>comment_id<span class="token punctuation">,</span>comment<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> comment<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Comment <span class="token function">updateComment</span><span class="token punctuation">(</span>Comment comment<span class="token punctuation">)</span><span class="token punctuation">{</span>        commentRepository<span class="token punctuation">.</span><span class="token function">updateComment</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>comment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 更新数据后，将缓存数据也更新</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"comment_"</span><span class="token operator">+</span>comment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteComment</span><span class="token punctuation">(</span><span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        commentRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除后，将缓存也删除</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"comment_"</span><span class="token operator">+</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiCommentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ApiCommentService commentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Comment <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        Comment comment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/update/{id}/{author}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Comment <span class="token function">updateComment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token keyword">int</span> comment_id<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span> String author<span class="token punctuation">)</span><span class="token punctuation">{</span>        Comment comment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        comment<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>        Comment updateComment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">updateComment</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> updateComment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteComment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        commentService<span class="token punctuation">.</span><span class="token function">deleteComment</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="基于API自定义序列化缓存"><a href="#基于API自定义序列化缓存" class="headerlink" title="基于API自定义序列化缓存"></a>基于API自定义序列化缓存</h4><p>上面的缓存机制是jdk，给我们的阅读造成了很大的困扰。我们可以考虑考虑使用自定义的缓存机制；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAutoConfiguration</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span>RedisConnectionFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>      RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> template<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们可以参照这种写法来自定义一个序列化机制</p><p><strong>RedisConfig.java</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用json格式序列化对象，对缓存数据key和value进行转换</span>        Jackson2JsonRedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解决查询缓存转换异常的问题</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        serializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置RedisTemplate模板API的序列化方式为json</span>        template<span class="token punctuation">.</span><span class="token function">setDefaultSerializer</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="基于注解自定义序列化缓存"><a href="#基于注解自定义序列化缓存" class="headerlink" title="基于注解自定义序列化缓存"></a>基于注解自定义序列化缓存</h4>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot整合Redis实现缓存</title>
      <link href="2021/04/09/springboot-zheng-he-redis/"/>
      <url>2021/04/09/springboot-zheng-he-redis/</url>
      
        <content type="html"><![CDATA[<h2 id="Springboot整合Redis实现缓存"><a href="#Springboot整合Redis实现缓存" class="headerlink" title="Springboot整合Redis实现缓存"></a>Springboot整合Redis实现缓存</h2><h4 id="使用原始方式实现查询"><a href="#使用原始方式实现查询" class="headerlink" title="使用原始方式实现查询"></a>使用原始方式实现查询</h4><p><strong>application.yml</strong></p><pre class=" language-yml"><code class="language-yml">spring:  datasource:    url: jdbc:mysql:///springbootdata?serverTimezone=UTC&useUnicode=true&useSSL=true&characterEncoding=utf8    username: root    password: 1234  jpa:    show-sql: true</code></pre><p><strong>maven依赖</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>实体类comment</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_comment"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 映射的数据库表名</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Comment</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 主键自增</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"a_id"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 对应的数据库列名</span>    <span class="token keyword">private</span> Integer aId<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>mapper层</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommentRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>Comment<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 根据id修改评论作者</span>    <span class="token annotation punctuation">@Transactional</span> <span class="token comment" spellcheck="true">// 更新的操作需要做事务控制</span>    <span class="token annotation punctuation">@Modifying</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"update t_comment c set c.author=?1 where c.id=?2"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">updateComment</span><span class="token punctuation">(</span>String author<span class="token punctuation">,</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>service层</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CommentRepository commentRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> Comment <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        Optional<span class="token operator">&lt;</span>Comment<span class="token operator">></span> optional <span class="token operator">=</span> commentRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Comment <span class="token function">updateComment</span><span class="token punctuation">(</span>Comment comment<span class="token punctuation">)</span><span class="token punctuation">{</span>        commentRepository<span class="token punctuation">.</span><span class="token function">updateComment</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>comment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteComment</span><span class="token punctuation">(</span><span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        commentRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>控制层</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CommentService commentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Comment <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        Comment comment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Comment <span class="token function">updateComment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token keyword">int</span> comment_id<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span> String author<span class="token punctuation">)</span><span class="token punctuation">{</span>        Comment comment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        comment<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>        Comment updateComment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">updateComment</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> updateComment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteComment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        commentService<span class="token punctuation">.</span><span class="token function">deleteComment</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="基于注解实现缓存"><a href="#基于注解实现缓存" class="headerlink" title="基于注解实现缓存"></a>基于注解实现缓存</h4><p>在主启动类上添加注解：@EnableCaching</p><p>该注解配置在类上，通常都是在主启动类上</p><p>在需要加缓存的方法上加一个注解：@Cacheable</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通常用过缓存数据</span><span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#result.id"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 用作更新数据</span><span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 用作删除缓存数据</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CommentRepository commentRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">,</span> unless <span class="token operator">=</span> <span class="token string">"#result==null"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Comment <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> comment_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Optional<span class="token operator">&lt;</span>Comment<span class="token operator">></span> optional <span class="token operator">=</span> commentRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#result.id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Comment <span class="token function">updateComment</span><span class="token punctuation">(</span>Comment comment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        commentRepository<span class="token punctuation">.</span><span class="token function">updateComment</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>cacheNames <span class="token operator">=</span> <span class="token string">"comment"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteComment</span><span class="token punctuation">(</span><span class="token keyword">int</span> comment_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        commentRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CommentService commentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Comment <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        Comment comment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/update/{id}/{author}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Comment <span class="token function">updateComment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token keyword">int</span> comment_id<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span> String author<span class="token punctuation">)</span><span class="token punctuation">{</span>        Comment comment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        comment<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>        Comment updateComment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">updateComment</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> updateComment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteComment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        commentService<span class="token punctuation">.</span><span class="token function">deleteComment</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="基于API实现缓存"><a href="#基于API实现缓存" class="headerlink" title="基于API实现缓存"></a>基于API实现缓存</h4><p><strong>使用RedisTemplate</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiCommentService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CommentRepository commentRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> Comment <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先从缓存中拿数据</span>        Object object <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"comment_"</span> <span class="token operator">+</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>object<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Comment<span class="token punctuation">)</span>object<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果缓存中没有，就到数据库中查数据然后放缓存里面</span>            Optional<span class="token operator">&lt;</span>Comment<span class="token operator">></span> optional <span class="token operator">=</span> commentRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Comment comment <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将查询结果放缓存中，时间为1天</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"comment_"</span><span class="token operator">+</span>comment_id<span class="token punctuation">,</span>comment<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> comment<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Comment <span class="token function">updateComment</span><span class="token punctuation">(</span>Comment comment<span class="token punctuation">)</span><span class="token punctuation">{</span>        commentRepository<span class="token punctuation">.</span><span class="token function">updateComment</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>comment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 更新数据后，将缓存数据也更新</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"comment_"</span><span class="token operator">+</span>comment<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteComment</span><span class="token punctuation">(</span><span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        commentRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除后，将缓存也删除</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"comment_"</span><span class="token operator">+</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiCommentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ApiCommentService commentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/get/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Comment <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        Comment comment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> comment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/update/{id}/{author}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Comment <span class="token function">updateComment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token keyword">int</span> comment_id<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span> String author<span class="token punctuation">)</span><span class="token punctuation">{</span>        Comment comment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>        comment<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>        Comment updateComment <span class="token operator">=</span> commentService<span class="token punctuation">.</span><span class="token function">updateComment</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> updateComment<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteComment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> comment_id<span class="token punctuation">)</span><span class="token punctuation">{</span>        commentService<span class="token punctuation">.</span><span class="token function">deleteComment</span><span class="token punctuation">(</span>comment_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="基于API自定义序列化缓存"><a href="#基于API自定义序列化缓存" class="headerlink" title="基于API自定义序列化缓存"></a>基于API自定义序列化缓存</h4><p>上面的缓存机制是jdk，给我们的阅读造成了很大的困扰。我们可以考虑考虑使用自定义的缓存机制；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAutoConfiguration</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span>RedisConnectionFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>      RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> template<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们可以参照这种写法来自定义一个序列化机制</p><p><strong>RedisConfig.java</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用json格式序列化对象，对缓存数据key和value进行转换</span>        Jackson2JsonRedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解决查询缓存转换异常的问题</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        serializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置RedisTemplate模板API的序列化方式为json</span>        template<span class="token punctuation">.</span><span class="token function">setDefaultSerializer</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="使用redis做中间件为缓存查询验证码"><a href="#使用redis做中间件为缓存查询验证码" class="headerlink" title="使用redis做中间件为缓存查询验证码"></a>使用redis做中间件为缓存查询验证码</h4><p>首先我们还是需要先定义好阿里云短信工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>DefaultAcsClient<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>IAcsClient<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>dysmsapi<span class="token punctuation">.</span>model<span class="token punctuation">.</span>v20170525<span class="token punctuation">.</span>SendSmsRequest<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>dysmsapi<span class="token punctuation">.</span>model<span class="token punctuation">.</span>v20170525<span class="token punctuation">.</span>SendSmsResponse<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ClientException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>profile<span class="token punctuation">.</span>DefaultProfile<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>profile<span class="token punctuation">.</span>IClientProfile<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliyunSmsUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 产品名称:云通信短信API产品     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PRODUCT <span class="token operator">=</span> <span class="token string">"Dysmsapi"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 产品域名     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DOMAIN <span class="token operator">=</span> <span class="token string">"dysmsapi.aliyuncs.com"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * todo 开发者自己的AK(在阿里云访问控制台寻找)     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ACCESS_KEY_ID <span class="token operator">=</span> <span class="token string">"LTAI4GCJ4nhyB3sCQj7ftJ9P"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * todo accessKeySecret(在阿里云访问控制台寻找)     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ACCESS_KEY_SECRET <span class="token operator">=</span> <span class="token string">"og4lIDixHgVlEYYXuHC9duhhZr0QT2"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * todo 必填:短信签名     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SIGN_NAME <span class="token operator">=</span> <span class="token string">"ABC商城"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * todo 必填:REGION_ID     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String REGION_ID <span class="token operator">=</span> <span class="token string">"cn-hangzhou"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发送方法     *     * @param phone         电话号码     * @param templateCode  模板编号     * @param templateParam 模板中的参数     * @return 返回值     * @throws ClientException 异常     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SendSmsResponse <span class="token function">sendSms</span><span class="token punctuation">(</span>String phone<span class="token punctuation">,</span> String templateCode<span class="token punctuation">,</span> String templateParam<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClientException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//可自助调整超时时间</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"sun.net.client.defaultConnectTimeout"</span><span class="token punctuation">,</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"sun.net.client.defaultReadTimeout"</span><span class="token punctuation">,</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化acsClient,暂不支持region化</span>        IClientProfile profile <span class="token operator">=</span> DefaultProfile<span class="token punctuation">.</span><span class="token function">getProfile</span><span class="token punctuation">(</span>REGION_ID<span class="token punctuation">,</span> ACCESS_KEY_ID<span class="token punctuation">,</span> ACCESS_KEY_SECRET<span class="token punctuation">)</span><span class="token punctuation">;</span>        DefaultProfile<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span>REGION_ID<span class="token punctuation">,</span> REGION_ID<span class="token punctuation">,</span> PRODUCT<span class="token punctuation">,</span> DOMAIN<span class="token punctuation">)</span><span class="token punctuation">;</span>        IAcsClient acsClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAcsClient</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">;</span>        SendSmsRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendSmsRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setPhoneNumbers</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setSignName</span><span class="token punctuation">(</span>SIGN_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 短信签名</span>        request<span class="token punctuation">.</span><span class="token function">setTemplateCode</span><span class="token punctuation">(</span>templateCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setTemplateParam</span><span class="token punctuation">(</span>templateParam<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者</span>        request<span class="token punctuation">.</span><span class="token function">setOutId</span><span class="token punctuation">(</span><span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//hint 此处可能会抛出异常，注意catch</span>        SendSmsResponse sendSmsResponse <span class="token operator">=</span> acsClient<span class="token punctuation">.</span><span class="token function">getAcsResponse</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sendSmsResponse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 生成六位随机数     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">createRandomVcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//验证码</span>        StringBuilder vcode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            vcode<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> vcode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 调用发送短信的接口,返回去一个map，用来取参数     * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">start</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClientException <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> codeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String code <span class="token operator">=</span> <span class="token function">createRandomVcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 随机生成6位数，添加在map参数中</span>        codeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>        String templateParam <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>codeMap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转json之后清空，方便多次使用</span>        String templateCode <span class="token operator">=</span> <span class="token string">"SMS_205138182"</span><span class="token punctuation">;</span>        SendSmsResponse response <span class="token operator">=</span> <span class="token function">sendSms</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span> templateCode<span class="token punctuation">,</span> templateParam<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> codeMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>封装好了验证码之后，调用start方法，传入手机号，将获取到的验证码存在HashMap中使用，通过map.get(“code”)取出验证码数字。</p><p>加入springboot-redis的maven</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>在yml中加入redis连接属性</p><pre class=" language-yml"><code class="language-yml">spring:  redis:    port: 6379    host: localhost    password: </code></pre><p>修改掉redisTemplate的默认序列化方式，开启redis缓存</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableCaching</span> <span class="token comment" spellcheck="true">// 开启缓存</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    * 实现自定义序列化方式    * */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span><span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>RedisSerializer<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>RedisSerializer<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>RedisSerializer<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>RedisSerializer<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试缓存</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">JqueryApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String phone <span class="token operator">=</span> <span class="token string">"17628263062"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClientException <span class="token punctuation">{</span>        String code <span class="token operator">=</span> AliyunSmsUtil<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将短信存在redis缓存中，有效时间为1分钟</span>        <span class="token comment" spellcheck="true">/*         * 在登录时只需要将redis中存入的短信取出来就行         * */</span>        String tell <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tell<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Springboot%E6%95%B4%E5%90%88Redis.assets/image-20201123115027449.png" alt="image-20201123115027449"></p>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成layui数据表格</title>
      <link href="2021/04/09/springboot-ji-cheng-layui-shu-ju-biao-ge/"/>
      <url>2021/04/09/springboot-ji-cheng-layui-shu-ju-biao-ge/</url>
      
        <content type="html"><![CDATA[<h2 id="Springboot集成layui数据表格"><a href="#Springboot集成layui数据表格" class="headerlink" title="Springboot集成layui数据表格"></a>Springboot集成layui数据表格</h2><p>需要的文件</p><p>layui官网下载最新版</p><p>在数据统计时需要解决跨域问题，可百度</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CorsFilter <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CorsConfiguration corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        urlBasedCorsConfigurationSource<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> corsConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>urlBasedCorsConfigurationSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>需要导入依赖：</p><p>thymeleaf、mybatis-plus、web、lombok</p>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot个人博客系统</title>
      <link href="2021/04/09/springboot-ge-ren-bo-ke-xi-tong/"/>
      <url>2021/04/09/springboot-ge-ren-bo-ke-xi-tong/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringBoot个人博客系统"><a href="#SpringBoot个人博客系统" class="headerlink" title="SpringBoot个人博客系统"></a>SpringBoot个人博客系统</h3><h4 id="项目功能设计"><a href="#项目功能设计" class="headerlink" title="项目功能设计"></a>项目功能设计</h4><p>分为两大块：</p><ol><li>游客版块<ol><li>注册登录</li><li>对博主的文章进行评论</li></ol></li><li>管理员版块<ol><li>对游客信息进行增删查改</li><li>对文章信息进行增删查改</li><li>对文章分类进行增删查改</li><li>对单个文章的评论可以实现删除操作</li></ol></li></ol><h4 id="项目目录设计"><a href="#项目目录设计" class="headerlink" title="项目目录设计"></a>项目目录设计</h4><hr><p>Java层：entity，mapper，service，controller，config，common</p><p>前端层：admin（后端层）+index（前端展示层）</p><hr><h4 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h4><p><img src="eg ./images/loading.gif" data-original="111SpringBoot%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F.assets/image-20201107085833159.png" alt="image-20201107085833159"></p><p>共6张表</p><p>admin管理员表</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201106171058019.png" alt="image-20201106171058019"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Navicat Premium Data Transfer Source Server         : 114.215.187.97 Source Server Type    : MySQL Source Server Version : 50649 Source Host           : 114.215.187.97:3306 Source Schema         : sb_blog Target Server Type    : MySQL Target Server Version : 50649 File Encoding         : 65001 Date: 06/11/2020 17:06:34*/</span><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Table structure for admin</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>admin<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>admin<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'管理员账户'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'昵称'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'状态'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>is_supper<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'是否超级管理员'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>delete_time<span class="token punctuation">`</span> <span class="token keyword">varbinary</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'软删除时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>isdel<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'逻辑删除标记'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MyISAM <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">4</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>articl文章表</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201106171114338.png" alt="image-20201106171114338"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Navicat Premium Data Transfer Source Server         : 114.215.187.97 Source Server Type    : MySQL Source Server Version : 50649 Source Host           : 114.215.187.97:3306 Source Schema         : sb_blog Target Server Type    : MySQL Target Server Version : 50649 File Encoding         : 65001 Date: 06/11/2020 17:07:34*/</span><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Table structure for article</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'标题'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>artdesc<span class="token punctuation">`</span> <span class="token keyword">text</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'概要'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>tags<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'标签'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>content<span class="token punctuation">`</span> <span class="token keyword">longtext</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'内容'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>is_top<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'是否推荐'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>cate_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'所属导航id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>delete_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'软删除'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>isdel<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'软删除标记位'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>member_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'添加人员id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>viewnum<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'浏览次数'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>commentnum<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'评论次数'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>authorname<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'文章作者'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MyISAM <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">7</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>cate专栏表</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201106171124232.png" alt="image-20201106171124232"></p><pre><code>/* Navicat Premium Data Transfer Source Server         : 114.215.187.97 Source Server Type    : MySQL Source Server Version : 50649 Source Host           : 114.215.187.97:3306 Source Schema         : sb_blog Target Server Type    : MySQL Target Server Version : 50649 File Encoding         : 65001 Date: 06/11/2020 17:08:16*/SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS = 0;-- ------------------------------ Table structure for cate-- ----------------------------DROP TABLE IF EXISTS `cate`;CREATE TABLE `cate`  (  `id` int(10) NOT NULL AUTO_INCREMENT COMMENT '主键',  `catename` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '导航名称',  `sort` int(10) NULL DEFAULT NULL COMMENT '排序',  `create_time` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '创建时间',  `update_time` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '更新时间',  `delete_time` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '软删除',  `isdel` int(10) NULL DEFAULT 0 COMMENT '软删除标记',  PRIMARY KEY (`id`) USING BTREE) ENGINE = MyISAM AUTO_INCREMENT = 6 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;SET FOREIGN_KEY_CHECKS = 1;</code></pre><p>comment评论表</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201106171137761.png" alt="image-20201106171137761"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Navicat Premium Data Transfer Source Server         : 114.215.187.97 Source Server Type    : MySQL Source Server Version : 50649 Source Host           : 114.215.187.97:3306 Source Schema         : sb_blog Target Server Type    : MySQL Target Server Version : 50649 File Encoding         : 65001 Date: 06/11/2020 17:08:47*/</span><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Table structure for comment</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span><span class="token keyword">comment</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">comment</span><span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>content<span class="token punctuation">`</span> <span class="token keyword">text</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'评论内容'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>article_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'评论文章id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>member_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'评论用户id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>delete_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'软删除时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>isdel<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'软删除标记位'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MyISAM <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">4</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>member游客表</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201106171148209.png" alt="image-20201106171148209"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Navicat Premium Data Transfer Source Server         : 114.215.187.97 Source Server Type    : MySQL Source Server Version : 50649 Source Host           : 114.215.187.97:3306 Source Schema         : sb_blog Target Server Type    : MySQL Target Server Version : 50649 File Encoding         : 65001 Date: 06/11/2020 17:09:19*/</span><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Table structure for member</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>member<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>member<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'昵称'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>delete_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'软删除时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>isdel<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'软删除标记位'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MyISAM <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">7</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>syssetting系统设置表</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201106171204019.png" alt="image-20201106171204019"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Navicat Premium Data Transfer Source Server         : 114.215.187.97 Source Server Type    : MySQL Source Server Version : 50649 Source Host           : 114.215.187.97:3306 Source Schema         : sb_blog Target Server Type    : MySQL Target Server Version : 50649 File Encoding         : 65001 Date: 06/11/2020 17:09:49*/</span><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token comment" spellcheck="true">-- Table structure for syssetting</span><span class="token comment" spellcheck="true">-- ----------------------------</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>syssetting<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>syssetting<span class="token punctuation">`</span>  <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>webname<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'网站名称'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>copyright<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'版权信息'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>delete_time<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'软删除时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>sign<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'个性签名'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MyISAM <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">CHARACTER SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><h4 id="项目技术"><a href="#项目技术" class="headerlink" title="项目技术"></a>项目技术</h4><pre><code>SpringBoot jQuery MyBatis FreeMarker</code></pre><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><pre><code>jdk1.8 mysql idea maven</code></pre><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sbblog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>sbblog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.46<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- mybatis plus 代码生成器依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 代码生成器模板 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h4 id="MP外部配置"><a href="#MP外部配置" class="headerlink" title="MP外部配置"></a>MP外部配置</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxy<span class="token punctuation">.</span>common<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>injector<span class="token punctuation">.</span>ISqlInjector<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>injector<span class="token punctuation">.</span>LogicSqlInjector<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>PaginationInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>PerformanceInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Profile<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 配置分页插件     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * sql执行效率插件     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"test"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> PerformanceInterceptor <span class="token function">performanceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 逻辑删除用     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ISqlInjector <span class="token function">iSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogicSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="使用MyBatis-plus"><a href="#使用MyBatis-plus" class="headerlink" title="使用MyBatis-plus"></a>使用MyBatis-plus</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxy<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>FieldFill<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>toolkit<span class="token punctuation">.</span>StringPool<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>InjectionConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>po<span class="token punctuation">.</span>TableFill<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>po<span class="token punctuation">.</span>TableInfo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>FreemarkerTemplateEngine<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MysqlGenerator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 代码生成器</span>        AutoGenerator mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 全局配置</span>        GlobalConfig gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String projectPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span>projectPath <span class="token operator">+</span> <span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO 设置用户名</span>        gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"Zxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// service 命名方式</span>        gc<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// service impl 命名方式</span>        gc<span class="token punctuation">.</span><span class="token function">setServiceImplName</span><span class="token punctuation">(</span><span class="token string">"%sServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自定义文件命名，注意 %s 会自动填充表实体属性！</span>        gc<span class="token punctuation">.</span><span class="token function">setMapperName</span><span class="token punctuation">(</span><span class="token string">"%sMapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setXmlName</span><span class="token punctuation">(</span><span class="token string">"%sMapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setFileOverride</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setActiveRecord</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// XML 二级缓存</span>        gc<span class="token punctuation">.</span><span class="token function">setEnableCache</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// XML ResultMap</span>        gc<span class="token punctuation">.</span><span class="token function">setBaseResultMap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// XML columList</span>        gc<span class="token punctuation">.</span><span class="token function">setBaseColumnList</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO 数据源配置</span>        DataSourceConfig dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/sb_blog?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=UTC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO 包配置</span>        PackageConfig pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//pc.setModuleName(scanner("模块名"));</span>        pc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"com.zxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setServiceImpl</span><span class="token punctuation">(</span><span class="token string">"service.impl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自定义需要填充的字段</span>        List<span class="token operator">&lt;</span>TableFill<span class="token operator">></span> tableFillList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如 每张表都有一个创建时间、修改时间</span>        <span class="token comment" spellcheck="true">//而且这基本上就是通用的了，新增时，创建时间和修改时间同时修改</span>        <span class="token comment" spellcheck="true">//修改时，修改时间会修改，</span>        <span class="token comment" spellcheck="true">//虽然像Mysql数据库有自动更新几只，但像ORACLE的数据库就没有了，</span>        <span class="token comment" spellcheck="true">//使用公共字段填充功能，就可以实现，自动按场景更新了。</span>        <span class="token comment" spellcheck="true">//如下是配置</span>        TableFill createField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"create_time"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token punctuation">;</span>        TableFill modifiedField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"update_time"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        tableFillList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>createField<span class="token punctuation">)</span><span class="token punctuation">;</span>        tableFillList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>modifiedField<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自定义配置</span>        InjectionConfig cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InjectionConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// to do nothing</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>FileOutConfig<span class="token operator">></span> focList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        focList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutConfig</span><span class="token punctuation">(</span><span class="token string">"/templates/mapper.xml.ftl"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">outputFile</span><span class="token punctuation">(</span>TableInfo tableInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 自定义输入文件名称</span>                <span class="token keyword">return</span> projectPath <span class="token operator">+</span> <span class="token string">"/src/main/resources/mapper/admin/"</span>                        <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> tableInfo<span class="token punctuation">.</span><span class="token function">getEntityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Mapper"</span> <span class="token operator">+</span> StringPool<span class="token punctuation">.</span>DOT_XML<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cfg<span class="token punctuation">.</span><span class="token function">setFileOutConfigList</span><span class="token punctuation">(</span>focList<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setCfg</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setTemplate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TemplateConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setXml</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 策略配置</span>        StrategyConfig strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置逻辑删除键</span>        strategy<span class="token punctuation">.</span><span class="token function">setLogicDeleteFieldName</span><span class="token punctuation">(</span><span class="token string">"isdel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO 指定生成的bean的数据库表名</span>        strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token string">"syssetting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//strategy.setSuperEntityColumns("id");</span>        <span class="token comment" spellcheck="true">// 驼峰转连字符</span>        strategy<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 选择 freemarker 引擎需要指定如下加，注意 pom 依赖必须有！</span>        mpg<span class="token punctuation">.</span><span class="token function">setTemplateEngine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FreemarkerTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="实体类结构"><a href="#实体类结构" class="headerlink" title="实体类结构"></a>实体类结构</h4><blockquote><p>实体类采用JSR303数据校验</p><p>定制统一返回接口</p><p>对异常信息实行统一规范</p></blockquote><h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><p>DataGrid  作为表格数据结构存储对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxy<span class="token punctuation">.</span>common<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 表格数据存储对象 * 默认作为bootstrap表格对应的数据结构存储对象 * author:Zxy */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataGrid</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long total <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> List rows <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Long <span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTotal</span><span class="token punctuation">(</span>Long total<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">=</span> total<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List <span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> rows<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRows</span><span class="token punctuation">(</span>List rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rows <span class="token operator">=</span> rows<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>DateTimeUtil  时间转换类（网上找的）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxy<span class="token punctuation">.</span>common<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>ParseException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>GregorianCalendar<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Title:公共工具类 * Description: 对日期的一些操作 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeUtil</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/**    * 由java.util.Date到java.sql.Date的类型转换    *     * @param date    *     * @return Date    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">getSqlDate</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">nowDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">getSqlDate</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 判断给定的年月日，是否为一周的开始    *     * @param year    * @param month    * @param day    * @return    */</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">getIsWeekBegin</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      Calendar c <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置日期</span>      <span class="token keyword">int</span> week <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取当前日期星期，英国那边的算法(周日算一周第一天)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果是周1就返回true</span>         flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> flag<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    *     * 给定一个日期，获得这个日期所在周的周一的日期    *     * @param date    *            void    * @exception 2012-10-20 下午5:56:58    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getMonday</span><span class="token punctuation">(</span>String date<span class="token punctuation">,</span> String df<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         SimpleDateFormat format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Date d <span class="token operator">=</span> null<span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            d <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            Calendar cal <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cal<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 关于DAY_OF_WEEK的说明</span>            <span class="token comment" spellcheck="true">// Field number for get and set indicating</span>            <span class="token comment" spellcheck="true">// the day of the week. This field takes values</span>            <span class="token comment" spellcheck="true">// SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY,</span>            <span class="token comment" spellcheck="true">// and SATURDAY</span>            cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">,</span> Calendar<span class="token punctuation">.</span>MONDAY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">)</span>               format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> format<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>cal<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 判断给定的年月日，是否为一周的结束    *     * @param year    * @param month    * @param day    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">getIsWeekEnd</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar c <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置日期</span>      <span class="token keyword">int</span> week <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取当前日期星期，英国那边的算法(周日算一周第一天)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">7</span> <span class="token operator">||</span> week <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果是周六或周日就返回true</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获得某月包含的周一个数    *     * @param year    * @param month    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getWeekNumberOfMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 周1 的计数器count</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token function">getDayCountOfMonth</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> day<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getIsWeekBegin</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> count<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获得某一日期的后一天    *     * @param date    * @return Date    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">getNextDate</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> day <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> day <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">getSqlDate</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获得某一日期的前一天    *     * @param date    * @return Date    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">getPreviousDate</span><span class="token punctuation">(</span>Date date<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> day <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> day <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">getSqlDate</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 返回给定日期所在月的第一天    *     * @param date    * @return    * @throws ParseException    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">getFirstDayOfMonth</span><span class="token punctuation">(</span><span class="token keyword">final</span> String date<span class="token punctuation">)</span>         <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>      SimpleDateFormat format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Date d <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>      Calendar cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cal<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">getFirstDayOfMonth</span><span class="token punctuation">(</span>cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">,</span>            cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 取得给定日期所在月的天数    *     * @return int    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getDayCountOfMonth</span><span class="token punctuation">(</span><span class="token keyword">final</span> String date<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Date d <span class="token operator">=</span> <span class="token function">StringToDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>      Calendar cal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cal<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>      Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span> cal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获取当前月的天数    *     * @return int    * @exception 2012-10-19 下午9:58:07    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getDayCountOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">getDayCountOfMonth</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">yyyyStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">mmStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获得某年某月第一天的日期    *     * @param year    * @param month    * @return Date    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">getFirstDayOfMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span> month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获得某年某月最后一天的日期    *     * @param year    * @param month    * @return Date    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">getLastDayOfMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">getPreviousDate</span><span class="token punctuation">(</span><span class="token function">getSqlDate</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 由年月日构建java.sql.Date类型    *     * @param year    * @param month    * @param date    * @return Date    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">buildDate</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">getSqlDate</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 取得某月的天数    *     * @param year    * @param month    * @return int    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getDayCountOfMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获得某年某季度的最后一天的日期    *     * @param year    * @param quarter    * @return Date    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">getLastDayOfQuarter</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> quarter<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>quarter <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         month <span class="token operator">=</span> quarter <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">getLastDayOfMonth</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获得某年某季度的第一天的日期    *     * @param year    * @param quarter    * @return Date    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">getFirstDayOfQuarter</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> quarter<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>quarter <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         month <span class="token operator">=</span> <span class="token punctuation">(</span>quarter <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">getFirstDayOfMonth</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获得某年的第一天的日期    *     * @param year    * @return Date    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">getFirstDayOfYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">getFirstDayOfMonth</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获得某年的最后一天的日期    *     * @param year    * @return Date    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">getLastDayOfYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">getLastDayOfMonth</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * String到java.sql.Date的类型转换    *     * @param param    * @return Date    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">StringToDate</span><span class="token punctuation">(</span>String param<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         Date date <span class="token operator">=</span> null<span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> date<span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 时间格式： 20050601081202    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">nowNumStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar now <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String yyyy <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String mm <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String dd <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String hh <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String ii <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String ss <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> mm<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> mm<span class="token punctuation">)</span> <span class="token operator">:</span> mm<span class="token punctuation">;</span>      dd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> dd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> dd<span class="token punctuation">)</span> <span class="token operator">:</span> dd<span class="token punctuation">;</span>      hh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> hh<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> hh<span class="token punctuation">)</span> <span class="token operator">:</span> hh<span class="token punctuation">;</span>      ii <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> ii<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> ii<span class="token punctuation">)</span> <span class="token operator">:</span> ii<span class="token punctuation">;</span>      ss <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> ss<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> ss<span class="token punctuation">)</span> <span class="token operator">:</span> ss<span class="token punctuation">;</span>      String timeStr <span class="token operator">=</span> yyyy <span class="token operator">+</span> mm <span class="token operator">+</span> dd <span class="token operator">+</span> hh <span class="token operator">+</span> ii <span class="token operator">+</span> ss<span class="token punctuation">;</span>      <span class="token keyword">return</span> timeStr<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 时间格式： 20050601081202    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">nowymdNumStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar now <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String yyyy <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String mm <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String dd <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> mm<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> mm<span class="token punctuation">)</span> <span class="token operator">:</span> mm<span class="token punctuation">;</span>      dd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> dd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> dd<span class="token punctuation">)</span> <span class="token operator">:</span> dd<span class="token punctuation">;</span>      String timeStr <span class="token operator">=</span> yyyy <span class="token operator">+</span> mm <span class="token operator">+</span> dd<span class="token punctuation">;</span>      <span class="token keyword">return</span> timeStr<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 时间格式：2005-01    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">ymStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar now <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String yyyy <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String mm <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String dd <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> mm<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> mm<span class="token punctuation">)</span> <span class="token operator">:</span> mm<span class="token punctuation">;</span>      <span class="token keyword">return</span> yyyy <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> mm<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 时间格式：2005-01-20    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">ymdStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar now <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String yyyy <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String mm <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String dd <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> mm<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> mm<span class="token punctuation">)</span> <span class="token operator">:</span> mm<span class="token punctuation">;</span>      dd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> dd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> dd<span class="token punctuation">)</span> <span class="token operator">:</span> dd<span class="token punctuation">;</span>      <span class="token keyword">return</span> yyyy <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> mm <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> dd<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 将给定的日期增加相应年    *     * @param date    *            待增加日期    * @param year    *            需要增加的年数    * @return 格式yyyy-MM-dd    * @throws ParseException    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">addOneYearForYmdStr</span><span class="token punctuation">(</span>String date<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">)</span>         <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>      Calendar now <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      SimpleDateFormat dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Date d <span class="token operator">=</span> dateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        now<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>      String yyyy <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span> <span class="token operator">+</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>      String mm <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String dd <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> mm<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> mm<span class="token punctuation">)</span> <span class="token operator">:</span> mm<span class="token punctuation">;</span>      dd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> dd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> dd<span class="token punctuation">)</span> <span class="token operator">:</span> dd<span class="token punctuation">;</span>      <span class="token keyword">return</span> yyyy <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> mm <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> dd<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 时间格式：08:12:45    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">hisStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar now <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String hh <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String ii <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String ss <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      hh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> hh<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> hh<span class="token punctuation">)</span> <span class="token operator">:</span> hh<span class="token punctuation">;</span>      ii <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> ii<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> ii<span class="token punctuation">)</span> <span class="token operator">:</span> ii<span class="token punctuation">;</span>      ss <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> ss<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> ss<span class="token punctuation">)</span> <span class="token operator">:</span> ss<span class="token punctuation">;</span>      <span class="token keyword">return</span> hh <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> ii <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> ss<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 时间格式： 2005-01-23 08:12:45    *     * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">nowTimeStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">ymdStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token function">hisStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 根据格式获得当前日期    *     * @param pattern    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getNowDateStrForPattern</span><span class="token punctuation">(</span>String pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获取年 2006    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">yyyyStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar now <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      now <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String yyyy <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> yyyy<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获取月 06    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">mmStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar now <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String mm <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> mm<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> mm<span class="token punctuation">)</span> <span class="token operator">:</span> mm<span class="token punctuation">;</span>      <span class="token keyword">return</span> mm<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获取日    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">ddStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar now <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String dd <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> dd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token string">"0"</span> <span class="token operator">+</span> dd<span class="token punctuation">)</span> <span class="token operator">:</span> dd<span class="token punctuation">;</span>      <span class="token keyword">return</span> dd<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 格式化SQL日期    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">format</span><span class="token punctuation">(</span>String pattern<span class="token punctuation">,</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date date<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 格式化JAVA日期    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">format</span><span class="token punctuation">(</span>String pattern<span class="token punctuation">,</span> Date date<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 在当前日期加或减多少天得到新日期    *     * @param i    *            增加的天数    * @param operator    *            :+ -    * @return 新日期    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">strToDateByInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> String operator<span class="token punctuation">,</span> String df<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Date d <span class="token operator">=</span> <span class="token function">nowDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      GregorianCalendar gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      gc<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         gc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>GregorianCalendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         gc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>GregorianCalendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Date now <span class="token operator">=</span> gc<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         df <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认输出时间格式</span>      SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 在指定日期上增加天数    *     * @param day    * @param operator    * @param df    * @return String    * @exception    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">strDateByInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">,</span> String oldDate<span class="token punctuation">,</span> String operator<span class="token punctuation">,</span>         String df<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         SimpleDateFormat format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">)</span>            format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">;</span>         Date d <span class="token operator">=</span> null<span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            d <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>oldDate<span class="token punctuation">)</span><span class="token punctuation">;</span>            GregorianCalendar gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            gc<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               gc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>GregorianCalendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               gc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>GregorianCalendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span>day<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Date now <span class="token operator">=</span> gc<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> format<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 计算某年某月有多少天    *     * @param year    * @param month    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">daysInMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> month <span class="token operator">></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">int</span> days <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         days <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            days <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            days <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> days<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 取得下个月    *     */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getNextMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         Calendar cl <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         cl<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"200601"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// cl.add(cl.MONTH, 1);</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 计算两个日期之间的月差    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">dispersionMonth2</span><span class="token punctuation">(</span>String strDate1<span class="token punctuation">,</span> String strDate2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> iMonth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         Calendar objCalendarDate1 <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         objCalendarDate1<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>DateFormat<span class="token punctuation">.</span><span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>               strDate1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Calendar objCalendarDate2 <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         objCalendarDate2<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>DateFormat<span class="token punctuation">.</span><span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>               strDate2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>objCalendarDate2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>objCalendarDate1<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>objCalendarDate1<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>objCalendarDate2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Calendar temp <span class="token operator">=</span> objCalendarDate1<span class="token punctuation">;</span>            objCalendarDate1 <span class="token operator">=</span> objCalendarDate2<span class="token punctuation">;</span>            objCalendarDate2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>objCalendarDate2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span> <span class="token operator">&lt;</span> objCalendarDate1               <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>objCalendarDate2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span> <span class="token operator">></span> objCalendarDate1               <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span>            iMonth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>objCalendarDate2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span> <span class="token operator">-</span> objCalendarDate1                  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token operator">*</span> <span class="token number">12</span>                  <span class="token operator">+</span> objCalendarDate2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">-</span> flag<span class="token punctuation">)</span>                  <span class="token operator">-</span> objCalendarDate1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">else</span>            iMonth <span class="token operator">=</span> objCalendarDate2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span>                  <span class="token operator">-</span> objCalendarDate1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">-</span> flag<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> iMonth<span class="token punctuation">;</span>   <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**      * 两个时间之间相差距离多少天      * @return 相差天数     */</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getDistanceDays</span><span class="token punctuation">(</span>String str1<span class="token punctuation">,</span> String str2<span class="token punctuation">)</span><span class="token punctuation">{</span>          DateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Date one<span class="token punctuation">;</span>          Date two<span class="token punctuation">;</span>          <span class="token keyword">long</span> days<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              one <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>              two <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">long</span> time1 <span class="token operator">=</span> one<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">long</span> time2 <span class="token operator">=</span> two<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">long</span> diff <span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>time1<span class="token operator">&lt;</span>time2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  diff <span class="token operator">=</span> time2 <span class="token operator">-</span> time1<span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  diff <span class="token operator">=</span> time1 <span class="token operator">-</span> time2<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              days <span class="token operator">=</span> diff <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> days<span class="token punctuation">;</span>      <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/**     * 返回日期中间的所有日期list形式     * @param str1     * @param str2     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> <span class="token function">getDistanceDaysList</span><span class="token punctuation">(</span>String str1<span class="token punctuation">,</span> String str2<span class="token punctuation">)</span><span class="token punctuation">{</span>         List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span> daysList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> daysMap <span class="token operator">=</span> null<span class="token punctuation">;</span>       <span class="token keyword">long</span> dayFlag <span class="token operator">=</span> <span class="token function">compare_date</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>dayFlag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//str1大于str2日期(格式不正确)</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dayFlag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//两个日期一样 </span>          daysMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          daysMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">,</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>           daysMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           daysList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>daysMap<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> daysList<span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token keyword">long</span> daysNum <span class="token operator">=</span> <span class="token function">getDistanceDays</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>          daysMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           daysMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">,</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>           daysMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           daysList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>daysMap<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> daysNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              String dayStr <span class="token operator">=</span> <span class="token function">strDateByInt</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>str1<span class="token punctuation">,</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             daysMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               daysMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">,</span>dayStr<span class="token punctuation">)</span><span class="token punctuation">;</span>               daysMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               daysList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>daysMap<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          daysMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           daysMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>           daysMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             daysList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>daysMap<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token keyword">return</span> daysList<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**     * 返回日期中间的所有日期Map形式     * @param str1     * @param str2     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">getDistanceDaysMap</span><span class="token punctuation">(</span>String str1<span class="token punctuation">,</span> String str2<span class="token punctuation">)</span><span class="token punctuation">{</span>         Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> daysMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">long</span> dayFlag <span class="token operator">=</span> <span class="token function">compare_date</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>dayFlag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//str1大于str2日期(格式不正确)</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dayFlag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//两个日期一样 </span>          daysMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> daysMap<span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token keyword">long</span> daysNum <span class="token operator">=</span> <span class="token function">getDistanceDays</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>          daysMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> daysNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              String dayStr <span class="token operator">=</span> <span class="token function">strDateByInt</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>str1<span class="token punctuation">,</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             daysMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>dayStr<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>          daysMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token keyword">return</span> daysMap<span class="token punctuation">;</span>      <span class="token punctuation">}</span>          <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">dispersionDays2</span><span class="token punctuation">(</span>String sEndDate<span class="token punctuation">,</span> String sBeginDate<span class="token punctuation">)</span>         <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      Calendar calendar1 <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Calendar calendar2 <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      SimpleDateFormat formatter1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 格式很重要：是20051031，还是2005-10-31格式呢？</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>sBeginDate<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         sBeginDate <span class="token operator">=</span> <span class="token string">"19000101"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      calendar1<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>formatter1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sBeginDate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar2<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>formatter1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sEndDate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>calendar2<span class="token punctuation">.</span><span class="token function">getTimeInMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> calendar1            <span class="token punctuation">.</span><span class="token function">getTimeInMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取天数的差值。</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">GMTToString</span><span class="token punctuation">(</span>String dateGMT<span class="token punctuation">)</span> <span class="token punctuation">{</span>      SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>      Date satrt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dateGMT<span class="token punctuation">)</span><span class="token punctuation">;</span>      String startStr <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>satrt<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> startStr<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">dateFormat</span><span class="token punctuation">(</span>String dateStr<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>      SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Date date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>      sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String startStr <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> startStr<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">dateFormat</span><span class="token punctuation">(</span>String dateStr<span class="token punctuation">,</span> String viewFormat<span class="token punctuation">)</span>         <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>      SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Date date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>      sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>viewFormat<span class="token punctuation">)</span><span class="token punctuation">;</span>      String startStr <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> startStr<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getDateByLong</span><span class="token punctuation">(</span><span class="token keyword">long</span> LongTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>LongTime<span class="token punctuation">)</span><span class="token punctuation">;</span>      SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 日期比较    *     * @param DATE1    * @param DATE2    * @return 0:两个日期一样 1：dt1 日期大。-1：dt1日期小。    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compare_date</span><span class="token punctuation">(</span>String DATE1<span class="token punctuation">,</span> String DATE2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      DateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         Date dt1 <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>DATE1<span class="token punctuation">)</span><span class="token punctuation">;</span>         Date dt2 <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>DATE2<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>dt1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> dt2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//          System.out.println("dt1 在dt2前");</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dt1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> dt2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//          System.out.println("dt1在dt2后");</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>         exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 时间比较    * yyyy-MM-dd HH:mm:ss"    * @param DATE1    * @param DATE2    * @return 0:两个日期一样 1：dt1 日期大。-1：dt1日期小。    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compare_date_time</span><span class="token punctuation">(</span>String DATE1<span class="token punctuation">,</span> String DATE2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      DateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         Date dt1 <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>DATE1<span class="token punctuation">)</span><span class="token punctuation">;</span>         Date dt2 <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>DATE2<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>dt1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> dt2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//          System.out.println("dt1 在dt2前");</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dt1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> dt2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//          System.out.println("dt1在dt2后");</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>         exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 获得当前日期所在季度    *     * @return 1：一季度，2：二季度，3：三季度，4：四季度    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nowQuarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Calendar now <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> month <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">7</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">8</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**    * 根据当前年月获取上个月时间    * @param date    * @return    * @throws Exception    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getLastMonthDate</span><span class="token punctuation">(</span>String date<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      Calendar c <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      SimpleDateFormat sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>sf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> sf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 根据当前年月获取几个月前（后）时间    * @param date    * @param number 月数 正数为后 负数为前    * @return    * @throws Exception    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getSomeMonthDate</span><span class="token punctuation">(</span>String date<span class="token punctuation">,</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      Calendar c <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      SimpleDateFormat sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>sf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> sf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 根据当前年月获取上一年时间    * @param date    * @param format: 例："yyyy-MM"     * @return    * @throws Exception    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getLastYearDate</span><span class="token punctuation">(</span>String date<span class="token punctuation">,</span>String format<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      Calendar c <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      SimpleDateFormat sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>sf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> sf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * a - b 的秒数    * 时间格式必须为  yyyy-MM-dd HH:mm:ss    * @param a    * @param b    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getDaysFromTwoTime</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span>String b<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">long</span> days <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      DateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span><span class="token punctuation">{</span>         Date d1 <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>         Date d2 <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">long</span> diff <span class="token operator">=</span> d1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> d2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         days <span class="token operator">=</span> diff<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> days<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">addDays</span><span class="token punctuation">(</span>String date<span class="token punctuation">,</span><span class="token keyword">int</span> days<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      Calendar c <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      SimpleDateFormat sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>sf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> sf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">/**    * 将yyyy-MM-dd转换为yyyy年MM月dd日    * @param  date    * @return yyyy年MM月dd日    * @throws Exception    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">ymdprintStr</span><span class="token punctuation">(</span>String date<span class="token punctuation">)</span><span class="token punctuation">{</span>      String printYmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            date <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> dates <span class="token operator">=</span>date<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         printYmd<span class="token operator">=</span>dates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"年"</span><span class="token operator">+</span>dates<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"月"</span><span class="token operator">+</span>dates<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"日"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> printYmd<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 将yyyy-MM-dd转换为yyyyMMdd    * @param  date    * @return yyyyMMdd    * @throws Exception    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">yyyymmddprintStr</span><span class="token punctuation">(</span>String date<span class="token punctuation">)</span><span class="token punctuation">{</span>      String printYmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            date <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> dates <span class="token operator">=</span>date<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         printYmd<span class="token operator">=</span>dates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>dates<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dates<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> printYmd<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 开发区补贴发放记录导入功能    * 验证身份证号合法性    * 非空、18位合法    * @param idnumber    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">validateFfjlIdnumber</span><span class="token punctuation">(</span>String idnumber<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>idnumber<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>idnumber<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**    * 开发区补贴发放记录导入功能    * 验证发放金额合法性    * 非空、数字合法    * @param money    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">validateFfjlMoney</span><span class="token punctuation">(</span>String money<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> money<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+(\\.\\d+)?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">/**    * 检验日期是否符合格式      * 支持格式： yyyy-M, yyyy-MM, yyyy.M, yyyy.MM, yyyy/M, yyyy/MM    * @param date    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">validateDateFormat</span><span class="token punctuation">(</span>String date<span class="token punctuation">)</span><span class="token punctuation">{</span>            String regex <span class="token operator">=</span> <span class="token string">"^(\\d{4})-(0{0,1}\\d{1}|1[0-2])"</span>            <span class="token operator">+</span> <span class="token string">"|(\\d{4})\\.(0{0,1}\\d{1}|1[0-2])"</span>            <span class="token operator">+</span> <span class="token string">"|(\\d{4})/(0{0,1}\\d{1}|1[0-2])$"</span><span class="token punctuation">;</span>      Pattern pat <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>      Matcher matcher <span class="token operator">=</span> pat<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">/**    * 检验日期是否符合格式      * 支持格式：yyyy-MM, yyyy.MM, yyyy/MM    * @param date    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">validateDateFormatYMD</span><span class="token punctuation">(</span>String date<span class="token punctuation">)</span><span class="token punctuation">{</span>            String regex <span class="token operator">=</span> <span class="token string">"^(\\d{4})-(0{0,1}\\d{1}|1[0-2])-(0{0,1}\\d{1}|[12]\\d{1}|3[01])"</span>            <span class="token operator">+</span> <span class="token string">"|(\\d{4})\\.(0{0,1}\\d{1}|1[0-2])\\.(0{0,1}\\d{1}|[12]\\d{1}|3[01])"</span>            <span class="token operator">+</span> <span class="token string">"|(\\d{4})/(0{0,1}\\d{1}|1[0-2])/(0{0,1}\\d{1}|[12]\\d{1}|3[01])$"</span><span class="token punctuation">;</span>      Pattern pat <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>      Matcher matcher <span class="token operator">=</span> pat<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>Message 消息返回接口（状态，信息，url，数据，状态码）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxy<span class="token punctuation">.</span>common<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 定制统一消息返回接口* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> success<span class="token punctuation">;</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> success<span class="token punctuation">,</span> String message<span class="token punctuation">,</span> String url<span class="token punctuation">,</span> Object data<span class="token punctuation">,</span> <span class="token keyword">int</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>success <span class="token operator">=</span> success<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Message <span class="token function">success</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span>msg<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Message <span class="token function">success</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span>Object data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span>msg<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Message <span class="token function">success</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span>Object data<span class="token punctuation">,</span>String url<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span>msg<span class="token punctuation">,</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Message <span class="token function">fail</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span>msg<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Message <span class="token function">fail</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span>Object data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span>msg<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Message <span class="token function">fail</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span>Object data<span class="token punctuation">,</span>String url<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span>msg<span class="token punctuation">,</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> success<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> success<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>success <span class="token operator">=</span> success<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUrl</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>GlobalExceptionHandler  异常处理</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxy<span class="token punctuation">.</span>common<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>BindException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>MethodArgumentNotValidException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExceptionHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestControllerAdvice<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>ConstraintViolationException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** 公共异常处理器* */</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * post请求参数校验抛出的异常     * @param e     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Message <span class="token function">methodArgumentNotValidExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取异常中随机一个异常信息</span>        String defaultMessage <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Message<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>defaultMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * get请求参数校验抛出的异常     * @param e     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>BindException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Message <span class="token function">bindExceptionHandler</span><span class="token punctuation">(</span>BindException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取异常中随机一个异常信息</span>        String defaultMessage <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Message<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>defaultMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 请求方法中校验抛出的异常     * @param e     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>ConstraintViolationException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Message <span class="token function">constraintViolationExceptionHandler</span><span class="token punctuation">(</span>ConstraintViolationException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取异常中第一个错误信息</span>        String message <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getConstraintViolations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Message<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="配置登录拦截器"><a href="#配置登录拦截器" class="headerlink" title="配置登录拦截器"></a>配置登录拦截器</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxy<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InterceptorRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 注册登录拦截配置 * 拦截/admin下的路径，除了/admin/login和 /admin/register */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AdminLoginHandlerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/admin/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/admin/login"</span><span class="token punctuation">,</span> <span class="token string">"/admin/register"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxy<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * admin拦截器 * 验证session中是否登录admin * 已登录，继续访问 * 未登录，返回登录页面 * author:Zxy */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminLoginHandlerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Object admin <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>admin <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String url <span class="token operator">=</span> <span class="token string">"/admin/login"</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        request.getRequestDispatcher(url).forward(request,response);</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot对接支付沙箱环境</title>
      <link href="2021/04/09/springboot-dui-jie-zhi-fu-sha-xiang-huan-jing/"/>
      <url>2021/04/09/springboot-dui-jie-zhi-fu-sha-xiang-huan-jing/</url>
      
        <content type="html"><![CDATA[<h3 id="Springboot对接支付沙箱环境"><a href="#Springboot对接支付沙箱环境" class="headerlink" title="Springboot对接支付沙箱环境"></a>Springboot对接支付沙箱环境</h3><h4 id="拿到APPID和密钥"><a href="#拿到APPID和密钥" class="headerlink" title="拿到APPID和密钥"></a>拿到APPID和密钥</h4><p>百度搜支付宝开放平台，进入首页，登录自己的支付宝账号</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201124201310303.png" alt="image-20201124201310303"></p><p>进入管理中心</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201124201328762.png" alt="image-20201124201328762"></p><p>找到研发服务</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201124201355652.png" alt="image-20201124201355652"></p><p>找到这个APPID和支付宝网关，这就是最需要的东西</p><p>接下来，点击支付宝网关下面那个RSA2密钥，点击设置</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201124201515640.png" alt="image-20201124201515640"></p><p>有公钥证书的就上传你的公钥证书，没证书的就选择旁边的公钥</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201124201610972.png" alt="image-20201124201610972"></p><p>这儿的公钥字符我填的是我自己的，你们根据提示去下载支付宝生成的密钥的工具去下载</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201124201651092.png" alt="image-20201124201651092"></p><p>这个是支付宝下载的工具，点击生成密钥，</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201124201958104.png" alt="image-20201124201958104"></p><p>他会存在我们电脑的文档目录下</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201124202041233.png" alt="image-20201124202041233"></p><p>接下来就可以开始操作了</p><h4 id="搭建依赖"><a href="#搭建依赖" class="headerlink" title="搭建依赖"></a>搭建依赖</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alipay.sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>alipay-sdk-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10.192.ALL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>编写AlipayConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxy<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * *类名：AlipayConfig *功能：基础配置类 *详细：设置帐户有关信息及返回路径 *修改日期：2017-04-05 *说明： *以下代码只是为了方便商户测试而提供的样例代码，商户可以根据自己网站的需要，按照技术文档编写,并非一定要使用该代码。 *该代码仅供学习和研究支付宝接口使用，只是提供一个参考。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AlipayConfig</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//↓↓↓↓↓↓↓↓↓↓请在这里配置您的基本信息↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span>    <span class="token comment" spellcheck="true">// 应用ID,您的APPID，收款账号既是您的APPID对应支付宝账号</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String app_id <span class="token operator">=</span> <span class="token string">"2016110100784984"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 商户私钥，您的PKCS8格式RSA2私钥</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String merchant_private_key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 支付宝公钥,查看地址：https://openhome.alipay.com/platform/keyManage.htm 对应APPID下的支付宝公钥。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String alipay_public_key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 服务器异步通知页面路径  需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String notify_url <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 页面跳转同步通知页面路径 需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String return_url <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 签名方式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String sign_type <span class="token operator">=</span> <span class="token string">"RSA2"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 字符编码格式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String charset <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 支付宝网关</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String gatewayUrl <span class="token operator">=</span> <span class="token string">"https://openapi.alipaydev.com/gateway.do"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 支付宝网关</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String log_path <span class="token operator">=</span> <span class="token string">"C:\\"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//↑↑↑↑↑↑↑↑↑↑请在这里配置您的基本信息↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span>    <span class="token comment" spellcheck="true">/**     * 写日志，方便测试（看网站需求，也可以改成把记录存入数据库）     * @param sWord 要写入日志里的文本内容     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">logResult</span><span class="token punctuation">(</span>String sWord<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FileWriter writer <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>log_path <span class="token operator">+</span> <span class="token string">"alipay_log_"</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>sWord<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>writer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注释都有，自己仔细看</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxy<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alipay<span class="token punctuation">.</span>api<span class="token punctuation">.</span>AlipayApiException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alipay<span class="token punctuation">.</span>api<span class="token punctuation">.</span>AlipayClient<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alipay<span class="token punctuation">.</span>api<span class="token punctuation">.</span>DefaultAlipayClient<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alipay<span class="token punctuation">.</span>api<span class="token punctuation">.</span>request<span class="token punctuation">.</span>AlipayTradePagePayRequest<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxy<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AlipayConfig<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author Zxy * @Date 2020/11/24 16:39 * @Version 1.0 */</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/pay"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">payController</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> AlipayApiException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取初始化的AliPayClient</span>        AlipayClient alipayClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAlipayClient</span><span class="token punctuation">(</span>                AlipayConfig<span class="token punctuation">.</span>gatewayUrl<span class="token punctuation">,</span>                AlipayConfig<span class="token punctuation">.</span>app_id<span class="token punctuation">,</span>                AlipayConfig<span class="token punctuation">.</span>merchant_private_key<span class="token punctuation">,</span>                <span class="token string">"json"</span><span class="token punctuation">,</span>                AlipayConfig<span class="token punctuation">.</span>charset<span class="token punctuation">,</span>                AlipayConfig<span class="token punctuation">.</span>alipay_public_key<span class="token punctuation">,</span>                AlipayConfig<span class="token punctuation">.</span>sign_type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置请求参数</span>        AlipayTradePagePayRequest alipayRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlipayTradePagePayRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alipayRequest<span class="token punctuation">.</span><span class="token function">setReturnUrl</span><span class="token punctuation">(</span>AlipayConfig<span class="token punctuation">.</span>return_url<span class="token punctuation">)</span><span class="token punctuation">;</span>        alipayRequest<span class="token punctuation">.</span><span class="token function">setNotifyUrl</span><span class="token punctuation">(</span>AlipayConfig<span class="token punctuation">.</span>notify_url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//商户订单号，商户网站订单系统中唯一订单号，必填</span>        String out_trade_no <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"WIDout_trade_no"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//付款金额，必填</span>        String total_amount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"WIDtotal_amount"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//订单名称，必填</span>        String subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"WIDsubject"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//商品描述，可空</span>        String body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"WIDbody"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alipayRequest<span class="token punctuation">.</span><span class="token function">setBizContent</span><span class="token punctuation">(</span><span class="token string">"{\"out_trade_no\":\""</span><span class="token operator">+</span> out_trade_no <span class="token operator">+</span><span class="token string">"\","</span>                <span class="token operator">+</span> <span class="token string">"\"total_amount\":\""</span><span class="token operator">+</span> total_amount <span class="token operator">+</span><span class="token string">"\","</span>                <span class="token operator">+</span> <span class="token string">"\"subject\":\""</span><span class="token operator">+</span> subject <span class="token operator">+</span><span class="token string">"\","</span>                <span class="token operator">+</span> <span class="token string">"\"body\":\""</span><span class="token operator">+</span> body <span class="token operator">+</span><span class="token string">"\","</span>                <span class="token operator">+</span> <span class="token string">"\"product_code\":\"FAST_INSTANT_TRADE_PAY\"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//若想给BizContent增加其他可选请求参数，以增加自定义超时时间参数timeout_express来举例说明</span>        <span class="token comment" spellcheck="true">//alipayRequest.setBizContent("{\"out_trade_no\":\""+ out_trade_no +"\","</span>        <span class="token comment" spellcheck="true">//    + "\"total_amount\":\""+ total_amount +"\","</span>        <span class="token comment" spellcheck="true">//    + "\"subject\":\""+ subject +"\","</span>        <span class="token comment" spellcheck="true">//    + "\"body\":\""+ body +"\","</span>        <span class="token comment" spellcheck="true">//    + "\"timeout_express\":\"10m\","</span>        <span class="token comment" spellcheck="true">//    + "\"product_code\":\"FAST_INSTANT_TRADE_PAY\"}");</span>        <span class="token comment" spellcheck="true">//请求参数可查阅【电脑网站支付的API文档-alipay.trade.page.pay-请求参数】章节</span>        <span class="token comment" spellcheck="true">//请求</span>        String result <span class="token operator">=</span> alipayClient<span class="token punctuation">.</span><span class="token function">pageExecute</span><span class="token punctuation">(</span>alipayRequest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset="</span><span class="token operator">+</span>AlipayConfig<span class="token punctuation">.</span>charset<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">toIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程面试题</title>
      <link href="2021/04/09/java-xian-cheng-mian-shi-ti/"/>
      <url>2021/04/09/java-xian-cheng-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="Java线程面试题"><a href="#Java线程面试题" class="headerlink" title="Java线程面试题"></a>Java线程面试题</h3><h4 id="线程的四种启动方式"><a href="#线程的四种启动方式" class="headerlink" title="线程的四种启动方式"></a>线程的四种启动方式</h4><ol><li><p>继承Thread类</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107120124829.png" alt="image-20201107120124829"></p></li><li><p>在类中已经继承了某一个类的话实现Runable接口</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107120405291.png" alt="image-20201107120405291"></p></li><li><p>有返回值的必须实现Callable接口</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107121215982.png" alt="image-20201107121215982"></p><p>为什么要使用FutureTask来实例化Callable，看看源码：</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107121348188.png" alt="image-20201107121348188"></p><p>继承了RunableFuture接口，再看看RunableFuture接口：</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107121427221.png" alt="image-20201107121427221"></p><p>又继承了Runable接口，我们看看Thread类：</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107121553598.png" alt="image-20201107121553598"></p><p>内部的构造方法将Runable注入进去了。</p><p>所以这儿的Callable接口会这样去实现一个多线程</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107123824424.png" alt="image-20201107123824424"></p></li><li><p>使用线程池的方式</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107124039766.png" alt="image-20201107124039766"></p></li></ol><h4 id="四种线程池"><a href="#四种线程池" class="headerlink" title="四种线程池"></a>四种线程池</h4><p>在Java线程池中，最顶级的接口是Executor，但是严格来说，Executor并不是一个线程池，只是一个工具人，真正的接口是ExecutorService</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107124330362.png" alt="image-20201107124330362"></p><ol><li>newCachedThreadPool：创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用他们。适用于执行短期异步任务的程序，可以提高性能。如果没有线程可以用，那么会创建一个新的线程放到池子中，移除那些有60秒未被使用的线程。因此长时间保持空闲的线程池不会使用任何资源</li><li>newFixedThreadPool：创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。</li><li>newScheduledThreadPool：可以安排在给定延迟后运行或者定期执行</li><li>newSingleThreadExecutor：返回一个线程池，这个池子里面只有一个线程，当线程发生异常或终止后会重启一个线程来代替。</li></ol><h4 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h4><blockquote><p>新建—就绪（Runable）–运行（Running）–阻塞（Blocked）–死亡（Dead）</p></blockquote><p>线程阻塞分三种：等待阻塞，同步阻塞，其他阻塞</p><ul><li>等待阻塞：执行线程的wait()方法，jvm会把这个线程放到等待队列里面</li><li>同步阻塞：当同步锁被其他线程占用时，jvm会把该线程放到锁池中</li><li>其他阻塞：执行Thread.sleep()或者join()方法，或者发出了IO请求，会把这个线程设置为阻塞状态</li></ul><p>线程死亡</p><ul><li>正常结束：run()方法或者call()方法执行结束之后</li><li>异常结束：抛出了一个未被捕获的Exception或者Error</li><li>调用stop：该方法容易导致死锁，不建议使用</li></ul><h4 id="终止线程的四种方式"><a href="#终止线程的四种方式" class="headerlink" title="终止线程的四种方式"></a>终止线程的四种方式</h4><ol><li>正常结束</li><li>使用退出标志</li><li>使用interrupt()方法<ul><li>线程处于阻塞状态，比如使用了sleep()，wait()。当调用interrupt()方法时，会抛出一个InterruptException异常，捕获异常后通过break来跳出这个异常。</li><li>线程未处于阻塞状态，使用isInterrupt()判断线程的中断标志来退出循环。和使用退出标志一个道理。</li></ul></li><li>使用stop()方法，不安全，容易导致死锁</li></ol><h4 id="内部方法区别"><a href="#内部方法区别" class="headerlink" title="内部方法区别"></a>内部方法区别</h4><p>sleep和wait的区别：</p><p>sleep方法属于Thread类，而Wait方法属于Object类</p><p>调用sleep方法，线程不会释放对象锁。调用wait方法，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用notify方法后本线程才进入对象锁定池准备获取对象进入运行状态</p><p>sleep方法导致了程序暂停执行指定的时间，但是监控状态依赖在执行，到了指定的时间又会恢复运行状态。</p><p>start和run的区别</p><p>start方法来启动线程，实现了多线程运行。无需等待run方法体代码执行完毕就可以直接继续执行下面的代码。</p><p>run称为线程体，包含了要执行的这个线程的内容，线程就进入了运行状态，开始运行run函数当中的代码。</p><h4 id="Java锁"><a href="#Java锁" class="headerlink" title="Java锁"></a>Java锁</h4><ol><li>乐观锁</li><li>悲观锁</li><li>自旋锁</li><li>Synchronized同步锁</li></ol><h4 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h4><p>全称：compare and swap/set  比较并交换，用的最多的就是在乐观锁中，总是认为自己可以完成操作</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java网络编程</title>
      <link href="2021/04/09/java-wang-luo-bian-cheng/"/>
      <url>2021/04/09/java-wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="Java网络编程"><a href="#Java网络编程" class="headerlink" title="Java网络编程"></a>Java网络编程</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><hr><p><img src="eg ./images/loading.gif" data-original="Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.assets/image-20201129134111905.png" alt="image-20201129134111905"></p><p><strong>计算机网络:</strong></p><p>计算机网络是指将<a href="https://baike.baidu.com/item/%E5%9C%B0%E7%90%86">地理</a>位置不同的具有独立功能的多台<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338">计算机</a>及其外部设备，通过通信线路连接起来，在<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3997">网络操作系统</a>，<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/6579078">网络管理软件</a>及<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/4438611">网络通信协议</a>的管理和协调下，实现<a href="https://baike.baidu.com/item/%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/233480">资源共享</a>和信息传递的计算机系统</p><p><strong>网络编程的目的</strong></p><p>传播信息，数据交互</p><h4 id="网络信息的要素"><a href="#网络信息的要素" class="headerlink" title="网络信息的要素"></a>网络信息的要素</h4><p>人工智能</p><p><strong>网络协议</strong></p><p><img src="eg ./images/loading.gif" data-original="Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.assets/image-20201129141703250.png" alt="image-20201129141703250"></p><p>小结：</p><ol><li>网络编程中有两个主要的问题</li></ol><ul><li>如何准确的定位到网络上的一台或者多台主机</li><li>找到主机后如何进行通信</li></ul><ol start="2"><li>网络编程中的要素</li></ol><ul><li>ip和端口号</li><li>网络通信协议</li></ul><ol start="3"><li>万物皆对象</li></ol><h4 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h4><p>ip:InetAddress</p><ul><li>唯一定位一台网络计算机</li><li>127.0.0.1：本机localhost</li><li>IP地址的分类<ul><li>ipv4/ipv6<ul><li>IPV4 127.0.0.1 四个字节组成 0-255 42个亿</li><li>IPV6  fe80::58f0:c13a:22c4:62bb%11 128位 8个无符号整数</li></ul></li><li>公网（互联网）-私网（局域网）<ul><li>192.168.x.x 这类基本上都是私有网络</li></ul></li></ul></li><li>域名：记忆ip问题<ul><li>ip:<a href="http://www.jd.com/">www.jd.com</a></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxy<span class="token punctuation">.</span>address<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>UnknownHostException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author Zxy * @Date 2020/11/29 20:07 * @Version 1.0 */</span><span class="token comment" spellcheck="true">// 测试IP</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInetAddress</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnknownHostException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InetAddress inetAddress1 <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress1<span class="token punctuation">)</span><span class="token punctuation">;</span>            InetAddress inetAddress2 <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress2<span class="token punctuation">)</span><span class="token punctuation">;</span>            InetAddress inetAddress3 <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 常用方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress2<span class="token punctuation">.</span><span class="token function">getCanonicalHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 规范的名字</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress2<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ip</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress2<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 域名，或者自己电脑的名字</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>端口表示计算机上的一个程序的进程</p><ul><li>不同的进程有不同的端口号！用来区分软件</li><li>被规定0-65535</li><li>TCP，UDP：65535*2  tcp：80，udp：80  单个协议下，端口号不能冲突</li><li>端口分类<ul><li>共有端口0-1023</li><li>http默认端口80</li><li>https默认端口443</li><li>ftp默认端口21</li><li>telent默认端口23</li><li>程序注册端口：1024-49151</li></ul></li></ul><h4 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h4><p>协议：约定，就好比我们现在说的是普通话。</p><p><strong>网络通信协议</strong>：速率，传输码率，代码结构，传输控制</p><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><p>客户端</p><p>服务器</p><p>等待完善</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合类源码解析</title>
      <link href="2021/04/09/java-ji-he-lei-yuan-ma-jie-xi/"/>
      <url>2021/04/09/java-ji-he-lei-yuan-ma-jie-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="Java集合类源码解析"><a href="#Java集合类源码解析" class="headerlink" title="Java集合类源码解析"></a>Java集合类源码解析</h3><p>Java集合分为Collection和Map两大类</p><ul><li><p>Collection接口</p><ul><li><p>List</p><ul><li><p>ArrayList：底层Object数组，查找快，增删慢，线程不安全。默认开辟长度是10，如果要扩容，规则是当前容量的50%</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107102051974.png" alt="image-20201107102051974"></p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107102220973.png" alt="image-20201107102220973"></p></li><li><p>Vector：底层Object数组。查找快，增删慢，线程安全，内部方法都用synchronized。效率低（插入新元素会复制整个数组到新的数组再删除之前的），很少有人用了，每次扩容增加一倍</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107102121493.png" alt="image-20201107102121493"></p></li><li><p>LinkedList：双向链表数据结构。查找数据只需要移动指针从前往后依次查找。不同步，线程不安全。插入的性能比ArrayList更好</p></li></ul></li><li><p>Set</p><ul><li><p>HashSet：无序排列，不允许重复。底层是HashMap，在添加元素时会使用map.put()方法进行添加。默认值是PRESENT。</p><ul><li><p>如何保证数据不重复：在添加元素时，会先去比较新增的这个元素的hashCode是否相等，再比较equals是否相等，如果相等，会覆盖掉旧的value</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107103242830.png" alt="image-20201107103242830"></p></li></ul></li><li><p>TreeSet：排列有序，不允许重复（和HashSet一样的原理）。底层是TreeMap。默认值也是PRESENT</p></li></ul></li><li><p>Queue接口：继承自Collection，用作队列</p></li></ul></li><li><p>Map</p><ul><li><p>HashMap：基于哈希表的Map接口的非同步实现，线程不安全的。当我们向map里面put元素时，会利用key的hashCode重新计算当前对象在元素中的下标。在存储时，如果有两个hash值相等，key相同的话，后者覆盖前者，不同的话，说明出现冲突，就将当前的key-value放在链表中。这种方式在jdk1.8对数据存储做了优化，当存储节点大于8个以后会将链表转成红黑树。</p><p>允许key和value都为null。不是线程安全的</p><p>jdk1.8之前：</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107104224934.png" alt="image-20201107104224934"></p><p>jdk1.8：</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107104248605.png" alt="image-20201107104248605"></p><p>不同之处：</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107104726970.png" alt="image-20201107104726970"></p></li><li><p>TreeMap：内部自带了CompareTo方法，所以是自动排序的，底层是二叉树</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107105019516.png" alt="image-20201107105019516"></p></li><li><p>LinkedHashMap：实现自HashMap，在遍历时，得到的值是最先插入的</p></li><li><p>HashTable：线程安全的，底层是哈希表结构，键不可以重复，值可以重复</p></li><li><p>ConcurrentHashMap：</p><p>1.8之前，和HashMap差不多，但是支持并发操作。整个ConcurrentHashMap由一个个的Segment组成（一段），所以又称为分段锁。Segment通过继承ReentrantLock来上锁，所以只要每次锁住的是Segment，就实现了全局的线程安全。默认是16个Segment。</p><p>在之后，放弃了Segment的操作，改用了Node+CAS+Synchronized来实现线程安全。只需要将Synchronized锁住当前链表和红黑树的首个节点，保证hash不冲突，就可以实现线程安全。</p><p><img src="eg ./images/loading.gif" data-original="Java%E9%9B%86%E5%90%88%E7%B1%BB%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.assets/image-20201107111244129.png" alt="image-20201107111244129"></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合类笔记</title>
      <link href="2021/04/09/java-ji-he-lei-fu-xi-bi-ji/"/>
      <url>2021/04/09/java-ji-he-lei-fu-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="集合简介"><a href="#集合简介" class="headerlink" title="集合简介"></a>集合简介</h3><p>什么是集合（Collection）？集合就是“由若干个确定的元素所构成的整体”。例如，5只小兔构成的集合：</p><pre class=" language-ascii"><code class="language-ascii">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐│   (\_(\     (\_/)     (\_/)     (\_/)      (\(\   │    ( -.-)    (•.•)     (>.<)     (^.^)     (='.')│  C(")_(")  (")_(")   (")_(")   (")_(")   O(_")")  │└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</code></pre><p>在数学中，我们经常遇到集合的概念。例如：</p><ul><li>有限集合：<ul><li>一个班所有的同学构成的集合；</li><li>一个网站所有的商品构成的集合；</li><li>…</li></ul></li><li>无限集合：<ul><li>全体自然数集合：1，2，3，……</li><li>有理数集合；</li><li>实数集合；</li><li>…</li></ul></li></ul><p>为什么要在计算机中引入集合呢？这是为了便于处理一组类似的数据，例如：</p><ul><li>计算所有同学的总成绩和平均成绩；</li><li>列举所有的商品名称和价格；</li><li>……</li></ul><p>在Java中，如果一个Java对象可以在内部持有若干其他Java对象，并对外提供访问接口，我们把这种Java对象称为集合。很显然，Java的数组可以看作是一种集合：</p><pre><code>String[] ss = new String[10]; // 可以持有10个String对象ss[0] = "Hello"; // 可以放入String对象String first = ss[0]; // 可以获取String对象</code></pre><p>既然Java提供了数组这种数据类型，可以充当集合，那么，我们为什么还需要其他集合类？这是因为数组有如下限制：</p><ul><li>数组初始化后大小不可变；</li><li>数组只能按索引顺序存取。</li></ul><p>因此，我们需要各种不同类型的集合类来处理不同的数据，例如：</p><ul><li>可变大小的顺序链表；</li><li>保证无重复元素的集合；</li><li>…</li></ul><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>Java标准库自带的<code>java.util</code>包提供了集合类：<code>Collection</code>，它是除<code>Map</code>外所有其他集合类的根接口。Java的<code>java.util</code>包主要提供了以下三种类型的集合：</p><ul><li><code>List</code>：一种有序列表的集合，例如，按索引排列的<code>Student</code>的<code>List</code>；</li><li><code>Set</code>：一种保证没有重复元素的集合，例如，所有无重复名称的<code>Student</code>的<code>Set</code>；</li><li><code>Map</code>：一种通过键值（key-value）查找的映射表集合，例如，根据<code>Student</code>的<code>name</code>查找对应<code>Student</code>的<code>Map</code>。</li></ul><p>Java集合的设计有几个特点：一是实现了接口和实现类相分离，例如，有序表的接口是<code>List</code>，具体的实现类有<code>ArrayList</code>，<code>LinkedList</code>等，二是支持泛型，我们可以限制在一个集合中只能放入同一种数据类型的元素，例如：</p><pre><code>List&lt;String&gt; list = new ArrayList&lt;&gt;(); // 只能放入String类型</code></pre><p>最后，Java访问集合总是通过统一的方式——迭代器（Iterator）来实现，它最明显的好处在于无需知道集合内部元素是按什么方式存储的。</p><p>由于Java的集合设计非常久远，中间经历过大规模改进，我们要注意到有一小部分集合类是遗留类，不应该继续使用：</p><ul><li><code>Hashtable</code>：一种线程安全的<code>Map</code>实现；</li><li><code>Vector</code>：一种线程安全的<code>List</code>实现；</li><li><code>Stack</code>：基于<code>Vector</code>实现的<code>LIFO</code>的栈。</li></ul><p>还有一小部分接口是遗留接口，也不应该继续使用：</p><ul><li><code>Enumeration&lt;E&gt;</code>：已被<code>Iterator&lt;E&gt;</code>取代。</li></ul><p><strong>代码展示</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> collectionlearn<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author Zxy * @Date 2021/2/16 18:05 * @Version 1.0 */</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Collection接口的使用 * 1） 添加元素 * 2） 删除元素 * 3） 遍历元素 * 4） 判断 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建集合</span>        Collection collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// * 1） 添加元素</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"苹果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"梨子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"橘子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"榴莲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"元素个数："</span><span class="token operator">+</span>collection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// * 2） 删除元素</span>        <span class="token comment" spellcheck="true">// collection.remove("苹果");</span>        <span class="token comment" spellcheck="true">// collection.clear();</span>        <span class="token comment" spellcheck="true">// * 3） 遍历元素</span>        <span class="token comment" spellcheck="true">// 3.1使用增强for</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> collection<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3.2 使用迭代器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========使用迭代器输出========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator iterator <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String next <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 3.3 使用forEach以及lambda表达式循环</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========使用forEach输出========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>c<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// * 4） 判断</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"西瓜"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射面试题</title>
      <link href="2021/04/09/java-fan-she-mian-shi-ti/"/>
      <url>2021/04/09/java-fan-she-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="Java反射面试题"><a href="#Java反射面试题" class="headerlink" title="Java反射面试题"></a>Java反射面试题</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>在运行状态中，对于任意一个类，都能知道这个类的所有的属性和方法；并且对于任意一个对象，都能调用它的任意一个方法；</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>逆向代码 ，例如反编译</li><li>与注解相结合的框架 例如Spring</li><li>动态生成类框架 例如Gson</li></ul><h4 id="反射API"><a href="#反射API" class="headerlink" title="反射API"></a>反射API</h4><p>Class类：可以获取类的属性，方法等信息</p><p>Field类：可以用来获取和设置类中的属性值</p><p>Method类：表示类的方法，可以用来获取类中的方法信息或者执行方法</p><p>Constructor：表示类的构造方法</p><h4 id="获取Class对象的3种方法"><a href="#获取Class对象的3种方法" class="headerlink" title="获取Class对象的3种方法"></a>获取Class对象的3种方法</h4><blockquote><p>Person p = new Person()</p><p>p.getClass()</p><hr><p>Person.class</p><hr><p>Class.forName(“类的全路径”)</p></blockquote><h4 id="创建对象的两种方法"><a href="#创建对象的两种方法" class="headerlink" title="创建对象的两种方法"></a>创建对象的两种方法</h4><p>Class对象的newInstance()</p><ul><li>该方法要求该Class对象对应的类有默认的空构造器</li></ul><p>调用Constructor对象的newInstance()</p><ul><li><p>先使用Class对象获取指定的Constructor对象，在调用对象的newInstance()方法来创建Class对象对应类的实例，通过这种方法可以选定构造方法创建实例</p><p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201107134827802.png" alt="image-20201107134827802"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常面试题</title>
      <link href="2021/04/09/java-yi-chang-mian-shi-ti/"/>
      <url>2021/04/09/java-yi-chang-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="Java异常面试题"><a href="#Java异常面试题" class="headerlink" title="Java异常面试题"></a>Java异常面试题</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>某个方法不能按照正常的途径完成任务，就可以通过另一种路径退出方法。在这种情况下会抛出一个封装了错误信息的对象，此时这个方法会立即退出并且给不返回任何值。调用了这个方法的其他代码也无法执行</p><h4 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h4><p>Throwable时Java语言中所有错误或者异常的超类。下一层为Error和Exception；</p><ol><li>Error：Java运行时系统的内部错误和资源耗尽错误。应用程序不会抛出该类对象。这样的错误无法拯救</li><li>Exception（RuntimeException、CheckedException）<ul><li>RuntimeException：这种就是程序员代码错了</li><li>CheckedException：外部错误，发生在编译阶段，一般都用try–catch捕获</li></ul></li></ol><h4 id="Throw和Throws的区别"><a href="#Throw和Throws的区别" class="headerlink" title="Throw和Throws的区别"></a>Throw和Throws的区别</h4><ol><li>throws用在函数上，后面跟的时异常类，可以跟多个</li><li>throw用在函数内，后面跟的是异常对象</li></ol><ol><li>throws用来声明异常，让调用者只知道该功能可能出现的问题，可以给出预先处理的方式</li><li>throw抛出具体的问题对象，执行到throw，功能就已经结束了</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构--绪论</title>
      <link href="2021/04/09/shu-ju-jie-gou-xu-lun-yi-qie-de-kai-duan-du-shi-cong-ji-chu-kai-shi-de/"/>
      <url>2021/04/09/shu-ju-jie-gou-xu-lun-yi-qie-de-kai-duan-du-shi-cong-ji-chu-kai-shi-de/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><img src="eg ./images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201209140929395.png" alt="在这里插入图片描述"></p><p>最近也是在忙着答辩的事情，不过总算，最头痛的事情搞定了，也就有时间闲下来好好的复习一下以前的东西了。<br>感谢程杰老师的大话数据结构，让我有了一个学习的方向，不至于摸爬滚打而找不到方向。</p><p>数据结构是程序员日常开发中必不可少的，如果不学好的话，你就只有天天和产品经理吵架，和开发吵架，和任何人吵架，吵架的源头就只有一个，你数据结构怎么学的，这么垃圾（开个玩笑）</p><p>由此可见，数据结构还是很重要的，不然的话，你不学好，以后哪儿的机会变成高富帅，迎娶白富美。</p><p>话不多说，开始正题。<br>这一章不写代码，主要记录一些概念东西（如果你们想看代码，请关注我，虽然我也写不出好的代码。。。。。）</p><h3 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h3><p>  我们每天都在设计一个程序。sout谁都会写，for遍历也都懂。但是这里面的原理谁又知道呢（有人说，我看源码呀）<br>  我们总是在享受着别人给我们带来的果实，这也就注定了，我们的思维是跟着别人走。<br>要想设计一个好的程序，数据结构+算法是必不可少的东西。</p><p>那么现在的问题就是，什么是数据结构，他是干嘛的，怎么用。这就回到了哲学的三大问题：我是谁，从哪儿来，到哪儿去<br><img src="eg ./images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201209105402590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU4MTI4OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>简而言之：<strong>程序设计=数据结构+算法</strong></p><h3 id="数据结构起源"><a href="#数据结构起源" class="headerlink" title="数据结构起源"></a>数据结构起源</h3><p>最开始提出这个概念的是1968年的一个叫高德纳的美国教授，写了一本叫《计算机程序设计艺术》，在第一卷《基本算法》中，较为系统的阐述了数据的逻辑结构和存储结构以及操作，开创了数据结构的课程体系。至此，程序员的折磨就开始了。<br>如图：<br><img src="eg ./images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201209105844941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU4MTI4OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>之后呢，在70年代初期，开始出现了大型的程序，这时候，效率就成了一个很重要的指标，所以，设计一个好的数据结构和算法，也就成了一种必然趋势。</p><p>在现实中，我们更多的不是去处理1+1这种问题，而是去处理一些批量的数据，这些数据是怎么存放的，这就是我们需要去研究的话题。</p><blockquote><p>数据结构：是一门研究非数值计算的程序设计问题中的操作对象，以及他们之间的关系和操作等相关问题的学科（总结来自程杰老师）</p></blockquote><h3 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h3><p>要想知道数据结构是什么，我们首先得去知道，数据和结构是什么；</p><blockquote><p>数据结构=数据+结构</p></blockquote><p>也就是说，我们先去研究数据，再去把这些数据组成一定得样子（结构），自然而然的成了数据结构</p><p><strong>数据</strong></p><blockquote><p>数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别并输入给计算机处理的符号集合</p></blockquote><p>这样说可能还是有人觉得头痛，说直白点，空气粒子组成了空气，一个个的人组成了一群人，这样就懂了吧。<br>以后见了面你就可以跟别人说，你是一个数据，看人家会不会揍你</p><p>但是，你理解可以去这么理解，用的话不能这么去用，我们这儿说的数据，是一个抽象性的概念，其实也就是符号，比如，你的for循环。所以这些符号必须满足两个条件：</p><ul><li>可以输入到计算机中</li><li>能被计算机程序处理</li></ul><p><strong>数据元素</strong></p><blockquote><p>数据元素：是组成数据的，有一定意义的基本单位，在计算机中通常作为整体处理。也被称之为记录</p></blockquote><p>比如，在人类中，人就是数据元素，在动物中，鸡鸭鱼这些就是数据元素；</p><p><strong>数据项</strong></p><blockquote><p>数据项：一个数据元素可以由瑞刚额数据项组成；数据项是不可分割的最小单位</p></blockquote><p>举个例子：组成人这样的数据元素就是由耳朵，鼻子，眼睛这样的数据项组成<br>我们在真正讨论问题的时候，主要还是数据元素，而不是去讨论数据项。你看个电影不可能一直去研究别人演员撒。</p><p><strong>数据对象</strong></p><blockquote><p>数据对象：是性质相同的数据元素的集合，是数据的子集</p></blockquote><p>什么是性质相同？就比如说男人，都是数据元素，他们的性质有哪些？好色怕鬼爱看腿（咳咳）<br><img src="eg ./images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201209111418139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU4MTI4OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>人都有生日吧，都有年龄吧，都有姓名吧，这就是他们的性质。<br>为什么又说是性质相同的数据元素的集合呢？你在定义一个类的时候，你会去根据某一个人去定义吗？不会吧，你肯定是根据总体的特征去定义，比如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String addr<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你肯定是这样去定义，而不是：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Zhangsan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> money<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>懂了吧。</p><p><strong>结构</strong><br>简单理解就是关系。比如分子结构，就是说组成分子的原子之间的排列方式。<br><code>在现实世界中，所有的数据元素都不是独立的，二十有特定的关系连接在一起的，我们就将这些关系称之为结构</code><br>比如你和你的亲戚，一方有难，八方支援的道理总得知道。</p><p><strong>数据结构</strong></p><blockquote><p>是相互之间存在一种或多种特地给关系的数据元素的集合</p></blockquote><p>这下你看完了前面的，就知道了数据结构是啥了吧。<br>所以，要想编写出一个好的程序，必须分待处理对象的特性以及个处理对象之间存在的关系。这也就是我们为什么要学习数据结构的意义。</p><p>我们提到了很多次的关系，到底是什么样的关系，我们往下看看？</p><h3 id="逻辑结构与物理结构"><a href="#逻辑结构与物理结构" class="headerlink" title="逻辑结构与物理结构"></a>逻辑结构与物理结构</h3><p>按照我们看待的方式不同，分为逻辑结构和物理结构</p><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><blockquote><p>逻辑结构：是指数据对象中数据元素之间的相互关系</p></blockquote><p>这其实也是我们最需要关注的东西；逻辑结构又分以下四种：</p><ol><li><p>集合结构</p><blockquote><p>集合结构中的数据元素除了同属于一个集合外，他们之间没有任何关系。各个数据元素是平等的，他们的共同属性就是同属于一个集合。<br>就比如说，你和你的大学同学都处于同一个教室，但是你和他们并不是很熟<br>在数据结构中，集合就很类似于数学当中的集合，长这样：<br><img src="eg ./images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201209133324134.png" alt="在这里插入图片描述"></p></blockquote></li><li><p>线性结构</p><blockquote><p>这个很好理解，就是一对一的关系，就类似于排成一条线。长这样儿：<br><img src="eg ./images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201209133431669.png" alt="在这里插入图片描述"></p></blockquote></li><li><p>树形结构</p><blockquote><p>数据元素就像一棵树一样摆放，就注定了，数据元素是一对多的形式<br><img src="eg ./images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201209133521539.png" alt="在这里插入图片描述"></p></blockquote></li><li><p>图形结构</p><blockquote><p>元素与元素之间用线连接，如果是指向某元素，就用方向箭头连接。同处于一个集合内，摆放顺序是杂乱无章的<br><img src="eg ./images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201209133747597.png" alt="在这里插入图片描述"></p></blockquote></li></ol><p>所以我们也不难看出，逻辑结构是针对具体问题，为了解决问题。所以，在这个基础上，我们必须选择一个合适的数据结构。</p><h4 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h4><p>我们上面聊完了逻辑结构，也清楚了大致的属性是什么。我们再来看看另一个——-物理结构</p><p>物理结构好像在其他的书里面也叫做是存储结构，但是都差不多，意思都是相近的。</p><blockquote><p>物理结构：是指数据的逻辑结构在计算机中的存储形式</p></blockquote><p>我们前面知道，数据是数据元素的集合，那么根据物理结构的定义，实际上就是怎么把数据元素存储在计算机的存储器中存储器主要是针对内存而言的，比如说硬盘，光盘之类的。</p><p>数据的存储结构应正确的反应出数据元素之间的逻辑关系，这才是最关键的。具体怎么去存储数据元素之间的逻辑关系才是物理结构的重难点。</p><p>数据元素存储形式有两种：顺序存储和链式存储</p><ol><li>顺序存储<blockquote><p>把数据元素存放在地址连续的存储单元里，其数据的逻辑关系和物理关系是一致的。<br><img src="eg ./images/loading.gif" data-original="https://img-blog.csdnimg.cn/20201209134706813.png" alt="在这里插入图片描述"></p></blockquote></li></ol><blockquote><p>就好比说，你去食堂吃饭，挨个排队，谁也别插队。<br>在我们当初学计算机的时候，当你想创建一个数组，那么计算机就会根据你指定的长度开辟出一个空间，挨个存储<br>2. 链式存储结构<br>如果世间万物都是这样的有顺序那么就好了。但是呢，怎么可能；<br>在实际上，总是会有人插队，也总是会有人不排了，突然就走了。如果我们还是用顺序存储，无疑是浪费空间的。所以我们就选择了链式存储。<br> 链式存储结构：把数据元素存放在任意的存储单元里，可以是连续的，也可以是不连续的<br> 这样的话，数据的存储关系并不能反映出逻辑关系，因为都是杂乱无章的。所以，我们就需要一个索引去指向他，就类似于指针的作用。每个元素都会有自己的地址：<br> <img src="eg ./images/loading.gif" data-original="https://img-blog.csdnimg.cn/2020120913514623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU4MTI4OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><p>逻辑结构是面向数据的，物理结构是面向计算机的。所以他的基本目标就是将数据存储在计算机中。</p><h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><p>我们在看抽象数据类型的时候，先来看看数据类型是什么：</p><blockquote><p>数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称<br>在Java中，有int string boolean等</p></blockquote><p>当初设计计算机语言的人为什么要设计数据类型呢？<br>比如说，大家都需要买房子。自然而然，有人想买大房子，有人想买小房子，还有的人买不起房子（比如我）<br>于是呢，就出来了各式各样的房子，比如别墅，小户型等等。<br>同样的道理，计算机也不是无穷大的，比如你只想计算1+1这样的简单加减法，就不需要那么大的内存空间。所以啊，计算机的研究者们就考虑，细分出具体的数据类型出来。</p><p>再者，因为计算机有不同的操作系统，我们不可能为每一种计算机都编写一套计算机语言。我们就可以把这些共同的属性给抽取出来，作为一种抽象体。</p><blockquote><p>抽象是指抽取出事物具有的普遍性的性质</p></blockquote><p>抽象是一种思维，而不是一种具体的形式。</p><blockquote><p>抽象数据类型：是指一个数学模型及定义在该模型上的一组操作。<br>抽象的数据仍然是定义的逻辑关系，而与事物的本身无关。</p></blockquote><p>事实上，抽象数据类型体现了程序设计中问题分解，抽象和信息隐藏的特性。<br>抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型。并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。<br>比如Java中，你会先去定义一个模型层，用来泛指某一类模型。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>所以，数据结构就是相互存在一种或者多种特定关系的数据元素的集合。。同样是结构，却有不同的表现形式。</p><ul><li>逻辑结构</li></ul><ol><li>集合结构</li><li>线性结构</li><li>树形结构</li><li>图形结构</li></ol><ul><li>物理结构</li></ul><ol start="5"><li>顺序存储结构</li><li>链式存储结构</li></ol><p>这些都只是概念性的东西，真正写代码的时候，也是我们需要考虑进去的。</p><p>如果对你有帮助，请一键三连。不胜感激。<br>个人一点小总结，拉不上台面，希望大佬们留下宝贵的意见，我会加以改进。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>liunx虚拟机安装</title>
      <link href="2021/04/09/linux/"/>
      <url>2021/04/09/linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="1-Linux的引言"><a href="#1-Linux的引言" class="headerlink" title="1.Linux的引言"></a>1.Linux的引言</h2><p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于<code>POSIX和Unix</code>的<code>多用户</code>、<code>多任务</code>、<code>支持多线程和多CPU的操作系统</code>。伴随着互联网的发展，<code>Linux得到了来自全世界软件爱好者、组织、公司的支持</code>。它除了在<code>服务器操作系统</code>方面保持着强劲的发展势头以外，在个人电脑、嵌入式系统上都有着长足的进步。目前Linux存在着许多不同的Linux发行版本，<code>但它们都使用了Linux内核</code>。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、台式计算机。</p><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191011200827437.png" alt="image-20191011200827437"></p><hr><h2 id="2-Linux的诞生"><a href="#2-Linux的诞生" class="headerlink" title="2.Linux的诞生"></a>2.Linux的诞生</h2><p>20世纪80年代，计算机硬件的性能不断提高，PC的市场不断扩大，当时可供计算机选用的操作系统主要有Unix、DOS和MacOS这几种。Unix价格昂贵，不能运行于<a href="https://baike.baidu.com/item/PC/107">PC</a>；<a href="https://baike.baidu.com/item/DOS/32025">DOS</a>显得简陋，且源代码被软件厂商严格保密；</p><p><a href="https://baike.baidu.com/item/MacOS/8654551">MacOS</a>是一种专门用于苹果计算机的操作系统。此时，计算机科学领域迫切需要一个更加完善、强大、廉价和完全开放的操作系统。由于供教学使用的典型操作系统很少，因此当时在荷兰当教授的美国人AndrewS.Tanenbaum编写了一个操作系统，名为<a href="https://baike.baidu.com/item/MINIX/7106045">MINIX</a>，为了向学生讲述操作系统内部工作原理。MINIX虽然很好，但只是一个用于教学目的的简单操作系统，而不是一个强有力的实用操作系统，然而最大的好处就是公开源代码。<code>全世界学计算机的学生都通过钻研MINIX源代码来了解电脑里运行的MINIX操作系统，芬兰赫尔辛基大学大学二年级的学生Linus Torvalds就是其中一个，在吸收了MINIX精华的基础上，Linus于1991年写出了属于自己的Linux操作系统，版本为Linux0.01，是Linux时代开始的标志</code>。<code>他利用Unix的核心，去除繁杂的核心程序，改写成适用于一般计算机的x86系统，并放在网络上供大家下载，1994年推出完整的核心Version1.0，至此，Linux逐渐成为功能完善、稳定的操作系统，并被广泛使用。</code></p><blockquote><p><code>总结</code>:Linux出现于<code>1991年</code>，是由<code>芬兰赫尔辛基大学学生</code>,<code>Linus Torvalds</code>和后来加入的众多爱好者共同开发完成。</p></blockquote><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191011201019566.png" alt="image-20191011201019566"></p><hr><h2 id="3-Linux的特点"><a href="#3-Linux的特点" class="headerlink" title="3.Linux的特点"></a>3.Linux的特点</h2><h3 id="3-1-完全免费"><a href="#3-1-完全免费" class="headerlink" title="3.1 完全免费"></a>3.1 完全免费</h3><p>Linux是一款免费的操作系统，用户可以通过网络或其他途径免费获得，并可以任意修改其<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81/3969">源代码</a>。这是其他的操作系统所做不到的。正是由于这一点，来自全世界的无数<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E5%91%98/62748">程序员</a>参与了Linux的修改、编写工作，程序员可以根据自己的兴趣和灵感对其进行改变，这让Linux吸收了无数程序员的精华，不断壮大。</p><h3 id="3-2-多用户、多任务"><a href="#3-2-多用户、多任务" class="headerlink" title="3.2 多用户、多任务"></a>3.2 多用户、多任务</h3><p>Linux支持多用户，各个用户对于自己的文件设备有自己特殊的权利，保证了各用户之间互不影响。<code>多任务</code>则是现在电脑最主要的一个特点，Linux可以使多个程序同时并独立地运行。同时``丰富的网络功能，可靠的系统安全，良好的可移植性，具有标准兼容性，出色的速度性能`。</p><hr><h2 id="4-Linux之Cent-OS"><a href="#4-Linux之Cent-OS" class="headerlink" title="4.Linux之Cent OS"></a>4.Linux之Cent OS</h2><h3 id="4-1-centos-引言"><a href="#4-1-centos-引言" class="headerlink" title="4.1 centos 引言"></a>4.1 centos 引言</h3><p><code>CentOS（Community Enterprise Operating System，中文意思是社区企业操作系统）是Linux发行版之一</code>，它是来自于Red Hat Enterprise Linux依照<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81/114160">开放源代码</a>规定释出的源代码所编译而成。由于出自同样的<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81/3587471">源代码</a>，因此有些要求高度稳定性的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8/100571">服务器</a>以CentOS替代商业版的[Red Hat](<a href="https://baike.baidu.com/item/Red">https://baike.baidu.com/item/Red</a> Hat) Enterprise Linux使用。两者的不同，在于<strong>CentOS完全开源</strong>。</p><h3 id="4-2-centos-和-readheat区别"><a href="#4-2-centos-和-readheat区别" class="headerlink" title="4.2 centos 和 readheat区别"></a>4.2 centos 和 readheat区别</h3><p>目前的Linux操作系统主要应用于生产环境，<code>主流企业的Linux系统仍旧是RedHat或者CentOS</code>,他们出自于同样的源代码,但centos完全免费。其独有的yum命令支持在线升级，可以即时更新系统，不像RedHat 那样需要花钱购买支持服务！</p><hr><h2 id="5-安装-Cent-OS"><a href="#5-安装-Cent-OS" class="headerlink" title="5.安装 Cent OS"></a>5.安装 Cent OS</h2><h3 id="5-1-环境准备"><a href="#5-1-环境准备" class="headerlink" title="5.1 环境准备"></a>5.1 环境准备</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 环境要求:</span><span class="token code keyword">        1. windows7+</span><span class="token code keyword">        2. VMware Workstation8+,</span><span class="token code keyword">        3. CentOS系统(镜像)</span></code></pre><h3 id="5-2-安装Cent-OS"><a href="#5-2-安装Cent-OS" class="headerlink" title="5.2 安装Cent OS"></a>5.2 安装Cent OS</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.下载centos </span></code></pre><blockquote><p><a href="https://www.centos.org/">官网</a>:<a href="https://www.centos.org/">https://www.centos.org/</a></p><p><a href="http://isoredirect.centos.org/centos/7/isos/x86_64/">官网的下载地址</a>:<a href="http://isoredirect.centos.org/centos/7/isos/x86_64/">http://isoredirect.centos.org/centos/7/isos/x86_64/</a></p></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.第一步:打开VMware Workstation</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191011204617583.png" alt="image-20191011204617583"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 2.选择菜单File的第一项新建虚拟机</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191011204734492.png" alt="image-20191011204734492"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.选择自定义虚拟机安装</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191011204806260.png" alt="image-20191011204806260"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 4.选择下一步</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/640-20191011204836520.jpeg" alt="img"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 5. 虚拟机设置之后安装系统</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/640-20191011204924175.jpeg" alt="img"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 6.选择虚拟机安装系统以及版本</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191011204948492.png" alt="image-20191011204948492"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 7.选择虚拟机名称与位置</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191011205013122.png" alt="image-20191011205013122"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 8.设置处理器数</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191011205034829.png" alt="image-20191011205034829"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 9.设置虚拟机内存</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191011205101094.png" alt="image-20191011205101094"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 10.选择网络模式</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191011205123751.png" alt="image-20191011205123751"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 11.选择io总线 下一步</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191011205152854.png" alt="image-20191011205152854"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 12.选择新建硬盘</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191011205218692.png" alt="image-20191011205218692"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 13.选择硬盘类型</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/640.png" alt="img"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 14.拆分硬盘</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/640-20191011205308573.jpeg" alt="img"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 15.设置磁盘位置</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/640-20191011205334834.png" alt="img"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 16.创建完成</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/640-20191011205358801.jpeg" alt="img"></p><hr><h2 id="6-Linux中目录结构"><a href="#6-Linux中目录结构" class="headerlink" title="6.Linux中目录结构"></a>6.Linux中目录结构</h2><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191011205611690.png" alt="image-20191011205611690"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 目录结构    </span><span class="token code keyword">    bin  (binaries)存放二进制可执行文件                                                                                                     [重点]</span><span class="token code keyword">    sbin  (super user binaries)存放二进制可执行文件，只有root才能访问</span><span class="token code keyword">    etc (etcetera)存放系统配置文件                                                                                                            [重点]</span><span class="token code keyword">    usr  (unix shared resources)用于存放共享的系统资源                                                                      [重点]</span><span class="token code keyword">    home 存放用户文件的根目录                                                                                                                         [重点]</span><span class="token code keyword">    root  超级用户目录                                                                                                                               [重点]</span><span class="token code keyword">    dev (devices)用于存放设备文件</span><span class="token code keyword">    lib  (library)存放跟文件系统中的程序运行所需要的共享库及内核模块</span><span class="token code keyword">    mnt  (mount)系统管理员安装临时文件系统的安装点</span><span class="token code keyword">    boot 存放用于系统引导时使用的各种文件</span><span class="token code keyword">    tmp  (temporary)用于存放各种临时文件                                                                                               [重点]</span><span class="token code keyword">    var  (variable)用于存放运行时需要改变数据的文件</span></code></pre><hr><h2 id="7-Linux中常用指令"><a href="#7-Linux中常用指令" class="headerlink" title="7. Linux中常用指令"></a>7. Linux中常用指令</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Linux中命令格式:</span>    <span class="token code keyword">        命令  -选项  参数    如:  ls -l /usr </span></code></pre><blockquote><p><code>注意:在linux中命令严格区分大小写</code></p></blockquote><h3 id="7-1-ls-命令"><a href="#7-1-ls-命令" class="headerlink" title="7.1 ls 命令"></a>7.1 ls 命令</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> ls  显示文件和目录列表    (list)</span><span class="token code keyword">    常用参数:  </span><span class="token code keyword">        -l (long)     长格式显示文件和目录信息</span><span class="token code keyword">        -a (all)     显示所有文件和目录(包含隐藏文件和目录)</span><span class="token code keyword">        -R         递归显示指定目录下的文件清单，即会显示指定目录分支内各子目录中的文件清单。</span></code></pre><pre class=" language-shell"><code class="language-shell"># 0. ls (查看目录下文件和目录)[root@localhost ~]# lsaa  aa.txt# 1. ls -l (长格式展示文件)[root@localhost ~]# ls -l总用量 60drwxrwxr-x      2   user1  user1    4096    Aug 17 09:10 abc- rw- r-- r--    1   user1  user1    17     Aug 17 09:04 host.conf- rw- r-- r--    1   user1  user1    38450  Aug 17 09:04 php.ini`长格式含义:`文件类型 文件权限   链接数  属主    属组    大小   日期   时间    文件名d     rwxrwxr-x     2     user1  user1 4096  Aug 17 09:10  abc# 2. ls -a (显示所有文件)[root@localhost ~]# ls -a.   aa      .bash_history  .bash_profile  .cshrc  .tcshrc..  aa.txt  .bash_logout   .bashrc        .pki    .viminfo# 3. ls -R (递归显示文件)[root@localhost ~]# ls -R.:aa  aa.txt./aa:</code></pre><h3 id="7-2-操作文件命令-重点"><a href="#7-2-操作文件命令-重点" class="headerlink" title="7.2 操作文件命令[重点]"></a>7.2 操作文件命令[重点]</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.cd 用来切换目录</span><span class="token title important"><span class="token punctuation">#</span> 1.pwd 显示当前工作目录（print working directory）</span><span class="token title important"><span class="token punctuation">#</span> 2.touch 创建空文件         </span><span class="token title important"><span class="token punctuation">#</span> 3.mkdir 创建目录（make directoriy）</span><span class="token code keyword">            -p 父目录不存在情况下先生成父目录 （parents）            </span><span class="token title important"><span class="token punctuation">#</span> 4.cp 复制文件或目录（copy）</span><span class="token code keyword">      cp  文件名    目录   复制文件到指定目录中</span><span class="token code keyword">      cp  -r 目录名    目录   复制指定目录到指定目录中</span><span class="token code keyword">            -r 递归处理，将指定目录下的文件与子目录一并拷贝（recursive）     </span><span class="token title important"><span class="token punctuation">#</span> 5.mv 移动文件或目录、文件或目录改名（move）</span><span class="token code keyword">            mv 文件名    新文件名      文件改名</span><span class="token code keyword">            mv 文件名    目录名         文件移动</span><span class="token code keyword">            mv 目录名    不存在目录名  目录改名   </span><span class="token code keyword">      mv 目录名      已存在目录名  目录移动</span><span class="token title important"><span class="token punctuation">#</span> 6.rm 删除文件（remove）</span><span class="token code keyword">            -r 同时删除该目录下的所有文件（recursive）</span><span class="token code keyword">            -f 强制删除文件或目录（force）</span><span class="token title important"><span class="token punctuation">#</span> 7.rmdir 删除空目录（remove directoriy）</span><span class="token title important"><span class="token punctuation">#</span> 8.cat 显示文本文件内容 （catenate） 用来展示少量内容</span><span class="token title important"><span class="token punctuation">#</span> 9.more、less 分页显示文本文件内容   退出用q退出</span><span class="token title important"><span class="token punctuation">#</span> 10.head、tail查看文本中开头或结尾部分的内容</span><span class="token code keyword">        head  -n  5  a.log 查看a.log文件的前5行</span><span class="token title important"><span class="token punctuation">#</span> 11.tail  -f  b.log 循环读取（fellow）</span><span class="token title important"><span class="token punctuation">#</span> 12.echo 输出命令</span><span class="token code keyword">            echo   I love baby                                说明:用来向屏幕输出一句话</span><span class="token code keyword">            echo I Love baby  >>  aa.txt            说明:将这段内容输入到 文件中</span></code></pre><h3 id="7-3-网络相关命令"><a href="#7-3-网络相关命令" class="headerlink" title="7.3 网络相关命令"></a>7.3 网络相关命令</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.ip addr 查看IP地址</span><span class="token code keyword">        ip a  简化写法</span><span class="token title important"><span class="token punctuation">#</span> 2.ping 测试网络连通性</span><span class="token code keyword">        ping 192.168.0.1</span></code></pre><h3 id="7-4-tar命令-windows-winrar-好压"><a href="#7-4-tar命令-windows-winrar-好压" class="headerlink" title="7.4 tar命令(windows winrar 好压)"></a>7.4 tar命令(windows winrar 好压)</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> tar 命令   </span><span class="token code keyword">        -c 建立一个压缩文件的参数指令（create）</span><span class="token code keyword">        -x 解开一个压缩文件的参数指令（extract）</span><span class="token code keyword">        -z 是否需要用 gzip 压缩  </span><span class="token code keyword">        -v 压缩的过程中显示文件（verbose）</span><span class="token code keyword">        -f 使用档名，在 f 之后要立即接档名（file）</span><span class="token code keyword">`通常组合使用:`</span><span class="token code keyword">            tar -cvf aaa.tar file1.txt file2.txt                     将file1和2打包成aaa.tar</span><span class="token code keyword">            </span><span class="token code keyword">            tar -zcvf aaa.tar.gz file1.txt file2.txt             将file1和2打包成aaa.tar并压缩</span><span class="token code keyword">            tar -zxvf aaa.tar.gz file1.txt file2.txt             将aaa.tar.gz解压</span></code></pre><h3 id="7-5-systemctl-服务命令"><a href="#7-5-systemctl-服务命令" class="headerlink" title="7.5 systemctl 服务命令"></a>7.5 systemctl 服务命令</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> systemctl </span>  systemctl status|start|stop|restart 服务名  mysqld firewalld(防火墙) network(网络)<span class="token code keyword">    systemctl status 服务名          说明:查看某个服务的运行状态</span><span class="token code keyword">    systemctl start 服务名                     说明:启动某个服务</span><span class="token code keyword">    systemctl restart 服务名                 说明:重启某个服务</span><span class="token code keyword">    systemctl stop 服务名                         说明:停止某个服务</span></code></pre><h3 id="7-6-进程相关命令"><a href="#7-6-进程相关命令" class="headerlink" title="7.6 进程相关命令"></a>7.6 进程相关命令</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.ps 询在当前控制台上运行的进程</span><span class="token code keyword">        ps  -aux   说明:查询系统中所有运行的进程，包括后台进程，其中参数a是所有进程，参数x包括不占用控制台的进程，参数u显示用户。</span><span class="token code keyword">        ps  -ef         说明:查询系统中所有运行的进程，包括后台进程，而且可以显示出每个进程的父进程号。</span><span class="token code keyword">    ps -aux|grep 进程 服务名  关键字 tomcat  重点</span><span class="token title important"><span class="token punctuation">#</span> 2.top    命令  动态显示系统进程</span><span class="token title important"><span class="token punctuation">#</span> 3.kill 杀死进程</span><span class="token code keyword">        kill  3029 说明：上述命令中3029是进程号；一般在执行kill命令之前，先用ps或pstree来查询一下将要被杀掉的进程的进程号。 </span><span class="token code keyword">        kill  -9  3029 说明:强制终止3029号进程的运行，其中参数-9代表强制的意思,实际上kill命令是向该进程发送信号，</span><span class="token code keyword">                                                该进程接到信号后决定是否停止运行，有些守护进程必须要收到参数9才终止运行。</span><span class="token code keyword">        </span></code></pre><h3 id="7-7-vi命令"><a href="#7-7-vi命令" class="headerlink" title="7.7 vi命令"></a>7.7 vi命令</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> vi / vim是Unix / Linux上最常用的文本编辑器而且功能非常强大。</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191011213625815.png" alt="image-20191011213625815"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 常用命令:</span><span class="token code keyword">        i                        在光标前插入</span><span class="token code keyword">         I                        在光标当前行开始插入</span><span class="token code keyword">         a                        在光标后插入</span><span class="token code keyword">         A                        在光标当前行末尾插入</span><span class="token code keyword">         o                        在光标当前行的下一行插入新行</span><span class="token code keyword">         O                        在光标当前行的上一行插入新行</span><span class="token code keyword">         ----------------重点---------------------------</span><span class="token code keyword">         :set nu            显示行号</span><span class="token code keyword">         :set nonu        取消行号</span><span class="token code keyword">         gg                    到文本的第一行</span><span class="token code keyword">         G                        到文本的最后一行</span><span class="token code keyword">         :n                    到文本的第n行</span><span class="token code keyword">         ------------------重点-------------------------</span><span class="token code keyword">         u                        undo,取消上一步操作</span><span class="token code keyword">         Ctrl + r        redo,返回到undo之前</span><span class="token code keyword">         </span><span class="token code keyword">         -------------------重点------------------------</span><span class="token code keyword">         Shift+ zz        保存退出，与“:wq”作用相同</span><span class="token code keyword">        :q                    退出不保存</span><span class="token code keyword">        :q!                    强制退出不保存</span><span class="token code keyword">        :wq                    保存退出</span><span class="token code keyword">        :wq!                强制保存退出</span></code></pre><h3 id="7-8-软件相关命令"><a href="#7-8-软件相关命令" class="headerlink" title="7.8 软件相关命令"></a>7.8 软件相关命令</h3><p><code>RPM命令</code></p><blockquote><p>​    <code>RPM是RedHat Package Manager（RedHat软件包管理工具）的缩写，这一文件格式名称虽然打上了RedHat的标志，但是其原始设计理念是开放式的，现在包括RedHat、CentOS、SUSE等Linux的分发版本都有采用，可以算是公认的行业标准了。RPM文件在Linux系统中的安装最为简便,</code></p></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> rpm 命令  </span><span class="token code keyword">    常用参数:</span><span class="token code keyword">      i：安装应用程序（install）</span><span class="token code keyword">      e：卸载应用程序（erase）</span><span class="token code keyword">      vh：显示进度；（verbose   hash） </span><span class="token code keyword">      U：升级软件包；（update） </span><span class="token code keyword">      qa: 显示所有已安装软件包（query all）</span><span class="token code keyword">    例子：rmp  -ivh  gcc-c++-4.4.7-3.el6.x86_64.rpm</span>安装 <span class="token code keyword">    rpm -ivh  xxxx.rpm  # 显示进度安装程序</span><span class="token code keyword">    rpm -evh  xxxx.rpm # 显示进度卸载程序</span><span class="token code keyword">    rpm -Uvh  xxx.rpm # 显示进度升级安装包</span><span class="token code keyword">    rpm -qa # 显示所有已安装的程序</span></code></pre><p><code>YUM命令</code></p><blockquote><p>​    <code>Yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及SUSE、CentOS中的Shell前端软件包管理器。基於RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</code></p></blockquote><pre class=" language-markdown"><code class="language-markdown">例子：<span class="token code keyword">    yum  install  gcc-c++</span><span class="token code keyword">    yum  remove   gcc-c++</span><span class="token code keyword">    yum  update   gcc-c++</span>    <span class="token code keyword">    yum install|remove|update  依赖名称</span></code></pre><blockquote><p><code>使用YUM命令必须连接外部网络</code></p></blockquote><h3 id="7-9-用户和组相关命令"><a href="#7-9-用户和组相关命令" class="headerlink" title="7.9 用户和组相关命令"></a>7.9 用户和组相关命令</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.查看当前用户：whoami</span><span class="token title important"><span class="token punctuation">#</span> 2.查看登录用户：who</span><span class="token code keyword">    -m或am I    只显示运行who命令的用户名、登录终端和登录时间</span><span class="token code keyword">    -q或--count    只显示用户的登录账号和登录用户的数量</span><span class="token title important"><span class="token punctuation">#</span> 3.退出用户:        exit</span><span class="token title important"><span class="token punctuation">#</span> 4.添加、删除组账号：groupadd、groupdel</span><span class="token title important"><span class="token punctuation">#</span> 5.添加用户账号：useradd</span><span class="token code keyword">        -g    指定组名称  说明:如果创建用户的时候，不指定组名，那么系统会自动创建一个和用户名一样的组名。</span><span class="token title important"><span class="token punctuation">#</span> 6.设置用户密码：passwd　[用户名]</span><span class="token title important"><span class="token punctuation">#</span> 7.su 切换用户</span><span class="token code keyword">        su  root </span></code></pre><h3 id="7-10-权限相关命令"><a href="#7-10-权限相关命令" class="headerlink" title="7.10 权限相关命令"></a>7.10 权限相关命令</h3><blockquote><p>Linux文件有<code>三种</code>典型的权限，<code>即r读权限、w写权限和x执行权限</code>。在长格式输出中在文件类型的后面有9列权限位，实际上这是针对不同用户而设定的。<code>r=4，w=2，x=1</code></p></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> chmod </span>  all = user + group + other   chmod  u+rwx,g+rwx,o+rwx   文件名<span class="token code keyword">    字母法：chmod u/g/o/a +/-/= rwx 文件</span>    <span class="token code keyword">    [ u/g/o/a ]    含义</span><span class="token code keyword">        u    user                     表示该文件的所有者</span><span class="token code keyword">        g    group                 表示与该文件的所有者属于同一组( group )者，即用户组</span><span class="token code keyword">        o    other                 表示其他以外的人</span><span class="token code keyword">        a    all                     表示这三者皆是</span><span class="token code keyword">    [ +-= ]    含义</span><span class="token code keyword">        +                                增加权限</span><span class="token code keyword">        -                                撤销权限</span><span class="token code keyword">        =                                设定权限</span><span class="token code keyword">    rwx    含义</span><span class="token code keyword">        r                                read 表示可读取，对于一个目录，如果没有r权限，那么就意味着不能通过ls查看这个目录的内容。</span><span class="token code keyword">        w                                write 表示可写入，对于一个目录，如果没有w权限，那么就意味着不能在目录下创建新的文件。</span><span class="token code keyword">        x                                excute 表示可执行，对于一个目录，如果没有x权限，那么就意味着不能通过cd进入这个目录。</span>      数字法:   4读 2写  1执行<span class="token code keyword">      chmod 777 文件名</span></code></pre><hr><h2 id="8-CRT终端操作"><a href="#8-CRT终端操作" class="headerlink" title="8.CRT终端操作"></a>8.CRT终端操作</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.准备工作</span><span class="token code keyword">        安装CRT客户端工具,安装winscp工具</span><span class="token title important"><span class="token punctuation">#</span> 1.设置linux获取ip地址 (编辑网络配置文件)    </span><span class="token code keyword">        vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><span class="token title important"><span class="token punctuation">#</span> 2.修改ens33配置文件:</span><span class="token code keyword">    BOOTPROTO=dhcp</span><span class="token code keyword">    ONBOOT=yes</span><span class="token title important"><span class="token punctuation">#</span> 3.重启启动网路服务加载修改配置生效</span><span class="token code keyword">        systemctl restart network</span><span class="token title important"><span class="token punctuation">#</span> 4.查看ip地址</span><span class="token code keyword">        ip addr</span><span class="token title important"><span class="token punctuation">#</span> 5.此时ip已经获取</span><span class="token code keyword">        ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><span class="token code keyword">    link/ether 00:0c:29:07:16:9e brd ff:ff:ff:ff:ff:ff</span><span class="token code keyword">    inet 192.168.202.136/24 brd 192.168.202.255 scope global noprefixroute dynamic ens33</span><span class="token code keyword">       valid_lft 1459sec preferred_lft 1459sec</span><span class="token code keyword">    inet6 fe80::b22b:7e01:db87:52fe/64 scope link noprefixroute </span><span class="token title important"><span class="token punctuation">#</span> 6.测试外部网络连通(保证宿主机windows可以上网前提)</span><span class="token code keyword">        ping www.baidu.com</span><span class="token title important"><span class="token punctuation">#</span> 7.使用CRT工具连接即可</span></code></pre><h2 id="9-安装JDK"><a href="#9-安装JDK" class="headerlink" title="9.安装JDK"></a>9.安装JDK</h2><h3 id="9-1-下载jdk"><a href="#9-1-下载jdk" class="headerlink" title="9.1 下载jdk"></a>9.1 下载jdk</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.下载jdk</span><span class="token code keyword">    https://www.oracle.com/technetwork/java/javase/downloads/index.html</span><span class="token code keyword">    https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</span><span class="token title important"><span class="token punctuation">#</span> 2.通过CRT|WinSCP工具将jdk上传到linux系统中    </span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191013121013589.png" alt="image-20191013121013589"></p><h3 id="9-2-tar包安装"><a href="#9-2-tar包安装" class="headerlink" title="9.2 tar包安装"></a>9.2 tar包安装</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.将JDK解压缩到指定目录</span><span class="token code keyword">    tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/</span><span class="token code keyword">    注意:-C参数是将JDK解压之后文件放入usr目录中</span><span class="token title important"><span class="token punctuation">#</span> 2.进入jdk解压缩目录查看</span><span class="token code keyword">    cd /usr/jdk1.8.0_171/</span><span class="token title important"><span class="token punctuation">#</span> 3.查看详细信息</span><span class="token code keyword">    [root@localhost jdk1.8.0_171]# ls</span><span class="token code keyword">        bin        db       javafx-src.zip  lib      man          release  THIRDPARTYLICENSEREADME-JAVAFX.txt</span><span class="token code keyword">        COPYRIGHT  include  jre             LICENSE  README.html  src.zip  THIRDPARTYLICENSEREADME.txt</span><span class="token title important"><span class="token punctuation">#</span> 4.配置环境变量</span><span class="token code keyword">     vi /etc/profile</span><span class="token code keyword">     </span><span class="token title important"><span class="token punctuation">#</span> 5.在文件末尾加入如下配置</span><span class="token code keyword">    export JAVA_HOME=/usr/jdk1.8.0_171</span><span class="token code keyword">    export PATH=$PATH:$JAVA_HOME/bin</span><span class="token title important"><span class="token punctuation">#</span> 6.加载配置生效</span><span class="token code keyword">    source /etc/profile    加载配置生效</span><span class="token code keyword">    reboot                 重启系统</span><span class="token code keyword">    注意: 以上两个选项选择任意一个即可source可以不用重启立即生效,某些情况下source无法生效时,可以使用重启试试</span><span class="token title important"><span class="token punctuation">#</span> 7.测试环境变量</span><span class="token code keyword">    java</span><span class="token code keyword">    javac</span><span class="token code keyword">    java -version</span></code></pre><h3 id="9-3-rpm包安装"><a href="#9-3-rpm包安装" class="headerlink" title="9.3 rpm包安装"></a>9.3 rpm包安装</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.安装jdk</span><span class="token code keyword">    [root@localhost ~]# rpm -ivh jdk-8u171-linux-x64.rpm </span><span class="token code keyword">        准备中...                          ################################# [100%]</span><span class="token code keyword">        正在升级/安装...</span><span class="token code keyword">           1:jdk1.8-2000:1.8.0_171-fcs        ################################# [100%]</span><span class="token code keyword">            Unpacking JAR files...</span><span class="token code keyword">        tools.jar...</span><span class="token code keyword">        plugin.jar...</span><span class="token code keyword">        javaws.jar...</span><span class="token code keyword">        deploy.jar...</span><span class="token code keyword">        rt.jar...</span><span class="token code keyword">        jsse.jar...</span><span class="token code keyword">        charsets.jar...</span><span class="token code keyword">        localedata.jar...</span><span class="token title important"><span class="token punctuation">#</span> 2.搜索默认安装位置</span><span class="token code keyword">     [root@localhost ~]# find / -name "java"</span><span class="token code keyword">         /usr/java/jdk1.8.0_171-amd64/bin/java</span><span class="token code keyword">        /usr/java/jdk1.8.0_171-amd64/jre/bin/java</span><span class="token title important"><span class="token punctuation">#</span> 3.配置环境变量</span><span class="token code keyword">     vi /etc/profile</span><span class="token title important"><span class="token punctuation">#</span> 4.在文件末尾加入如下配置</span><span class="token code keyword">    export JAVA_HOME=/usr/java/jdk1.8.0_171-amd64/</span><span class="token code keyword">    export PATH=$PATH:$JAVA_HOME/bin</span><span class="token title important"><span class="token punctuation">#</span> 5.加载配置生效</span><span class="token code keyword">    source /etc/profile    加载配置生效</span><span class="token code keyword">    reboot                 重启系统</span><span class="token code keyword">    注意: 以上两个选项选择任意一个即可source可以不用重启立即生效,某些情况下source无法生效时,可以使用重启试试</span><span class="token title important"><span class="token punctuation">#</span> 6.测试环境变量</span><span class="token code keyword">    java</span><span class="token code keyword">    javac</span><span class="token code keyword">    java -version</span>    </code></pre><hr><h2 id="10-安装Tomcat"><a href="#10-安装Tomcat" class="headerlink" title="10.安装Tomcat"></a>10.安装Tomcat</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.下载tomcat</span><span class="token code keyword">    http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.46/bin/apache-tomcat-8.5.46.tar.gz</span><span class="token title important"><span class="token punctuation">#</span> 1.通过工具上传到Linux系统中</span><span class="token title important"><span class="token punctuation">#</span> 2.解压缩到/usr目录中</span><span class="token code keyword">    [root@localhost ~]# tar -zxvf apache-tomcat-8.5.46.tar.gz -C /usr/</span><span class="token code keyword">    -C 用来指定解压缩的位置</span><span class="token title important"><span class="token punctuation">#</span> 3.查看解压内容</span><span class="token code keyword">    [root@localhost apache-tomcat-8.5.46]# ls -l</span><span class="token code keyword">    总用量 124</span><span class="token code keyword">    drwxr-x---. 2 root root  4096 10月 13 12:27 bin</span><span class="token code keyword">    -rw-r-----. 1 root root 19318 9月  17 02:19 BUILDING.txt</span><span class="token code keyword">    drwx------. 2 root root   238 9月  17 02:19 conf</span><span class="token code keyword">    -rw-r-----. 1 root root  5407 9月  17 02:19 CONTRIBUTING.md</span><span class="token code keyword">    drwxr-x---. 2 root root  4096 10月 13 12:27 lib</span><span class="token code keyword">    -rw-r-----. 1 root root 57011 9月  17 02:19 LICENSE</span><span class="token code keyword">    drwxr-x---. 2 root root     6 9月  17 02:17 logs</span><span class="token code keyword">    -rw-r-----. 1 root root  1726 9月  17 02:19 NOTICE</span><span class="token code keyword">    -rw-r-----. 1 root root  3255 9月  17 02:19 README.md</span><span class="token code keyword">    -rw-r-----. 1 root root  7139 9月  17 02:19 RELEASE-NOTES</span><span class="token code keyword">    -rw-r-----. 1 root root 16262 9月  17 02:19 RUNNING.txt</span><span class="token code keyword">    drwxr-x---. 2 root root    30 10月 13 12:27 temp</span><span class="token code keyword">    drwxr-x---. 7 root root    81 9月  17 02:17 webapps</span><span class="token code keyword">    drwxr-x---. 2 root root     6 9月  17 02:17 work</span><span class="token title important"><span class="token punctuation">#</span> 4.启动tomcat</span><span class="token code keyword">    [root@localhost apache-tomcat-8.5.46]# ./bin/startup.sh </span><span class="token title important"><span class="token punctuation">#</span> 5.关闭网络防火墙</span><span class="token code keyword">    systemctl stop firewalld       关闭网络防火墙</span><span class="token code keyword">    systemctl disable firewalld  关闭开机自启动(永久关闭)</span><span class="token title important"><span class="token punctuation">#</span> 6.在windows中访问tomcat</span><span class="token code keyword">    http://10.15.0.8:8080/</span><span class="token title important"><span class="token punctuation">#</span> 7.显示tomcat实时控制台信息</span><span class="token code keyword">    进入tomcat的logs目录中使用tail -f catalina.out 命令实时查看控制台信息 </span><span class="token title important"><span class="token punctuation">#</span> 8.关闭tomcat</span><span class="token code keyword">    在tomcat的bin目录下面使用 ./shutdown.sh</span></code></pre><hr><h2 id="11-安装MySQL"><a href="#11-安装MySQL" class="headerlink" title="11.安装MySQL"></a>11.安装MySQL</h2><h3 id="11-1-环境准备"><a href="#11-1-环境准备" class="headerlink" title="11.1 环境准备"></a>11.1 环境准备</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.卸载mariadb，否则安装mysql会出现冲突</span><span class="token title important"><span class="token punctuation">#</span> 2.执行命令rpm -qa | grep mariadb</span><span class="token title important"><span class="token punctuation">#</span> 3.列出所有被安装的mariadb rpm 包；</span><span class="token title important"><span class="token punctuation">#</span> 4.执行命令rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64</span></code></pre><h3 id="11-2-本地安装-5-6版本默认root没有密码"><a href="#11-2-本地安装-5-6版本默认root没有密码" class="headerlink" title="11.2 本地安装(5.6版本默认root没有密码)"></a>11.2 本地安装(5.6版本默认root没有密码)</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.上传下载好的软件包到系统中</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191013124602190.png" alt="image-20191013124602190"></p><pre class=" language-shell"><code class="language-shell"># 0.执行本地安装包之前必须先安装vim    yum install -y vim# 1.安装步骤    rpm -ivh perl-*    rpm -ivh net-tools-2.0-0.22.20131004git.el7.x86_64.rpm    rpm -ivh mysql-community-common-5.6.42-2.el7.x86_64.rpm    rpm -ivh mysql-community-libs-5.6.42-2.el7.x86_64.rpm    rpm -ivh mysql-community-client-5.6.42-2.el7.x86_64.rpm    rpm -ivh mysql-community-server-5.6.42-2.el7.x86_64.rpm</code></pre><h3 id="11-3-在线安装"><a href="#11-3-在线安装" class="headerlink" title="11.3 在线安装"></a>11.3 在线安装</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.添加官方的yum源创建并编辑mysql-community.repo文件</span><span class="token code keyword">        vi /etc/yum.repos.d/mysql-community.repo</span><span class="token title important"><span class="token punctuation">#</span> 2.粘贴以下内容到源文件中</span><span class="token code keyword">        [mysql56-community]</span><span class="token code keyword">    name=MySQL 5.6 Community Server</span><span class="token code keyword">    baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/</span><span class="token code keyword">    enabled=1</span><span class="token code keyword">    gpgcheck=0</span><span class="token code keyword">    gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span>    <span class="token code keyword">    注意:如果需要安装mysql5.7只需要将baseurl修改即可 </span><span class="token code keyword">        baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span><span class="token title important"><span class="token punctuation">#</span> 3.安装mysql</span><span class="token code keyword">    sudo yum install -y mysql-community-server</span></code></pre><h3 id="11-4-设置root用户密码"><a href="#11-4-设置root用户密码" class="headerlink" title="11.4 设置root用户密码"></a>11.4 设置root用户密码</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.启动mysql数据库</span><span class="token code keyword">    [root@localhost mysql]# systemctl start mysqld</span><span class="token title important"><span class="token punctuation">#</span> 2.修改mysql数据库密码</span><span class="token code keyword">    mysqladmin -u root -p password 回车 输入原始密码 在输入新的密码</span>    <span class="token code keyword">    注意:5.7之前版本安装完成之后没有密码,mysql5.7之后的版本的初始密码是随机生成的，放在了&amp;nbsp;/var/log/mysqld.log</span><span class="token code keyword">            使用命令&amp;nbsp;grep ‘temporary password’ /var/log/mysqld.log&amp;nbsp;读出来即可</span><span class="token code keyword">            ROOT!Q2w</span><span class="token title important"><span class="token punctuation">#</span> 3.登录mysql</span><span class="token code keyword">    [root@localhost mysql]# mysql -u root -p  </span></code></pre><h3 id="11-5-开启远程访问"><a href="#11-5-开启远程访问" class="headerlink" title="11.5 开启远程访问"></a>11.5 开启远程访问</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.安装完成mysql时,发现mysql数据库,不允许我们远程连接需要修改设置</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191013130519305.png" alt="image-20191013130519305"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 2.登录mysql,并选择使用mysql数据库</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191013130544372.png" alt="image-20191013130544372"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.查看mysql库中的所有表</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191013130645099.png" alt="image-20191013130645099"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 4.查询user表</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191013130748107.png" alt="image-20191013130748107"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 5.执行如下命令</span><span class="token code keyword">    grant all privileges on *.* to 'root'@'%' identified by 'ROOT!Q2w' with grant option;</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191013131257409.png" alt="image-20191013131257409"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 6.刷新权限</span><span class="token code keyword">    flush privileges;</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191013131324656.png" alt="image-20191013131324656"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 7.重启服务</span><span class="token code keyword">    systemctl restart mysqld</span><span class="token title important"><span class="token punctuation">#</span> 8.测试连接</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191013131419858.png" alt="image-20191013131419858"></p><hr><h2 id="12-MySQL主从复制"><a href="#12-MySQL主从复制" class="headerlink" title="12.MySQL主从复制"></a>12.MySQL主从复制</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.架构规划</span><span class="token code keyword">    192.168.202.201    master  主节点</span><span class="token code keyword">    192.168.202.202    slave   从节点</span><span class="token title important"><span class="token punctuation">#</span> 1.修改mysql的配置文件</span><span class="token code keyword">    [root@localhost mysql]# vim /etc/my.cnf</span><span class="token title important"><span class="token punctuation">#</span> 2.分别在配置文件中加入如下配置</span><span class="token code keyword">    mysql(master):</span><span class="token code keyword">        server-id=1</span><span class="token code keyword">        log-bin=mysql-bin</span><span class="token code keyword">        log-slave-updates</span><span class="token code keyword">        slave-skip-errors=all</span>    <span class="token code keyword">    msyql(slave):</span><span class="token code keyword">        server-id=2</span><span class="token code keyword">        log-bin=mysql-bin</span><span class="token code keyword">        log-slave-updates</span><span class="token code keyword">        slave-skip-errors=all</span><span class="token code keyword">        </span><span class="token code keyword">        注意:两个机器的server-id不能一致</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191013201349444.png" alt="image-20191013201349444"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.重启mysql服务</span><span class="token code keyword">    systemctl restart mysqld</span><span class="token title important"><span class="token punctuation">#</span> 4.登录mysql执行如下命令检测配置是否生效</span><span class="token code keyword">    SHOW VARIABLES like 'server_id';</span></code></pre><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191013201523812.png" alt="image-20191013201523812"><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 5.登录master节点执行如下命令</span><span class="token code keyword">        show master status;</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191013203543728.png" alt="image-20191013203543728"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 6.登录从节点执行如下命令:</span><span class="token code keyword">        change master to </span><span class="token code keyword">        master_host='10.15.0.9',</span><span class="token code keyword">        master_user='root',</span><span class="token code keyword">        master_password='root',</span><span class="token code keyword">        master_log_file='mysql-bin.000001',</span><span class="token code keyword">        master_log_pos=120;</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191013204344807.png" alt="image-20191013204344807"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 7.开启从节点</span><span class="token code keyword">        start slave; </span><span class="token code keyword">        stop  slave;</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191013204413766.png" alt="image-20191013204413766"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 8.查看从节点状态</span><span class="token code keyword">        show slave status\G;</span><span class="token code keyword">        ************************** 1. row ***************************</span><span class="token code keyword">               Slave_IO_State: Waiting for master to send event</span><span class="token code keyword">                  Master_Host: 10.15.0.9</span><span class="token code keyword">                  Master_User: root</span><span class="token code keyword">                  Master_Port: 3306</span><span class="token code keyword">                Connect_Retry: 60</span><span class="token code keyword">              Master_Log_File: mysql-bin.000001</span><span class="token code keyword">          Read_Master_Log_Pos: 120</span><span class="token code keyword">               Relay_Log_File: mysqld-relay-bin.000002</span><span class="token code keyword">                Relay_Log_Pos: 283</span><span class="token code keyword">        Relay_Master_Log_File: mysql-bin.000001</span><span class="token code keyword">             Slave_IO_Running: Yes</span><span class="token code keyword">            Slave_SQL_Running: Yes</span><span class="token code keyword">       </span><span class="token code keyword">    注意:</span><span class="token code keyword">            1.出现 Slave_IO_Running: Yes 和 Slave_SQL_Running: Yes 说名成功,</span><span class="token code keyword">            2.如果在搭建过程出现错误,可以查看查看错误日志文件 cat /var/log/mysqld.log</span> <span class="token title important"><span class="token punctuation">#</span> 9.通过客户端工具进行测试</span>    <span class="token title important"><span class="token punctuation">#</span> 10.关闭主从复制(在从节点执行)</span><span class="token code keyword">    stop slave;</span></code></pre><ul><li>注意:如果出现Slave I/O: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work. Error_code: 1593错误,请执行如下命令,rm -rf /var/lib/mysql/auto.cnf删除这个文件,之所以出现会出现这样的问题，是因为我的从库主机是克隆的主库所在的主机，所以auto.cnf文件中保存的UUID会出现重复.</li></ul><hr><h2 id="13-读写分离"><a href="#13-读写分离" class="headerlink" title="13.读写分离"></a>13.读写分离</h2><h3 id="13-1-MyCat引言"><a href="#13-1-MyCat引言" class="headerlink" title="13.1 MyCat引言"></a>13.1 MyCat引言</h3><p>基于阿里开源的Cobar产品而研发，Cobar的稳定性、可靠性、优秀的架构和性能以及众多成熟的使用案例使得MYCAT一开始就拥有一个很好的起点，站在巨人的肩膀上，我们能看到更远。业界优秀的开源项目和创新思路被广泛融入到MYCAT的基因中，使得MYCAT在很多方面都领先于目前其他一些同类的开源项目，甚至超越某些商业产品。</p><p>MYCAT背后有一支强大的技术团队，其参与者都是5年以上资深软件工程师、架构师、DBA等，优秀的技术团队保证了MYCAT的产品质量。MYCAT并不依托于任何一个商业公司，因此不像某些开源项目，将一些重要的特性封闭在其商业产品中，使得开源项目成了一个摆设. </p><h3 id="13-2-安装Mycat"><a href="#13-2-安装Mycat" class="headerlink" title="13.2 安装Mycat"></a>13.2 安装Mycat</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.下载mycat</span><span class="token code keyword">    http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz</span><span class="token title important"><span class="token punctuation">#</span> 2.解压mycat</span><span class="token code keyword">    tar -zxvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191014225929256.png" alt="image-20191014225929256"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.查看解压之后目录]</span><span class="token code keyword">    [root@localhost mycat]# ls</span><span class="token code keyword">    总用量 12</span><span class="token code keyword">    drwxr-xr-x. 2 root root  190 10月 14 22:58 bin</span><span class="token code keyword">    drwxrwxrwx. 2 root root    6 3月   1 2016 catlet</span><span class="token code keyword">    drwxrwxrwx. 4 root root 4096 10月 14 22:58 conf</span><span class="token code keyword">    drwxr-xr-x. 2 root root 4096 10月 14 22:58 lib</span><span class="token code keyword">    drwxrwxrwx. 2 root root    6 10月 28 2016 logs</span><span class="token code keyword">    -rwxrwxrwx. 1 root root  217 10月 28 2016 version.txt</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191014230002014.png" alt="image-20191014230002014"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 4.移动到/usr目录</span><span class="token code keyword">    mv mycat/ /usr/</span><span class="token title important"><span class="token punctuation">#</span> 5.配置mycat中conf下的配置schema.xml</span></code></pre><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 定义MyCat的逻辑库  --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>schema</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test_schema<span class="token punctuation">"</span></span> <span class="token attr-name">checkSQLschema</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">sqlMaxLimit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">dataNode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testNode<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>schema</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 定义MyCat的数据节点 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataNode</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testNode<span class="token punctuation">"</span></span> <span class="token attr-name">dataHost</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dtHost<span class="token punctuation">"</span></span> <span class="token attr-name">database</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataHost</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dtHost<span class="token punctuation">"</span></span> <span class="token attr-name">maxCon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">minCon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">balance</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                <span class="token attr-name">writeType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">dbType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span> <span class="token attr-name">dbDriver</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>native<span class="token punctuation">"</span></span> <span class="token attr-name">switchType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span>  <span class="token attr-name">slaveThreshold</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heartbeat</span><span class="token punctuation">></span></span>select user()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heartbeat</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--写节点--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>writeHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostM1<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>192.168.28.128:3306<span class="token punctuation">"</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                          <span class="token comment" spellcheck="true">&lt;!--从节点--></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>readHost</span> <span class="token attr-name">host</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostS1<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>192.168.28.129:3306<span class="token punctuation">"</span></span> <span class="token attr-name">user</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>writeHost</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataHost</span><span class="token punctuation">></span></span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 6.配置登陆mycat的权限server.xml</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 这里配置的都是一些系统属性，可以自己查看mycat文--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultSqlParser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>druidparser<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>charset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>utf8mb4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>schemas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>test_schema<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 7.启动mycat</span><span class="token code keyword">     ./mycat console</span><span class="token title important"><span class="token punctuation">#</span> 8.查看日志</span><span class="token code keyword">    tail -f ../logs/mycat.log</span><span class="token title important"><span class="token punctuation">#</span> 9.数据库连接配置,测试</span></code></pre><h2 id="14-安装Nginx"><a href="#14-安装Nginx" class="headerlink" title="14.安装Nginx"></a>14.安装Nginx</h2><h3 id="14-1-Nginx的引言"><a href="#14-1-Nginx的引言" class="headerlink" title="14.1 Nginx的引言"></a>14.1 Nginx的引言</h3><p><code>Nginx</code>是一款<a href="http://baike.baidu.com/subview/1318763/16205192.htm">轻量级</a>的<a href="http://baike.baidu.com/subview/3912/15992867.htm">Web</a> 服务器/<a href="http://baike.baidu.com/view/1165595.htm">反向代理</a>服务器及<a href="http://baike.baidu.com/view/1524.htm">电子邮件</a>（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，供俄国大型的入口网站及搜索引擎Rambler（俄文：Рамблер）使用。其特点是占有内存少，<a href="http://baike.baidu.com/view/684757.htm">并发</a>能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：<a href="http://baike.baidu.com/view/1412737.htm">京东</a>、<a href="http://baike.baidu.com/view/2410.htm">新浪</a>、<a href="http://baike.baidu.com/view/6043.htm">网易</a>、<a href="http://baike.baidu.com/view/1591.htm">腾讯</a>、<a href="http://baike.baidu.com/view/3629.htm">淘宝</a>等。</p><h3 id="14-2-Nginx的安装"><a href="#14-2-Nginx的安装" class="headerlink" title="14.2 Nginx的安装"></a>14.2 Nginx的安装</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.安装必要依赖</span><span class="token code keyword">    yum install -y gcc pcre-devel zlib-devel</span><span class="token title important"><span class="token punctuation">#</span> 1.下载Nginx</span><span class="token code keyword">    http://nginx.org/en/download.html</span><span class="token title important"><span class="token punctuation">#</span> 2.将Nginx上传到linux中,并解压缩</span><span class="token code keyword">     tar -zxvf nginx-1.11.1.tar.gz</span><span class="token title important"><span class="token punctuation">#</span> 3.查看Nginx安装目录</span><span class="token code keyword">    [root@localhost nginx-1.11.1]# ls</span><span class="token code keyword">    auto  CHANGES  CHANGES.ru  conf  configure  contrib  html  LICENSE  man  README  src</span><span class="token title important"><span class="token punctuation">#</span> 4.在Nginx安装目录中执行如下命令:(指定安装位置)</span><span class="token code keyword">    ./configure --prefix=/usr/nginx</span><span class="token title important"><span class="token punctuation">#</span> 5.执行上述命令后,执行如下命令:</span><span class="token code keyword">    make &amp;&amp; make install</span><span class="token title important"><span class="token punctuation">#</span> 6.编译完成后进入编译安装目录/usr/nginx目录中查看:</span><span class="token code keyword">    [root@localhost nginx]# ls -l</span><span class="token code keyword">    总用量 4</span><span class="token code keyword">    drwxr-xr-x. 2 root root 4096 10月 14 21:17 conf</span><span class="token code keyword">    drwxr-xr-x. 2 root root   40 10月 14 21:17 html</span><span class="token code keyword">    drwxr-xr-x. 2 root root    6 10月 14 21:17 logs</span><span class="token code keyword">    drwxr-xr-x. 2 root root   19 10月 14 21:17 sbin</span><span class="token title important"><span class="token punctuation">#</span> 7.启动nginx,进入nginx安装目录的sbin目录中执行:</span><span class="token code keyword">    ./nginx   </span><span class="token title important"><span class="token punctuation">#</span> 8.在windows中浏览器访问,可以看到nginx欢迎页面:</span><span class="token code keyword">    http://10.15.0.8:80/</span>    <span class="token code keyword">        注意:关闭网络防火墙</span><span class="token title important"><span class="token punctuation">#</span> 9.关闭nginx,进入nginx安装目录的sbin目录中执行:</span><span class="token code keyword">    ./nginx -s stop</span><span class="token title important"><span class="token punctuation">#</span> 10.nginx配置文件在nginx安装目录的conf目录中:</span><span class="token code keyword">    [root@localhost conf]# ls -l</span><span class="token code keyword">    总用量 60</span><span class="token code keyword">    -rw-r--r--. 1 root root 2656 10月 14 21:17 nginx.conf</span><span class="token code keyword">    .......</span><span class="token code keyword">    注意:nginx.conf为nginx的配置文件,可以在nginx.conf修改nginx默认配置</span></code></pre><hr><h2 id="15-Tomcat负载均衡集群"><a href="#15-Tomcat负载均衡集群" class="headerlink" title="15.Tomcat负载均衡集群"></a>15.Tomcat负载均衡集群</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.准备多个tomcat</span><span class="token code keyword">     tar -zxvf apache-tomcat-8.5.46.tar.gz #解压缩一个新的tomcat安装包</span><span class="token code keyword">     mv apache-tomcat-8.5.46 tomcat1              #将名称改为tomcat1</span><span class="token code keyword">     cp -r tomcat1/ tomcat2                                 #复制一份</span><span class="token code keyword">     cp -r tomcat1/ tomcat3                #复制一份</span><span class="token title important"><span class="token punctuation">#</span> 1.此时当前目录中有三个服务器,如下:</span><span class="token code keyword">    [root@localhost ~]# ls -l</span><span class="token code keyword">    总用量 12248</span><span class="token code keyword">    -rwxrwxrwx. 1 root root  11623939 10月 13 12:25 apache-tomcat-8.5.46.tar.gz</span><span class="token code keyword">    drwxr-xr-x. 9 root root       220 10月 14 21:28 tomcat1</span><span class="token code keyword">    drwxr-xr-x. 9 root root       220 10月 14 21:38 tomcat2</span><span class="token code keyword">    drwxr-xr-x. 9 root root       220 10月 14 21:38 tomcat3</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 2.修改tomcat1端口号:(伪分布式)</span><span class="token code keyword">        vim tomcat1/conf/server.xml,命令修改如下内容:</span><span class="token code keyword">        a.&lt;Server port="8001" shutdown="SHUTDOWN">   ---关闭端口</span><span class="token code keyword">        b.&lt;Connector port="8888" protocol="HTTP/1.1" ---http协议端口</span><span class="token code keyword">               connectionTimeout="20000"</span><span class="token code keyword">               redirectPort="8443" /></span><span class="token code keyword">           c.&lt;Connector port="10010" protocol="AJP/1.3" redirectPort="8443" /> ---AJP协议端口</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.修改tomcat2端口号:(伪分布式)</span><span class="token code keyword">        vim tomcat2/conf/server.xml,命令修改如下内容:</span><span class="token code keyword">      a.&lt;Server port="8002" shutdown="SHUTDOWN"></span><span class="token code keyword">        b.&lt;Connector port="8889" protocol="HTTP/1.1"</span><span class="token code keyword">               connectionTimeout="20000"</span><span class="token code keyword">               redirectPort="8443" /></span><span class="token code keyword">       c.&lt;Connector port="10011" protocol="AJP/1.3" redirectPort="8443" /></span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 4.修改tomcat3端口号:(伪分布式)</span><span class="token code keyword">        vim tomcat2/conf/server.xml,命令修改如下内容:</span><span class="token code keyword">      a.&lt;Server port="8003" shutdown="SHUTDOWN"></span><span class="token code keyword">        b.&lt;Connector port="8890" protocol="HTTP/1.1"</span><span class="token code keyword">               connectionTimeout="20000"</span><span class="token code keyword">               redirectPort="8443" /></span><span class="token code keyword">       c.&lt;Connector port="10012" protocol="AJP/1.3" redirectPort="8443" /></span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 5.将多个tomcat启动:</span><span class="token code keyword">        tomcat1/bin/startup.sh </span><span class="token code keyword">        tomcat2/bin/startup.sh </span><span class="token code keyword">        tomcat3/bin/startup.sh</span>    <span class="token title important"><span class="token punctuation">#</span> 6.查看tomcat是否启动成功</span><span class="token code keyword">        ps -aux|grep tomcat</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191014215035543.png" alt="image-20191014215035543"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 7.在windows中分别访问tomcat,都看到主页代表启动成功:</span>    <span class="token code keyword">    http://10.15.0.8:8888/</span><span class="token code keyword">    http://10.15.0.8:8889/</span><span class="token code keyword">    http://10.15.0.8:8890/</span>    <span class="token code keyword">    注意:这步一定要关闭网路防火墙</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 8.将多个tomcat配置到nginx的配置文件中:</span><span class="token code keyword">    1).在server标签上加入如下配置:</span><span class="token code keyword">    upstream tomcat-servers {</span><span class="token code keyword">      server 10.15.0.8:8888;</span><span class="token code keyword">      server 10.15.0.8:8889;</span><span class="token code keyword">      server 10.15.0.8:8890;</span><span class="token code keyword">    }</span><span class="token code keyword">    2).将配置文件中 location /替换为如下配置:</span><span class="token code keyword">        location / {</span><span class="token code keyword">             proxy_pass http://tomcat-servers;</span><span class="token code keyword">             proxy_redirect    off;</span><span class="token code keyword">             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><span class="token code keyword">             proxy_set_header X-Real-IP $remote_addr;</span><span class="token code keyword">             proxy_set_header Host $http_host;</span><span class="token code keyword">             proxy_next_upstream http_502 http_504 error timeout invalid_header;</span><span class="token code keyword">           }</span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191014215825240.png" alt="image-20191014215825240"></p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 9.进入nginx安装目录sbin目录启动nginx</span><span class="token code keyword">    ./nginx -c /usr/nginx/conf/nginx.conf</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 10.访问nginx,看到其中一个tomcat画面:</span><span class="token code keyword">    http://10.15.0.8/ </span></code></pre><p><img src="eg ./images/loading.gif" data-original="Linux.assets/image-20191014220145379.png" alt="image-20191014220145379"></p><h3 id="15-1Nginx负载均衡策略"><a href="#15-1Nginx负载均衡策略" class="headerlink" title="15.1Nginx负载均衡策略"></a>15.1Nginx负载均衡策略</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.轮询</span><span class="token code keyword">     说明: 默认策略,每个请求会按时间顺序逐一分配到不同的后端服务器</span><span class="token title important"><span class="token punctuation">#</span> 2.weight 权重</span><span class="token code keyword">    说明: weight参数用于指定轮询几率，weight的默认值为1,；weight的数值与访问比率成正比 </span><span class="token code keyword">    upstream tomcat-servers {</span><span class="token code keyword">        server localhost:8080   weight=2;  </span><span class="token code keyword">        server localhost:8081;  </span><span class="token code keyword">        server localhost:8082   backup;  </span><span class="token code keyword">    }</span><span class="token code keyword">    注意：1.权重越高分配到需要处理的请求越多。2.此策略可以与least_conn和ip_hash结合使用主要用于后端服务器性能不均</span><span class="token title important"><span class="token punctuation">#</span> 3.ip_hash  4%3=1 </span><span class="token code keyword">    　说明:指定负载均衡器按照基于客户端IP的分配方式，这个方法确保了相同的客户端的请求一直发送到相同的服务器，以保证session会话。这样每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题。</span><span class="token code keyword">    　upstream tomcat-servers {</span><span class="token code keyword">        ip_hash;    #保证每个访客固定访问一个后端服务器</span><span class="token code keyword">        server localhost:8080;</span><span class="token code keyword">        ......</span><span class="token code keyword">    }</span><span class="token title important"><span class="token punctuation">#</span> 4.least_conn</span><span class="token code keyword">    说明: 把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least_conn这种方式就可以达到更好的负载均衡效果。</span><span class="token code keyword">    upstream tomcat-servers{</span><span class="token code keyword">        least_conn;    #把请求转发给连接数较少的后端服务器</span><span class="token code keyword">        server localhost:8080;</span><span class="token code keyword">    }</span></code></pre><hr><h2 id="16-MSM配置"><a href="#16-MSM配置" class="headerlink" title="16.MSM配置"></a>16.MSM配置</h2><blockquote><p>Memcached Session Manager基于memcache缓存的session共享.即使用cacheDB存取session信息，应用服务器接受新请求将session信息保存在cache DB中，当应用服务器发生故障时，调度器会遍历寻找可用节点，分发请求，当应用服务器发现session不在本机内存时，则去cacheDB中查找，如果找到则复制到本机，这样实现session共享和高可用。</p></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.准备一个memcache服务</span><span class="token title important"><span class="token punctuation">#</span> 1.安装memcached</span><span class="token code keyword">     yum install -y memcached</span><span class="token title important"><span class="token punctuation">#</span> 2.启动memcached</span><span class="token code keyword">    memcached -p 11211 -vvv -u root</span><span class="token title important"><span class="token punctuation">#</span> 3.tomcat安装的lib目录中放入与memcache整合jar包</span><span class="token code keyword">        cp *.jar tomcat1/lib</span><span class="token code keyword">        cp *.jar tomcat2/lib</span><span class="token code keyword">        cp *.jar tomcat3/lib</span><span class="token title important"><span class="token punctuation">#</span> 4.配置tomcat目录中conf目录中context.xml(所有tomcat均需要配置)</span><span class="token code keyword">    &lt;Context></span><span class="token code keyword">    &lt;Manager className="de.javakaffee.web.msm.MemcachedBackupSessionManager"</span><span class="token code keyword">        memcachedNodes="n1:10.15.0.8:11211"</span><span class="token code keyword">        sticky="false"  </span><span class="token code keyword">            sessionBackupAsync="false"  </span><span class="token code keyword">        requestUriIgnorePattern=".*\.(ico|png|gif|jpg|css|js)$"</span><span class="token code keyword">        transcoderFactoryClass="de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory"</span><span class="token code keyword">        /></span><span class="token code keyword">    &lt;/Context></span><span class="token title important"><span class="token punctuation">#</span> 5.放入测试项目进行测试</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Liunx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql索引</title>
      <link href="2021/04/09/mysql-suo-yin/"/>
      <url>2021/04/09/mysql-suo-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql-索引"><a href="#MySql-索引" class="headerlink" title="MySql 索引"></a>MySql 索引</h2><h4 id="什么是索引-index"><a href="#什么是索引-index" class="headerlink" title="什么是索引  index"></a>什么是索引  index</h4><pre class=" language-markdown"><code class="language-markdown">官方定义：一种能帮mysql提高查询效率的数据结构<span class="token list punctuation">-</span> 索引的优点  <span class="token list punctuation">1.</span> 大大提升数据查询效率<span class="token list punctuation">-</span> 索引缺点  <span class="token list punctuation">1.</span> 维护索引需要耗费数据资源  <span class="token list punctuation">2.</span> 索引需要占用电脑空间  <span class="token list punctuation">3.</span> 当对表进行增删改时，因为要维护索引，速度会受到影响</code></pre><h4 id="索引分类-面试必问"><a href="#索引分类-面试必问" class="headerlink" title="索引分类(面试必问)"></a>索引分类(面试必问)</h4><pre class=" language-markdown"><code class="language-markdown">InnoDB<span class="token list punctuation">-</span> a. 主键索引<span class="token code keyword">    设定为主键后数据库会自动创立索引，innodb为聚簇索引  主键索引的索引列的值不能为空</span><span class="token list punctuation">-</span> b. 单值索引（单列索引、普通索引）<span class="token code keyword">    即一个索引只包含一个列，一个表可以有多个单列索引</span><span class="token list punctuation">-</span> c. 唯一索引<span class="token code keyword">    索引的值必须唯一，但允许有空值  唯一索引列值可以存null 但是只能存在一个null</span><span class="token list punctuation">-</span> d. 复合索引<span class="token code keyword">    即一个索引包含多个列</span><span class="token list punctuation">-</span> e. Full Text 全文索引（MYSQL5.7之前 只能用于MYISAM引擎）</code></pre><h4 id="索引的基本操作"><a href="#索引的基本操作" class="headerlink" title="索引的基本操作"></a>索引的基本操作</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 主键索引 自动创建<span class="token list punctuation">-</span> 主键索引是在建表时自动创建的CREATE TABLE t_user(id VARCHAR(20) PRIMARY KEY,name VARCHAR(20))<span class="token list punctuation">-</span> 查看表的索引SHOW INDEX FROM t_user</code></pre><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210304105253785.png" alt="image-20210304105253785" style="zoom:200%;"><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">2.</span> 单列索引（普通索引 单值索引）<span class="token list punctuation">-</span> 普通索引的创建：<span class="token code keyword">    - 建表时创建 </span><span class="token code keyword">    CREATE TABLE t_user1(</span><span class="token code keyword">    id VARCHAR(20) PRIMARY KEY,</span><span class="token code keyword">    name VARCHAR(20),</span><span class="token code keyword">    KEY(name)</span><span class="token code keyword">    )</span><span class="token code keyword">    show index from t_user1</span><span class="token code keyword">    - 建表之后创建</span><span class="token code keyword">    CREATE INDEX name_index on t_user(name)</span></code></pre><p>效果图，第一张是建表时创建，第二张是建表之后创建</p><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210304110357367.png" alt="image-20210304110357367" style="zoom:200%;"><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210304110431593.png" alt="image-20210304110431593" style="zoom:200%;"><pre class=" language-markdown"><code class="language-markdown"></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">3.</span> 唯一索引<span class="token list punctuation">-</span> 唯一索引的创建<span class="token code keyword">    - 建表时创建</span><span class="token code keyword">    CREATE TABLE t_user2(</span><span class="token code keyword">    id VARCHAR(20) PRIMARY KEY,</span><span class="token code keyword">    name VARCHAR(20),</span><span class="token code keyword">    UNIQUE(name)</span><span class="token code keyword">    )</span><span class="token code keyword">    show index from t_user2;</span>    <span class="token code keyword">    - 建表后创建</span><span class="token code keyword">    create index unique name_index on t_user2(name)</span></code></pre><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210304133328268.png" alt="image-20210304133328268" style="zoom:200%;"><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">4.</span> 复合索引<span class="token list punctuation">-</span> 复合索引的创建<span class="token code keyword">    - 建表时创建</span><span class="token code keyword">    create table t_user3(</span><span class="token code keyword">    id varchar(20) primary key,</span><span class="token code keyword">    name varchar(20),</span><span class="token code keyword">    age int,</span><span class="token code keyword">    key(name,age)</span><span class="token code keyword">    )</span><span class="token code keyword">    show index from t_user3</span><span class="token code keyword">    - 建表后创建</span><span class="token code keyword">    create index on t_user3(name,age)</span>    <span class="token code keyword">    根据索引查找：</span><span class="token code keyword">    name age bir #1.左前缀原则 2.mysql引擎在查询时为了更好的利用索引，在查询过程中会动态的调整查询字段的顺序</span></code></pre><img src="eg ./images/loading.gif" data-original="C:%5CUsers%5CZxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210304133757586.png" alt="image-20210304133757586" style="zoom:200%;"><h4 id="索引的底层原理"><a href="#索引的底层原理" class="headerlink" title="索引的底层原理"></a>索引的底层原理</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 我们执行以下语句    <span class="token code keyword">    create table t_emp(id int primary key,name varchar(20),age int);</span><span class="token code keyword">    insert into t_emp values(5,'d',22);</span><span class="token code keyword">    insert into t_emp values(6,'d',29);</span><span class="token code keyword">    insert into t_emp values(7,'e',28);</span><span class="token code keyword">    insert into t_emp values(1,'a',27);</span><span class="token code keyword">    insert into t_emp values(2,'b',26);</span><span class="token code keyword">    insert into t_emp values(3,'c',25);</span><span class="token code keyword">    insert into t_emp values(4,'a',24);</span><span class="token code keyword">    insert into t_emp values(8,'f',22);</span><span class="token code keyword">    insert into t_emp values(9,'v',21);</span><span class="token code keyword">    show index from t_emp</span><span class="token code keyword">    select * from t_emp</span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 我们在插入时是无序的，但是查询结果却是有序的<span class="token list punctuation">-</span> 为什么要进行排序<span class="token code keyword">    为了方便快捷查询</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RibbitMQ 实战教程</title>
      <link href="2021/04/09/ribbitmq-shi-zhan-jiao-cheng/"/>
      <url>2021/04/09/ribbitmq-shi-zhan-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ-实战教程"><a href="#RabbitMQ-实战教程" class="headerlink" title="RabbitMQ 实战教程"></a>RabbitMQ 实战教程</h1><h2 id="1-MQ引言"><a href="#1-MQ引言" class="headerlink" title="1.MQ引言"></a>1.MQ引言</h2><h3 id="1-1-什么是MQ"><a href="#1-1-什么是MQ" class="headerlink" title="1.1 什么是MQ"></a>1.1 什么是MQ</h3><p><code>MQ</code>(Message Quene) :  翻译为 <code>消息队列</code>,通过典型的 <code>生产者</code>和<code>消费者</code>模型,生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入,轻松的实现系统间解耦。别名为 <code>消息中间件</code>    通过利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。</p><h3 id="1-2-MQ有哪些"><a href="#1-2-MQ有哪些" class="headerlink" title="1.2 MQ有哪些"></a>1.2 MQ有哪些</h3><p>当今市面上有很多主流的消息中间件，如老牌的<code>ActiveMQ</code>、<code>RabbitMQ</code>，炙手可热的<code>Kafka</code>，阿里巴巴自主开发<code>RocketMQ</code>等。</p><h3 id="1-3-不同MQ特点"><a href="#1-3-不同MQ特点" class="headerlink" title="1.3 不同MQ特点"></a>1.3 不同MQ特点</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.ActiveMQ</span><span class="token code keyword">        ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。它是一个完全支持JMS规范的的消息中间件。丰富的API,多种集群架构模式让ActiveMQ在业界成为老牌的消息中间件,在中小型企业颇受欢迎!</span><span class="token title important"><span class="token punctuation">#</span> 2.Kafka</span><span class="token code keyword">        Kafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache顶级项目。Kafka主要特点是基于Pull的模式来处理消息消费，</span><span class="token code keyword">        追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，</span><span class="token code keyword">        适合产生大量数据的互联网服务的数据收集业务。</span><span class="token title important"><span class="token punctuation">#</span> 3.RocketMQ</span><span class="token code keyword">        RocketMQ是阿里开源的消息中间件，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ思路起</span><span class="token code keyword">        源于Kafka，但并不是Kafka的一个Copy，它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应用于交易、充值、流计算、消</span><span class="token code keyword">        息推送、日志流式处理、binglog分发等场景。</span><span class="token title important"><span class="token punctuation">#</span> 4.RabbitMQ</span><span class="token code keyword">        RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和</span><span class="token code keyword">        发布/订阅）、可靠性、安全。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在</span><span class="token code keyword">        其次。</span><span class="token code keyword">        </span></code></pre><blockquote><p>RabbitMQ比Kafka可靠，Kafka更适合IO高吞吐的处理，一般应用在大数据日志处理或对实时性（少量延迟），可靠性（少量丢数据）要求稍低的场景使用，比如ELK日志收集。</p></blockquote><hr><h2 id="2-RabbitMQ-的引言"><a href="#2-RabbitMQ-的引言" class="headerlink" title="2.RabbitMQ 的引言"></a>2.RabbitMQ 的引言</h2><h3 id="2-1-RabbitMQ"><a href="#2-1-RabbitMQ" class="headerlink" title="2.1 RabbitMQ"></a>2.1 RabbitMQ</h3><blockquote><p>基于<code>AMQP</code>协议，erlang语言开发，是部署最广泛的开源消息中间件,是最受欢迎的开源消息中间件之一。</p></blockquote><p>![image-20190925215603036](RibbitMQ 实战教程.assets/image-20190925215603036-9419777.png)</p><p><code>官网</code>: <a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p><p><code>官方教程</code>: <a href="https://www.rabbitmq.com/#getstarted">https://www.rabbitmq.com/#getstarted</a></p><pre class=" language-markdown"><code class="language-markdown"> <span class="token title important"><span class="token punctuation">#</span> AMQP 协议</span><span class="token code keyword">         AMQP（advanced message queuing protocol）`在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题。顾名思义，AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。这使得实现了AMQP的provider天然性就是跨平台的。以下是AMQP协议模型:</span></code></pre><p>![image-20200311182438041](RibbitMQ 实战教程.assets/image-20200311182438041.png)</p><h3 id="2-2-RabbitMQ-的安装"><a href="#2-2-RabbitMQ-的安装" class="headerlink" title="2.2 RabbitMQ 的安装"></a>2.2 RabbitMQ 的安装</h3><h4 id="2-2-1-下载"><a href="#2-2-1-下载" class="headerlink" title="2.2.1 下载"></a>2.2.1 下载</h4><p><code>官网下载地址</code>: <a href="https://www.rabbitmq.com/download.html![image-20190925220115235]">https://www.rabbitmq.com/download.html![image-20190925220115235]</a>(RibbitMQ 实战教程.assets/image-20190925220115235.png)</p><blockquote><p><code>最新版本</code>: 3.7.18</p></blockquote><h4 id="2-2-2-下载的安装包-image-20190925220343521-RibbitMQ-实战教程-assets-image-20190925220343521-png"><a href="#2-2-2-下载的安装包-image-20190925220343521-RibbitMQ-实战教程-assets-image-20190925220343521-png" class="headerlink" title="2.2.2 下载的安装包![image-20190925220343521](RibbitMQ 实战教程.assets/image-20190925220343521.png)"></a>2.2.2 下载的安装包![image-20190925220343521](RibbitMQ 实战教程.assets/image-20190925220343521.png)</h4><blockquote><p><code>注意</code>:这里的安装包是centos7安装的包</p></blockquote><h4 id="2-2-3-安装步骤"><a href="#2-2-3-安装步骤" class="headerlink" title="2.2.3 安装步骤"></a>2.2.3 安装步骤</h4><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.将rabbitmq安装包上传到linux系统中</span><span class="token code keyword">    erlang-22.0.7-1.el7.x86_64.rpm</span><span class="token code keyword">    rabbitmq-server-3.7.18-1.el7.noarch.rpm</span><span class="token title important"><span class="token punctuation">#</span> 2.安装Erlang依赖包</span><span class="token code keyword">    rpm -ivh erlang-22.0.7-1.el7.x86_64.rpm</span><span class="token title important"><span class="token punctuation">#</span> 3.安装RabbitMQ安装包(需要联网)</span><span class="token code keyword">    yum install -y rabbitmq-server-3.7.18-1.el7.noarch.rpm</span><span class="token code keyword">        注意:默认安装完成后配置文件模板在:/usr/share/doc/rabbitmq-server-3.7.18/rabbitmq.config.example目录中,需要    </span><span class="token code keyword">                将配置文件复制到/etc/rabbitmq/目录中,并修改名称为rabbitmq.config</span><span class="token title important"><span class="token punctuation">#</span> 4.复制配置文件</span><span class="token code keyword">    cp /usr/share/doc/rabbitmq-server-3.7.18/rabbitmq.config.example /etc/rabbitmq/rabbitmq.config</span><span class="token title important"><span class="token punctuation">#</span> 5.查看配置文件位置</span><span class="token code keyword">    ls /etc/rabbitmq/rabbitmq.config</span><span class="token title important"><span class="token punctuation">#</span> 6.修改配置文件(参见下图:)</span><span class="token code keyword">    vim /etc/rabbitmq/rabbitmq.config </span></code></pre><p>![image-20190925222230260](RibbitMQ 实战教程.assets/image-20190925222230260-3836271.png)</p><p>将上图中配置文件中红色部分去掉<code>%%</code>,以及最后的<code>,</code>逗号 修改为下图:</p><p>![image-20190925222329200](RibbitMQ 实战教程.assets/image-20190925222329200-3836312.png)</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 7.执行如下命令,启动rabbitmq中的插件管理</span><span class="token code keyword">    rabbitmq-plugins enable rabbitmq_management</span>    <span class="token code keyword">    出现如下说明:</span><span class="token code keyword">        Enabling plugins on node rabbit@localhost:</span><span class="token code keyword">    rabbitmq_management</span><span class="token code keyword">    The following plugins have been configured:</span><span class="token code keyword">      rabbitmq_management</span><span class="token code keyword">      rabbitmq_management_agent</span><span class="token code keyword">      rabbitmq_web_dispatch</span><span class="token code keyword">    Applying plugin configuration to rabbit@localhost...</span><span class="token code keyword">    The following plugins have been enabled:</span><span class="token code keyword">      rabbitmq_management</span><span class="token code keyword">      rabbitmq_management_agent</span><span class="token code keyword">      rabbitmq_web_dispatch</span><span class="token code keyword">    set 3 plugins.</span><span class="token code keyword">    Offline change; changes will take effect at broker restart.</span><span class="token title important"><span class="token punctuation">#</span> 8.启动RabbitMQ的服务</span><span class="token code keyword">    systemctl start rabbitmq-server</span><span class="token code keyword">    systemctl restart rabbitmq-server</span><span class="token code keyword">    systemctl stop rabbitmq-server</span>    <span class="token title important"><span class="token punctuation">#</span> 9.查看服务状态(见下图:)</span><span class="token code keyword">    systemctl status rabbitmq-server</span>  ● rabbitmq-server.service - RabbitMQ broker<span class="token code keyword">     Loaded: loaded (/usr/lib/systemd/system/rabbitmq-server.service; disabled; vendor preset: disabled)</span><span class="token code keyword">     Active: active (running) since 三 2019-09-25 22:26:35 CST; 7s ago</span>   Main PID: 2904 (beam.smp)<span class="token code keyword">     Status: "Initialized"</span><span class="token code keyword">     CGroup: /system.slice/rabbitmq-server.service</span><span class="token code keyword">             ├─2904 /usr/lib64/erlang/erts-10.4.4/bin/beam.smp -W w -A 64 -MBas ageffcbf -MHas ageffcbf -</span><span class="token code keyword">             MBlmbcs...</span><span class="token code keyword">             ├─3220 erl_child_setup 32768</span><span class="token code keyword">             ├─3243 inet_gethost 4</span><span class="token code keyword">             └─3244 inet_gethost 4</span><span class="token code keyword">      .........</span></code></pre><p>![image-20190925222743776](RibbitMQ 实战教程.assets/image-20190925222743776-3836511.png)</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 10.关闭防火墙服务</span><span class="token code keyword">    systemctl disable firewalld</span><span class="token code keyword">    Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><span class="token code keyword">    Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><span class="token code keyword">    systemctl stop firewalld   </span><span class="token title important"><span class="token punctuation">#</span> 11.访问web管理界面</span><span class="token code keyword">    http://10.15.0.8:15672/</span></code></pre><p> ![image-20190926194738708](RibbitMQ 实战教程.assets/image-20190926194738708-3836601.png)</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 12.登录管理界面</span><span class="token code keyword">    username:  guest</span><span class="token code keyword">    password:  guest</span></code></pre><p>![image-20190926194954822](RibbitMQ 实战教程.assets/image-20190926194954822-3836665.png)</p><hr><h2 id="3-RabiitMQ-配置"><a href="#3-RabiitMQ-配置" class="headerlink" title="3. RabiitMQ 配置"></a>3. RabiitMQ 配置</h2><h3 id="3-1RabbitMQ-管理命令行"><a href="#3-1RabbitMQ-管理命令行" class="headerlink" title="3.1RabbitMQ 管理命令行"></a>3.1RabbitMQ 管理命令行</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.服务启动相关</span><span class="token code keyword">    systemctl start|restart|stop|status rabbitmq-server</span><span class="token title important"><span class="token punctuation">#</span> 2.管理命令行  用来在不使用web管理界面情况下命令操作RabbitMQ</span><span class="token code keyword">    rabbitmqctl  help  可以查看更多命令</span><span class="token title important"><span class="token punctuation">#</span> 3.插件管理命令行</span><span class="token code keyword">    rabbitmq-plugins enable|list|disable </span></code></pre><h3 id="3-2-web管理界面介绍"><a href="#3-2-web管理界面介绍" class="headerlink" title="3.2 web管理界面介绍"></a>3.2 web管理界面介绍</h3><h4 id="3-2-1-overview概览"><a href="#3-2-1-overview概览" class="headerlink" title="3.2.1 overview概览"></a>3.2.1 overview概览</h4><p>![image-20191126162026720](RibbitMQ 实战教程.assets/image-20191126162026720.png)</p><ul><li><p><code>connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才可以完成消息的生产和消费，在这里可以查看连接情况</code></p></li><li><p><code>channels：通道，建立连接后，会形成通道，消息的投递获取依赖通道。</code></p></li><li><p><code>Exchanges：交换机，用来实现消息的路由</code></p></li><li><p><code>Queues：队列，即消息队列，消息存放在队列中，等待消费，消费后被移除队列。</code></p></li></ul><h4 id="3-2-2-Admin用户和虚拟主机管理"><a href="#3-2-2-Admin用户和虚拟主机管理" class="headerlink" title="3.2.2 Admin用户和虚拟主机管理"></a>3.2.2 Admin用户和虚拟主机管理</h4><h5 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="1. 添加用户"></a>1. 添加用户</h5><p>![image-20191126162617280](RibbitMQ 实战教程.assets/image-20191126162617280.png)</p><p>上面的Tags选项，其实是指定用户的角色，可选的有以下几个：</p><ul><li><p><code>超级管理员(administrator)</code></p><p>可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p></li><li><p><code>监控者(monitoring)</code></p><p>可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p></li><li><p><code>策略制定者(policymaker)</code></p><p>可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</p></li><li><p><code>普通管理者(management)</code></p><p>仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。</p></li><li><p><code>其他</code></p><p>无法登陆管理控制台，通常就是普通的生产者和消费者。</p></li></ul><h5 id="2-创建虚拟主机"><a href="#2-创建虚拟主机" class="headerlink" title="2. 创建虚拟主机"></a>2. 创建虚拟主机</h5><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 虚拟主机</span><span class="token code keyword">    为了让各个用户可以互不干扰的工作，RabbitMQ添加了虚拟主机（Virtual Hosts）的概念。其实就是一个独立的访问路径，不同用户使用不同路径，各自有自己的队列、交换机，互相不会影响。</span></code></pre><p> ![image-20191126163023153](RibbitMQ 实战教程.assets/image-20191126163023153.png)</p><h5 id="3-绑定虚拟主机和用户"><a href="#3-绑定虚拟主机和用户" class="headerlink" title="3. 绑定虚拟主机和用户"></a>3. 绑定虚拟主机和用户</h5><p>创建好虚拟主机，我们还要给用户添加访问权限：</p><p>点击添加好的虚拟主机：</p><p> ![image-20191126163506795](RibbitMQ 实战教程.assets/image-20191126163506795.png)</p><p>进入虚拟机设置界面:</p><p>![image-20191126163631889](RibbitMQ 实战教程.assets/image-20191126163631889.png)</p><hr><h2 id="4-RabbitMQ-的第一个程序"><a href="#4-RabbitMQ-的第一个程序" class="headerlink" title="4.RabbitMQ 的第一个程序"></a>4.RabbitMQ 的第一个程序</h2><h3 id="4-0-AMQP协议的回顾"><a href="#4-0-AMQP协议的回顾" class="headerlink" title="4.0 AMQP协议的回顾"></a>4.0 AMQP协议的回顾</h3><p>![image-20200312140114784](RibbitMQ 实战教程.assets/image-20200312140114784.png)</p><h3 id="4-1-RabbitMQ支持的消息模型"><a href="#4-1-RabbitMQ支持的消息模型" class="headerlink" title="4.1 RabbitMQ支持的消息模型"></a>4.1 RabbitMQ支持的消息模型</h3><p>![image-20191126165434784](RibbitMQ 实战教程.assets/image-20191126165434784.png)</p><p>![image-20191126165459282](RibbitMQ 实战教程.assets/image-20191126165459282.png)</p><h3 id="4-2-引入依赖"><a href="#4-2-引入依赖" class="headerlink" title="4.2 引入依赖"></a>4.2 引入依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="4-3-第一种模型-直连"><a href="#4-3-第一种模型-直连" class="headerlink" title="4.3 第一种模型(直连)"></a>4.3 第一种模型(直连)</h3><p>![image-20191126165840602](RibbitMQ 实战教程.assets/image-20191126165840602.png)</p><p>在上图的模型中，有以下概念：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><h5 id="1-开发生产者"><a href="#1-开发生产者" class="headerlink" title="1. 开发生产者"></a>1. 开发生产者</h5><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//创建连接工厂</span>  ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"10.15.0.9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建通道</span>  Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//参数1: 是否持久化  参数2:是否独占队列 参数3:是否自动删除  参数4:其他属性</span>  channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>  channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span><span class="token string">"hello rabbitmq"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-开发消费者"><a href="#2-开发消费者" class="headerlink" title="2. 开发消费者"></a>2. 开发消费者</h5><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//创建连接工厂</span>  ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"10.15.0.9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/ems"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>  channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3-参数的说明"><a href="#3-参数的说明" class="headerlink" title="3. 参数的说明"></a>3. 参数的说明</h5><pre class=" language-java"><code class="language-java">  channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token string">'参数1'</span><span class="token operator">:</span>用来声明通道对应的队列  <span class="token string">'参数2'</span><span class="token operator">:</span>用来指定是否持久化队列  <span class="token string">'参数3'</span><span class="token operator">:</span>用来指定是否独占队列  <span class="token string">'参数4'</span><span class="token operator">:</span>用来指定是否自动删除队列  <span class="token string">'参数5'</span><span class="token operator">:</span>对队列的额外配置</code></pre><hr><h3 id="4-4-第二种模型-work-quene"><a href="#4-4-第二种模型-work-quene" class="headerlink" title="4.4 第二种模型(work quene)"></a>4.4 第二种模型(work quene)</h3><p><code>Work queues</code>，也被称为（<code>Task queues</code>），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用work 模型：<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p><p>![image-20200314221002008](RibbitMQ 实战教程.assets/image-20200314221002008.png)</p><p>角色：</p><ul><li>P：生产者：任务的发布者</li><li>C1：消费者-1，领取任务并且完成任务，假设完成速度较慢</li><li>C2：消费者-2：领取任务并完成任务，假设完成速度快</li></ul><h5 id="1-开发生产者-1"><a href="#1-开发生产者-1" class="headerlink" title="1. 开发生产者"></a>1. 开发生产者</h5><pre class=" language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"====>:我是消息"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="2-开发消费者-1"><a href="#2-开发消费者-1" class="headerlink" title="2.开发消费者-1"></a>2.开发消费者-1</h5><pre class=" language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3-开发消费者-2"><a href="#3-开发消费者-2" class="headerlink" title="3.开发消费者-2"></a>3.开发消费者-2</h5><pre class=" language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//处理消息比较慢 一秒处理一个消息</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者2: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-测试结果"><a href="#4-测试结果" class="headerlink" title="4.测试结果"></a>4.测试结果</h5><p>![image-20200314223242058](RibbitMQ 实战教程.assets/image-20200314223242058.png)</p><p>![image-20200314223302207](RibbitMQ 实战教程.assets/image-20200314223302207.png)</p><blockquote><p><code>总结:默认情况下，RabbitMQ将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式称为循环。</code></p></blockquote><h5 id="5-消息自动确认机制"><a href="#5-消息自动确认机制" class="headerlink" title="5.消息自动确认机制"></a>5.消息自动确认机制</h5><blockquote><p>Doing a task can take a few seconds. You may wonder what happens if one of the consumers starts a long task and dies with it only partly done. With our current code, once RabbitMQ delivers a message to the consumer it immediately marks it for deletion. In this case, if you kill a worker we will lose the message it was just processing. We’ll also lose all the messages that were dispatched to this particular worker but were not yet handled.</p><p>But we don’t want to lose any tasks. If a worker dies, we’d like the task to be delivered to another worker.</p></blockquote><pre class=" language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一次只接受一条未确认的消息</span><span class="token comment" spellcheck="true">//参数2:关闭自动确认消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//手动确认消息</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>设置通道一次只能消费一个消息</p></li><li><p>关闭消息的自动确认,开启手动确认消息</p><p>![image-20200314230412178](RibbitMQ 实战教程.assets/image-20200314230412178.png)</p><p>![image-20200314230423280](RibbitMQ 实战教程.assets/image-20200314230423280.png)</p></li></ul><hr><h3 id="4-5-第三种模型-fanout"><a href="#4-5-第三种模型-fanout" class="headerlink" title="4.5 第三种模型(fanout)"></a>4.5 第三种模型(fanout)</h3><p><code>fanout 扇出 也称为广播</code></p><p> ![image-20191126213115873](RibbitMQ 实战教程.assets/image-20191126213115873.png)</p><p>在广播模式下，消息发送流程是这样的：</p><ul><li> 可以有多个消费者</li><li> 每个<strong>消费者有自己的queue</strong>（队列）</li><li> 每个<strong>队列都要绑定到Exchange</strong>（交换机）</li><li><strong>生产者发送的消息，只能发送到交换机</strong>，交换机来决定要发给哪个队列，生产者无法决定。</li><li> 交换机把消息发送给绑定过的所有队列</li><li> 队列的消费者都能拿到消息。实现一条消息被多个消费者消费</li></ul><h5 id="1-开发生产者-2"><a href="#1-开发生产者-2" class="headerlink" title="1. 开发生产者"></a>1. 开发生产者</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//广播 一条消息多个消费者同时消费</span><span class="token comment" spellcheck="true">//发布消息</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-开发消费者-1-1"><a href="#2-开发消费者-1-1" class="headerlink" title="2. 开发消费者-1"></a>2. 开发消费者-1</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建临时队列</span>String queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将临时队列绑定exchange</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//处理消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3-开发消费者-2-1"><a href="#3-开发消费者-2-1" class="headerlink" title="3. 开发消费者-2"></a>3. 开发消费者-2</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建临时队列</span>String queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将临时队列绑定exchange</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//处理消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者2: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-开发消费者-3"><a href="#4-开发消费者-3" class="headerlink" title="4.开发消费者-3"></a>4.开发消费者-3</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//绑定交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">"fanout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建临时队列</span>String queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将临时队列绑定exchange</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//处理消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者3: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="5-测试结果"><a href="#5-测试结果" class="headerlink" title="5. 测试结果"></a>5. 测试结果</h5><p>![image-20200315180653207](RibbitMQ 实战教程.assets/image-20200315180653207.png)</p><p>![image-20200315180708489](RibbitMQ 实战教程.assets/image-20200315180708489.png)</p><p>![image-20200315180728035](RibbitMQ 实战教程.assets/image-20200315180728035.png)</p><hr><h3 id="4-6-第四种模型-Routing"><a href="#4-6-第四种模型-Routing" class="headerlink" title="4.6 第四种模型(Routing)"></a>4.6 第四种模型(Routing)</h3><h4 id="4-6-1-Routing-之订阅模型-Direct-直连"><a href="#4-6-1-Routing-之订阅模型-Direct-直连" class="headerlink" title="4.6.1 Routing 之订阅模型-Direct(直连)"></a>4.6.1 Routing 之订阅模型-Direct(直连)</h4><p><code>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</code></p><p> 在Direct模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p>流程:</p><p>![image-20191126220145375](RibbitMQ 实战教程.assets/image-20191126220145375.png)</p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li></ul><h5 id="1-开发生产者-3"><a href="#1-开发生产者-3" class="headerlink" title="1. 开发生产者"></a>1. 开发生产者</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明交换机  参数1:交换机名称 参数2:交换机类型 基于指令的Routing key转发</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发布消息</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"指定的route key"</span><span class="token operator">+</span>key<span class="token operator">+</span><span class="token string">"的消息"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-开发消费者-1-2"><a href="#2-开发消费者-1-2" class="headerlink" title="2.开发消费者-1"></a>2.开发消费者-1</h5><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//声明交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建临时队列</span>String queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//绑定队列和交换机</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"warn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3-开发消费者-2-2"><a href="#3-开发消费者-2-2" class="headerlink" title="3.开发消费者-2"></a>3.开发消费者-2</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建临时队列</span>String queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//绑定队列和交换机</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"logs_direct"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者2: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-测试生产者发送Route-key为error的消息时"><a href="#4-测试生产者发送Route-key为error的消息时" class="headerlink" title="4.测试生产者发送Route key为error的消息时"></a>4.测试生产者发送Route key为error的消息时</h5><p> ![image-20200316102613933](RibbitMQ 实战教程.assets/image-20200316102613933.png)</p><p> ![image-20200316102627912](RibbitMQ 实战教程.assets/image-20200316102627912.png)</p><h5 id="5-测试生产者发送Route-key为info的消息时"><a href="#5-测试生产者发送Route-key为info的消息时" class="headerlink" title="5.测试生产者发送Route key为info的消息时"></a>5.测试生产者发送Route key为info的消息时</h5><p> ![image-20200316102925740](RibbitMQ 实战教程.assets/image-20200316102925740.png)</p><p> ![image-20200316102947326](RibbitMQ 实战教程.assets/image-20200316102947326.png)</p><hr><h4 id="4-6-2-Routing-之订阅模型-Topic"><a href="#4-6-2-Routing-之订阅模型-Topic" class="headerlink" title="4.6.2 Routing 之订阅模型-Topic"></a>4.6.2 Routing 之订阅模型-Topic</h4><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！这种模型<code>Routingkey</code> 一般都是由一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p>![image-20191127121900255](RibbitMQ 实战教程.assets/image-20191127121900255.png)</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 统配符</span><span class="token code keyword">        * (star) can substitute for exactly one word.    匹配不多不少恰好1个词</span><span class="token code keyword">        # (hash) can substitute for zero or more words.  匹配一个或多个词</span><span class="token title important"><span class="token punctuation">#</span> 如:</span><span class="token code keyword">        audit.#    匹配audit.irs.corporate或者 audit.irs 等</span><span class="token code keyword">           audit.*   只能匹配 audit.irs</span></code></pre><h5 id="1-开发生产者-4"><a href="#1-开发生产者-4" class="headerlink" title="1.开发生产者"></a>1.开发生产者</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//生命交换机和交换机类型 topic 使用动态路由(通配符方式)</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String routekey <span class="token operator">=</span> <span class="token string">"user.save"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态路由key</span><span class="token comment" spellcheck="true">//发布消息</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span>routekey<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"这是路由中的动态订阅模型,route key: ["</span><span class="token operator">+</span>routekey<span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-开发消费者-1-3"><a href="#2-开发消费者-1-3" class="headerlink" title="2.开发消费者-1"></a>2.开发消费者-1</h5><p><code>Routing Key中使用*通配符方式</code></p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//声明交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建临时队列</span>String queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//绑定队列与交换机并设置获取交换机中动态路由</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3-开发消费者-2-3"><a href="#3-开发消费者-2-3" class="headerlink" title="3.开发消费者-2"></a>3.开发消费者-2</h5><p><code>Routing Key中使用#通配符方式</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"topic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建临时队列</span>String queue <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//绑定队列与交换机并设置获取交换机中动态路由</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消费消息</span>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者2: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-测试结果-1"><a href="#4-测试结果-1" class="headerlink" title="4.测试结果"></a>4.测试结果</h5><p> ![image-20200316113935785](RibbitMQ 实战教程.assets/image-20200316113935785.png)</p><p> ![image-20200316114000459](RibbitMQ 实战教程.assets/image-20200316114000459.png)</p><h2 id="5-SpringBoot中使用RabbitMQ"><a href="#5-SpringBoot中使用RabbitMQ" class="headerlink" title="5. SpringBoot中使用RabbitMQ"></a>5. SpringBoot中使用RabbitMQ</h2><h3 id="5-0-搭建初始环境"><a href="#5-0-搭建初始环境" class="headerlink" title="5.0 搭建初始环境"></a>5.0 搭建初始环境</h3><h5 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h5><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h5 id="2-配置配置文件"><a href="#2-配置配置文件" class="headerlink" title="2. 配置配置文件"></a>2. 配置配置文件</h5><pre class=" language-yml"><code class="language-yml">spring:  application:    name: springboot_rabbitmq  rabbitmq:    host: 10.15.0.9    port: 5672    username: ems    password: 123    virtual-host: /ems</code></pre><p><code>RabbitTemplate</code>  用来简化操作     使用时候直接在项目中注入即可使用</p><h3 id="5-1-第一种hello-world模型使用"><a href="#5-1-第一种hello-world模型使用" class="headerlink" title="5.1 第一种hello world模型使用"></a>5.1 第一种hello world模型使用</h3><ol><li><h5 id="开发生产者"><a href="#开发生产者" class="headerlink" title="开发生产者"></a>开发生产者</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><h5 id="开发消费者"><a href="#开发消费者" class="headerlink" title="开发消费者"></a>开发消费者</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloCustomer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="5-2-第二种work模型使用"><a href="#5-2-第二种work模型使用" class="headerlink" title="5.2 第二种work模型使用"></a>5.2 第二种work模型使用</h3><ol><li><h5 id="开发生产者-1"><a href="#开发生产者-1" class="headerlink" title="开发生产者"></a>开发生产者</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">,</span><span class="token string">"hello work!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><h5 id="开发消费者-1"><a href="#开发消费者-1" class="headerlink" title="开发消费者"></a>开发消费者</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkCustomer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"work message1 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">"work"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"work message2 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p><code>说明:默认在Spring AMQP实现中Work这种方式就是公平调度,如果需要实现能者多劳需要额外配置</code></p></blockquote></li></ol><h3 id="5-3-Fanout-广播模型"><a href="#5-3-Fanout-广播模型" class="headerlink" title="5.3 Fanout 广播模型"></a>5.3 Fanout 广播模型</h3><ol><li><h5 id="开发生产者-2"><a href="#开发生产者-2" class="headerlink" title="开发生产者"></a>开发生产者</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFanout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"这是日志广播"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><h5 id="开发消费者-2"><a href="#开发消费者-2" class="headerlink" title="开发消费者"></a>开发消费者</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FanoutCustomer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>            value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>            exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"logs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>            value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//创建临时队列</span>            exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"logs"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token string">"fanout"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//绑定交换机类型</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="5-4-Route-路由模型"><a href="#5-4-Route-路由模型" class="headerlink" title="5.4 Route 路由模型"></a>5.4 Route 路由模型</h3><ol><li><h5 id="开发生产者-3"><a href="#开发生产者-3" class="headerlink" title="开发生产者"></a>开发生产者</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"directs"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"error 的日志信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><h5 id="开发消费者-3"><a href="#开发消费者-3" class="headerlink" title="开发消费者"></a>开发消费者</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectCustomer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">"direct"</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"directs"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"error"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">"direct"</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"directs"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="5-5-Topic-订阅模型-动态路由模型"><a href="#5-5-Topic-订阅模型-动态路由模型" class="headerlink" title="5.5 Topic 订阅模型(动态路由模型)"></a>5.5 Topic 订阅模型(动态路由模型)</h3><ol><li><h5 id="开发生产者-4"><a href="#开发生产者-4" class="headerlink" title="开发生产者"></a>开发生产者</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//topic</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topics"</span><span class="token punctuation">,</span><span class="token string">"user.save.findAll"</span><span class="token punctuation">,</span><span class="token string">"user.save.findAll 的消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><h5 id="开发消费者-4"><a href="#开发消费者-4" class="headerlink" title="开发消费者"></a>开发消费者</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopCustomer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                    key <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"user.*"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"topics"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive1</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message1 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>                    value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">,</span>                    key <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"user.#"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">"topic"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"topics"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive2</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"message2 = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr></li></ol><h2 id="6-MQ的应用场景"><a href="#6-MQ的应用场景" class="headerlink" title="6. MQ的应用场景"></a>6. MQ的应用场景</h2><h3 id="6-1-异步处理"><a href="#6-1-异步处理" class="headerlink" title="6.1 异步处理"></a>6.1 异步处理</h3><p><code>场景说明：用户注册后，需要发注册邮件和注册短信,传统的做法有两种 1.串行的方式 2.并行的方式</code></p><ul><li><code>串行方式:</code> 将注册信息写入数据库后,发送注册邮件,再发送注册短信,以上三个任务全部完成后才返回给客户端。 这有一个问题是,邮件,短信并不是必须的,它只是一个通知,而这种做法让客户端等待没有必要等待的东西. </li></ul><p> ![这里写图片描述](RibbitMQ 实战教程.assets/SouthEast-4860248.png)</p><ul><li><code>并行方式: </code>将注册信息写入数据库后,发送邮件的同时,发送短信,以上三个任务完成后,返回给客户端,并行的方式能提高处理的时间。 </li></ul><p> ![这里写图片描述](RibbitMQ 实战教程.assets/SouthEast-20191127211112660.png)</p><ul><li><p><code>消息队列:</code>假设三个业务节点分别使用50ms,串行方式使用时间150ms,并行使用时间100ms。虽然并行已经提高的处理时间,但是,前面说过,邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功,应该是写入数据库后就返回.  <code>消息队列</code>: 引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理 </p><p>![img](RibbitMQ 实战教程.assets/592892-20190520220249900-1679743651.jpg)</p></li></ul><p>由此可以看出,引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间(可以忽略不计),引入消息队列后处理后,响应时间是串行的3倍,是并行的2倍。</p><h3 id="6-2-应用解耦"><a href="#6-2-应用解耦" class="headerlink" title="6.2 应用解耦"></a>6.2 应用解耦</h3><p><code>场景：双11是购物狂节,用户下单后,订单系统需要通知库存系统,传统的做法就是订单系统调用库存系统的接口. </code></p><p> ![这里写图片描述](RibbitMQ 实战教程.assets/SouthEast-20191127211247287.png)</p><p>这种做法有一个缺点:</p><p>当库存系统出现故障时,订单就会失败。 订单系统和库存系统高耦合.  引入消息队列 </p><p> ![这里写图片描述](RibbitMQ 实战教程.assets/SouthEast-20191127211304085.png)</p><ul><li><p><code>订单系统:</code>用户下单后,订单系统完成持久化处理,将消息写入消息队列,返回用户订单下单成功。</p></li><li><p><code>库存系统:</code>订阅下单的消息,获取下单消息,进行库操作。  就算库存系统出现故障,消息队列也能保证消息的可靠投递,不会导致消息丢失.</p></li></ul><h3 id="6-3-流量削峰"><a href="#6-3-流量削峰" class="headerlink" title="6.3 流量削峰"></a>6.3 流量削峰</h3><p> <code>场景:</code> 秒杀活动，一般会因为流量过大，导致应用挂掉,为了解决这个问题，一般在应用前端加入消息队列。  </p><p>  <code>作用:</code> </p><p>​            1.可以控制活动人数，超过此一定阀值的订单直接丢弃(我为什么秒杀一次都没有成功过呢^^) </p><p>​            2.可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单) </p><p> ![这里写图片描述](RibbitMQ 实战教程.assets/SouthEast-20191127211341601.png)</p><p>1.用户的请求,服务器收到之后,首先写入消息队列,加入消息队列长度超过最大值,则直接抛弃用户请求或跳转到错误页面.  </p><p>2.秒杀业务根据消息队列中的请求信息，再做后续处理.</p><hr><h2 id="7-RabbitMQ的集群"><a href="#7-RabbitMQ的集群" class="headerlink" title="7. RabbitMQ的集群"></a>7. RabbitMQ的集群</h2><h3 id="7-1-集群架构"><a href="#7-1-集群架构" class="headerlink" title="7.1 集群架构"></a>7.1 集群架构</h3><h4 id="7-1-1-普通集群-副本集群"><a href="#7-1-1-普通集群-副本集群" class="headerlink" title="7.1.1 普通集群(副本集群)"></a>7.1.1 普通集群(副本集群)</h4><blockquote><p>All data/state required for the operation of a RabbitMQ broker is replicated across all nodes. An exception to this are message queues, which by default reside on one node, though they are visible and reachable from all nodes. To replicate queues across nodes in a cluster   –摘自官网</p></blockquote><p><code>默认情况下:RabbitMQ代理操作所需的所有数据/状态都将跨所有节点复制。这方面的一个例外是消息队列，默认情况下，消息队列位于一个节点上，尽管它们可以从所有节点看到和访问</code></p><ol><li><h5 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h5></li></ol><p>![image-20200320094147471](RibbitMQ 实战教程.assets/image-20200320094147471.png)</p><p>​    核心解决问题:  <code>当集群中某一时刻master节点宕机,可以对Quene中信息,进行备份</code></p><ol start="2"><li><h5 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h5><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.集群规划</span><span class="token code keyword">    node1: 10.15.0.3  mq1  master 主节点</span><span class="token code keyword">    node2: 10.15.0.4  mq2  repl1  副本节点</span><span class="token code keyword">    node3: 10.15.0.5  mq3  repl2  副本节点</span><span class="token title important"><span class="token punctuation">#</span> 1.克隆三台机器主机名和ip映射</span><span class="token code keyword">    vim /etc/hosts加入:</span><span class="token code keyword">         10.15.0.3 mq1</span><span class="token code keyword">        10.15.0.4 mq2</span><span class="token code keyword">        10.15.0.5 mq3</span><span class="token code keyword">    node1: vim /etc/hostname 加入:  mq1</span><span class="token code keyword">    node2: vim /etc/hostname 加入:  mq2</span><span class="token code keyword">    node3: vim /etc/hostname 加入:  mq3</span><span class="token title important"><span class="token punctuation">#</span> 2.三个机器安装rabbitmq,并同步cookie文件,在node1上执行:</span><span class="token code keyword">    scp /var/lib/rabbitmq/.erlang.cookie root@mq2:/var/lib/rabbitmq/</span><span class="token code keyword">    scp /var/lib/rabbitmq/.erlang.cookie root@mq3:/var/lib/rabbitmq/</span><span class="token title important"><span class="token punctuation">#</span> 3.查看cookie是否一致:</span><span class="token code keyword">    node1: cat /var/lib/rabbitmq/.erlang.cookie </span><span class="token code keyword">    node2: cat /var/lib/rabbitmq/.erlang.cookie </span><span class="token code keyword">    node3: cat /var/lib/rabbitmq/.erlang.cookie </span><span class="token title important"><span class="token punctuation">#</span> 4.后台启动rabbitmq所有节点执行如下命令,启动成功访问管理界面:</span><span class="token code keyword">    rabbitmq-server -detached </span><span class="token title important"><span class="token punctuation">#</span> 5.在node2和node3执行加入集群命令:</span><span class="token code keyword">    1.关闭       rabbitmqctl stop_app</span><span class="token code keyword">    2.加入集群    rabbitmqctl join_cluster rabbit@mq1</span><span class="token code keyword">    3.启动服务    rabbitmqctl start_app</span><span class="token title important"><span class="token punctuation">#</span> 6.查看集群状态,任意节点执行:</span><span class="token code keyword">    rabbitmqctl cluster_status</span><span class="token title important"><span class="token punctuation">#</span> 7.如果出现如下显示,集群搭建成功:</span><span class="token code keyword">    Cluster status of node rabbit@mq3 ...</span><span class="token code keyword">    [{nodes,[{disc,[rabbit@mq1,rabbit@mq2,rabbit@mq3]}]},</span><span class="token code keyword">    {running_nodes,[rabbit@mq1,rabbit@mq2,rabbit@mq3]},</span><span class="token code keyword">    {cluster_name,&lt;&lt;"rabbit@mq1">>},</span><span class="token code keyword">    {partitions,[]},</span><span class="token code keyword">    {alarms,[{rabbit@mq1,[]},{rabbit@mq2,[]},{rabbit@mq3,[]}]}]</span><span class="token title important"><span class="token punctuation">#</span> 8.登录管理界面,展示如下状态:</span></code></pre><p>![image-20200320095613586](RibbitMQ 实战教程.assets/image-20200320095613586.png)</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 9.测试集群在node1上,创建队列</span></code></pre><p>![image-20200320095743935](RibbitMQ 实战教程.assets/image-20200320095743935.png)</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 10.查看node2和node3节点:</span></code></pre><p>![image-20200320095827688](RibbitMQ 实战教程.assets/image-20200320095827688.png)</p><p>![image-20200320095843370](RibbitMQ 实战教程.assets/image-20200320095843370.png)</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 11.关闭node1节点,执行如下命令,查看node2和node3:</span><span class="token code keyword">    rabbitmqctl stop_app</span></code></pre><p>![image-20200320100000347](RibbitMQ 实战教程.assets/image-20200320100000347.png)</p><p>![image-20200320100010968](RibbitMQ 实战教程.assets/image-20200320100010968.png)</p><hr></li></ol><h4 id="7-1-2-镜像集群"><a href="#7-1-2-镜像集群" class="headerlink" title="7.1.2 镜像集群"></a>7.1.2 镜像集群</h4><blockquote><p>This guide covers mirroring (queue contents replication) of classic queues  –摘自官网</p><p>By default, contents of a queue within a RabbitMQ cluster are located on a single node (the node on which the queue was declared). This is in contrast to exchanges and bindings, which can always be considered to be on all nodes. Queues can optionally be made <em>mirrored</em> across multiple nodes. –摘自官网</p></blockquote><p><code>镜像队列机制就是将队列在三个节点之间设置主从关系，消息会在三个节点之间进行自动同步，且如果其中一个节点不可用，并不会导致消息丢失或服务不可用的情况，提升MQ集群的整体高可用性。</code></p><ol><li><h5 id="集群架构图"><a href="#集群架构图" class="headerlink" title="集群架构图"></a>集群架构图</h5><p>![image-20200320113423235](RibbitMQ 实战教程.assets/image-20200320113423235.png)</p></li><li><h5 id="配置集群架构"><a href="#配置集群架构" class="headerlink" title="配置集群架构"></a>配置集群架构</h5><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.策略说明</span><span class="token code keyword">    rabbitmqctl set_policy [-p &lt;vhost>] [--priority &lt;priority>] [--apply-to &lt;apply-to>] &lt;name> &lt;pattern>  &lt;definition></span><span class="token code keyword">    -p Vhost： 可选参数，针对指定vhost下的queue进行设置</span><span class="token code keyword">    Name:     policy的名称</span><span class="token code keyword">    Pattern: queue的匹配模式(正则表达式)</span><span class="token code keyword">    Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode</span><span class="token code keyword">                   ha-mode:指明镜像队列的模式，有效值为 all/exactly/nodes</span><span class="token code keyword">                        all：表示在集群中所有的节点上进行镜像</span><span class="token code keyword">                        exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定</span><span class="token code keyword">                        nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定</span><span class="token code keyword">                 ha-params：ha-mode模式需要用到的参数</span><span class="token code keyword">                ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manual</span><span class="token code keyword">                priority：可选参数，policy的优先级</span><span class="token code keyword">                </span><span class="token code keyword">                 </span><span class="token title important"><span class="token punctuation">#</span> 1.查看当前策略</span><span class="token code keyword">    rabbitmqctl list_policies</span><span class="token title important"><span class="token punctuation">#</span> 2.添加策略</span><span class="token code keyword">    rabbitmqctl set_policy ha-all '^hello' '{"ha-mode":"all","ha-sync-mode":"automatic"}' </span><span class="token code keyword">    说明:策略正则表达式为 “^” 表示所有匹配所有队列名称  ^hello:匹配hello开头队列</span><span class="token title important"><span class="token punctuation">#</span> 3.删除策略</span><span class="token code keyword">    rabbitmqctl clear_policy ha-all</span><span class="token title important"><span class="token punctuation">#</span> 4.测试集群</span></code></pre><hr></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> RibbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http协议</title>
      <link href="2021/04/09/http-xie-yi/"/>
      <url>2021/04/09/http-xie-yi/</url>
      
        <content type="html"><![CDATA[<h4 id="tcp"><a href="#tcp" class="headerlink" title="tcp"></a>tcp</h4><p>TCP提供一个面向连接的，可靠的字节流服务<br>面向连接意味着两个使用TCP的应用（通常是一个客户端和服务器）在彼此交换数据之前必须先建立<br>一个TCP连接。<br>在一个TCP连接中，仅有两方进行彼此通信</p><h4 id="tcp提供可靠传输"><a href="#tcp提供可靠传输" class="headerlink" title="tcp提供可靠传输"></a>tcp提供可靠传输</h4><p>应用数据被分割成tcp认为最合适发送的数据块（便于传输）<br>当tcp发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段（快递）<br>当tcp收到发自TCP连接另一端的数据它将发送一个确认，这个确认不是立即发送，通常将推迟几分之一秒（一般200ms）。<br>tcp将保持它首部和数据的校验和（保证数据没有被破坏）<br>解决ip ip缺点，丢包，重复，乱序<br>tcp报文段作为ip数据报来传输，而ip数据报的到可能会失序，因此TCP报文段的到达也可能会失序，如果必要，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层。<br>既然ip数据报会发生重复，tcp的接收端必须丢弃重复的数据。<br>tcp还能提供流量控制，tcpl连接的每一方都要固定大小的缓冲空间。TCP的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这样将防止较快主机致使较慢主机的缓冲区溢出。</p><h4 id="tcp字节流"><a href="#tcp字节流" class="headerlink" title="tcp字节流"></a>tcp字节流</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="2021/04/09/shu-ju-jie-gou/"/>
      <url>2021/04/09/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><p>数据元素之间存在一对一的线性关系。</p><p>线性结构有两种不同的存储方式</p><p>线性结构常见的有：数组（稀疏数组、）、队列（单向队列，环形队列）、链表（单链表、环形链表、双链表）、栈</p><h3 id="顺序存储方式"><a href="#顺序存储方式" class="headerlink" title="顺序存储方式"></a>顺序存储方式</h3><p>顺序存储的线性表称为顺序表，顺序表中存储的元素的连续的（内存分配的地址）如数组。</p><p><strong>稀疏数组示例</strong>  围棋棋盘（二维数组转换为稀疏数组，稀疏数组转换为棋盘）</p><pre class=" language-java"><code class="language-java">​```<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestOne</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">//将棋盘二维数组转换为稀疏数组</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建棋盘数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//白子(1)：2行3列</span>        <span class="token comment" spellcheck="true">//黑子(2)：3行4列</span>        arr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        arr1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建稀疏数组</span>        <span class="token comment" spellcheck="true">//row col value</span>        <span class="token comment" spellcheck="true">// 11 11    2</span>        <span class="token comment" spellcheck="true">//2.1遍历求得棋盘中棋子的数量</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始棋盘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">:</span>arr1<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sum<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"棋盘中棋子的数量"</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * row col value         * 11  11  2         * 1   2   1         * 2   3   2         */</span>        xs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        xs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>        xs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成稀疏数组</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                    System.out.println(i);</span><span class="token comment" spellcheck="true">//                    System.out.println(j);</span>                    z<span class="token operator">++</span><span class="token punctuation">;</span>                    xs<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    xs<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    xs<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        xs[1][0] = 1;</span><span class="token comment" spellcheck="true">//        xs[1][1] = 2;</span><span class="token comment" spellcheck="true">//        xs[1][2] = 1;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        xs[2][0] = 2;</span><span class="token comment" spellcheck="true">//        xs[2][1] = 3;</span><span class="token comment" spellcheck="true">//        xs[2][2] = 2;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"稀疏棋盘显示"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token operator">:</span>xs<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">:</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//稀疏数组转换为棋盘二维数组</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> qp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>xs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>xs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>xs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          qp<span class="token punctuation">[</span>xs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>xs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> xs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"稀疏数组转换完二维数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">:</span>qp<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sum<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>队列</strong></p><p>队列是一个有序列表，可以用数组或链表实现</p><p>遵循先进先出的原则，先存入队列的数据，要先取出，后存入的数据要后取出。</p><p><strong>数组模拟队列代码实现</strong></p><p>数组模拟队列示意图</p><p><img src="eg ./images/loading.gif" data-original="C:\Users\21974\AppData\Roaming\Typora\typora-user-images\image-20201218094258805.png" alt="image-20201218094258805"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayQueue</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 数组模拟队列     * rear：队列后置标志 （随着队列元素增加而增加） 初始化=-1     * front:队列前置标志（队列中头一个位置-1）（随着队列减少而增加）初始化=-1     * 构造     * 添加     * maxSize:队列能够存储的最大元素     * isMax（是否超出队列最大限制） = maxSize-1(因为数组索引从0开始)、     * isEmpty     * showQueue 遍历 队列     * showHead 返回队列头部     * getQueue     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rear<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayQueue arrayQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayQueue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户输入</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出菜单</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s：显示队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e：退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a：添加队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"g：从队列中取值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h：查看队列头部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>                    arrayQueue<span class="token punctuation">.</span><span class="token function">showQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"please inout number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> value <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    arrayQueue<span class="token punctuation">.</span><span class="token function">addQueue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'g'</span><span class="token operator">:</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取出的数据是："</span> <span class="token operator">+</span> arrayQueue<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        String message <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'h'</span><span class="token operator">:</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列头的数据是："</span> <span class="token operator">+</span> arrayQueue<span class="token punctuation">.</span><span class="token function">getHeadQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        String message <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span>                    scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ArrayQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//队列尾下表</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//队列头前一个位置的下标</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//队列是否为空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//队列是否已满</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> maxSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将元素存入队列中</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            rear<span class="token operator">++</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"元素添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列已满不能添加数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//取出队列数据</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列中没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列中没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        front<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//查询队列</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回队列头部</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHeadQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列中没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列中没有数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述代码已经完成了一个最基本的队列，但是存在问题如下</p><p>1.目前数组只能使用一次，达不到复用效果</p><p>2.将这个数组使用算法改进成环形数组 核心取模（%）</p><p><strong>优化队列（取模）</strong></p><p><strong>数组模拟环形队列</strong></p><h3 id="链式存储方式"><a href="#链式存储方式" class="headerlink" title="链式存储方式"></a>链式存储方式</h3><p>链式存储方式称为链表，链表中的数据元素不一定是连续的，元素节点中存放数据元素以及相邻元素的地址信息，可以充分利用碎片内存</p><h2 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h2><p>元素之间不存在一对一关系</p><p>非线性结构包括：二维数组、多维数组、广义表、树结构、图结构</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写Proimise</title>
      <link href="2021/04/09/shou-xie-promise-zhong-ji-ban/"/>
      <url>2021/04/09/shou-xie-promise-zhong-ji-ban/</url>
      
        <content type="html"><![CDATA[<p>手写Promise中级版</p><h4 id="搭建基本结构"><a href="#搭建基本结构" class="headerlink" title="搭建基本结构"></a>搭建基本结构</h4><p>lib/Promise.js</p><pre><code>/** *  * 自定义Promise函数模块 */(function (window){        function Promise(executor){    }    /**     * Promise原型对象的then()     * 指定成功和失败的回调函数     * 返回一个新的Promise对象     */    Promise.prototype.then = function(onResolved,onRejected){    }    /**     * Promise原型对象的catch()     * 指定失败的回调函数     * 返回一个新的Promise对象     */    Promise.prototype.catch = function(onRejected){    }    /**     * Promise函数对象的resolve方法     * 返回一个成功的Promise     *      */    Promise.resolve = function(value){    }    /**     * Promise函数的reject方法     * 返回一个指定reason的失败的promise     */    Promise.reject = function(reason){    }    /**     * Promsie函数对象all方法     * 返回一个promise，只有当所有promise都成功时才成功，否则只要有一个失败就失败     */    Promise.all = function(promises){    }    /**     * Promise函数对象的race方法     * 返回一个promise，其结果有第一个完成的promise决定     */    Promise.race = function(promises){            }    //向外暴露Promsie函数    window.Promise = Promise})(window)</code></pre><p>在index.html引入</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script src="./lib/Promise.js"&gt;&lt;/script&gt;    &lt;script&gt;        new Promise((resolve,reject)=&gt;{        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="实现Promise构造函数"><a href="#实现Promise构造函数" class="headerlink" title="实现Promise构造函数"></a>实现Promise构造函数</h4><p><strong>定义resolve与reject</strong></p><pre><code>(function (window){        function Promise(executor){        //定义resolve与reject函数        function resolve(value){        }        function reject(reason){                    }        //立即同步执行 执行器        executor(resolve,reject)    }    ...</code></pre><p>Promise构造函数接收一个执行，我们要在内部同步执行执行器<br>如</p><pre><code> &lt;script&gt;        new Promise((resolve,reject)=&gt;{            resolve(1)        })&lt;/script&gt;</code></pre><pre><code>...  //立即同步执行 执行器executor(resolve,reject)...</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa2快速入门</title>
      <link href="2021/04/09/koa2-kuai-su-ru-men/"/>
      <url>2021/04/09/koa2-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本课程只适合学过 <code>nodeJs</code> 的同学。</p><h2 id="一、Koa2安装"><a href="#一、Koa2安装" class="headerlink" title="一、Koa2安装"></a>一、Koa2安装</h2><p>创建一个空白目录，然后进入终端，并在终端对koa进行安装：</p><pre class=" language-js"><code class="language-js"># 项目初始化npm init <span class="token operator">-</span>y# 安装koa2npm i koa2 <span class="token operator">-</span>S</code></pre><h2 id="二、入口文件"><a href="#二、入口文件" class="headerlink" title="二、入口文件"></a>二、入口文件</h2><p>在项目根目录创建 <code>app.js</code> 文件，并在上一步操作中生成的 <code>package.json</code> 里配置：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"node app.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>在 <code>app.js</code> 中：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*     解释下面这段代码：    app.use()方法是：将给定的中间件方法添加到此应用程序。简单说就是调用中间件    app.use() 返回 this, 因此可以链式表达*/</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"Hello, Koa"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// ctx.body是ctx.response.body的简写</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at http://localhost:'</span><span class="token operator">+</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>然后运行 <code>npm start</code> ，并在浏览器输入 <code>http://localhost:9000/</code> 即可看到页面效果。</p><h2 id="三、洋葱模型"><a href="#三、洋葱模型" class="headerlink" title="三、洋葱模型"></a>三、洋葱模型</h2><p>学Koa必须要了解 <code>洋葱模型</code> :</p><img src="eg ./images/loading.gif" data-original="https://segmentfault.com/img/bV6DZG/view?w=478&amp;h=435" style="1px solid"><p><code>Koa</code> 和 <code>Express</code> 都会使用到中间件，Express的中间件是顺序执行，从第一个中间件执行到最后一个中间件，发出响应：</p><img src="eg ./images/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/3663059-b6acea9ec3f0a8f9.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/883/format/webp" style="border: 1px solid"><p>Koa是从第一个中间件开始执行，遇到 <code>next</code> 进入下一个中间件，一直执行到最后一个中间件，在逆序，执行上一个中间件 <code>next</code> 之后的代码，一直到第一个中间件执行结束才发出响应。</p><img src="eg ./images/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/3663059-03622ea2a9ffce2a.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/814/format/webp" style="border: 1px solid"><p>对于这个洋葱模型，我们用代码来解释一下。假如把上面的代码改写成：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at http://localhost:'</span><span class="token operator">+</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>那么在浏览器刷新后，控制台得到的顺序是：</p><pre><code>12321</code></pre><p>现在可以看到，我们通过 <code>next</code>可以先运行下个中间件，等中间件结束后，再继续运行当前 <code>next()</code> 之后的代码。</p><h2 id="四、路由安装"><a href="#四、路由安装" class="headerlink" title="四、路由安装"></a>四、路由安装</h2><p>当需要匹配不同路由时，可以安装：</p><pre><code>npm i koa-router</code></pre><p>将 <code>app.js</code> 修改：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"首页"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"列表页"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at http://localhost:'</span><span class="token operator">+</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>此时，到浏览器刷新并在地址栏最后添加 <code>/list</code> 即可得到首页和列表页。</p><p>备注：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 调用router.routes()来组装匹配好的路由，返回一个合并好的中间件</span><span class="token comment" spellcheck="true">// 调用router.allowedMethods()获得一个中间件，当发送了不符合的请求时，会返回 `405 Method Not Allowed` 或 `501 Not Implemented`</span>allowedMethods方法可以做以下配置：app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// throw: true, // 抛出错误，代替设置响应头状态</span>    <span class="token comment" spellcheck="true">// notImplemented: () => '不支持当前请求所需要的功能',</span>    <span class="token comment" spellcheck="true">// methodNotAllowed: () => '不支持的请求方式'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="五、路由拆分"><a href="#五、路由拆分" class="headerlink" title="五、路由拆分"></a>五、路由拆分</h2><p>有时候我们需要拆分路由，比如：</p><p>列表页下所有的子路由（即前端请求的api）与首页所有的子路由想分开处理，那么就需要拆分路由。</p><h3 id="1、创建-router-文件夹"><a href="#1、创建-router-文件夹" class="headerlink" title="1、创建 router 文件夹"></a>1、创建 <code>router</code> 文件夹</h3><p>创建router文件夹，并在其中创建：<code>index.js</code> （路由总入口文件）、<code>home.js</code> （首页总路由文件）、<code>list.js</code> （列表页总路由文件）：</p><pre class=" language-js"><code class="language-js"># app<span class="token punctuation">.</span>js<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router/index'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span># index<span class="token punctuation">.</span>js<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> home <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./home'</span><span class="token punctuation">)</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./list'</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span># home<span class="token punctuation">.</span>js<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> home <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里的 '/' 就是指向 index.js 中的 /home</span>home<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"首页"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> home<span class="token punctuation">;</span># list<span class="token punctuation">.</span>js<span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"列表页"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> list<span class="token punctuation">;</span></code></pre><p>到浏览器刷新 <code>localhost:9000/home</code> 与 <code>localhost:9000/list</code> 即可得到首页与列表页。</p><h3 id="2、路由重定向"><a href="#2、路由重定向" class="headerlink" title="2、路由重定向"></a>2、路由重定向</h3><p>那么有同学会问了，如果我想直接从 <code>localhost:9000</code> 重定向到 <code>localhost:9000/home</code> 该怎么办？</p><p>我们可以在 <code>router/index.js</code> 中做如下配置：</p><pre class=" language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> home<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span>router<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3、404无效路由"><a href="#3、404无效路由" class="headerlink" title="3、404无效路由"></a>3、404无效路由</h3><p>如果被访问到无效路由，那么我们可以统一返回404页面：</p><p>在 <code>router</code> 下 <code>errorPage.js</code> :</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> errorPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>errorPage<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"访问页面不存在"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> errorPage<span class="token punctuation">;</span></code></pre><p>在 <code>app.js</code> 中引用：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 匹配不到页面的全部跳转去404</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"/404"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="六、统一异常处理（可选）"><a href="#六、统一异常处理（可选）" class="headerlink" title="六、统一异常处理（可选）"></a>六、统一异常处理（可选）</h2><p>作为后端开发，我们经常需要统一异常处理，避免每次都要自己手写404或200进行返回，因此我们可以创建 <code>utils/errorHandler.js</code> ：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 统一异常处理</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> fileName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            status <span class="token operator">=</span> ctx<span class="token punctuation">.</span>status<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//console.log(err);</span>            status <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">>=</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">400</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">404</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token number">500</span><span class="token punctuation">:</span>                    fileName <span class="token operator">=</span> status<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                    fileName <span class="token operator">=</span> <span class="token string">"other"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后在 <code>app.js</code> 中引入：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> errorHandler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils/errorHandler.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token function">errorHandler</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其实这一块不写关系也不大，但最好还是加上。</p><h2 id="七、操作mysql函数封装"><a href="#七、操作mysql函数封装" class="headerlink" title="七、操作mysql函数封装"></a>七、操作mysql函数封装</h2><p>这里已经给大家直接封装好了一个库，专门用来操作mysql的。至于mysql的学习，将在独立的mysql教程中呈现。</p><p>首先，项目内安装 <code>mysql</code>：</p><pre class=" language-js"><code class="language-js">yarn add mysql</code></pre><p>现在，我们在 <code>utils</code> 目录下创建一个 <code>db.js</code> 文件：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token keyword">var</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 连接的服务器(代码托管到线上后，需改为内网IP，而非外网)</span>    port<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// mysql服务运行的端口</span>    database<span class="token punctuation">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 选择的库</span>    user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 用户名</span>    password<span class="token punctuation">:</span> <span class="token string">'123456'</span> <span class="token comment" spellcheck="true">// 用户密码   </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//对数据库进行增删改查操作的基础</span><span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">{</span>        connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span>rows<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>rows<span class="token punctuation">)</span>            connection<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>query <span class="token operator">=</span> query<span class="token punctuation">;</span></code></pre><p>调用方式：</p><blockquote><p>假设要访问首页(‘/home’)时，要查询表users中所有的数据，可以如下操作：</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/db.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>home    <span class="token comment" spellcheck="true">// 页面底部外链</span>    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">let</span> sqlLang <span class="token operator">=</span> <span class="token template-string"><span class="token string">`select * from users`</span></span><span class="token punctuation">;</span>            db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlLang<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回拿到的数据</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="八、后端允许跨域"><a href="#八、后端允许跨域" class="headerlink" title="八、后端允许跨域"></a>八、后端允许跨域</h2><p>前端想跨域，可以设置proxy。如果后端允许跨域，可以如下操作：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 安装koa2-cors</span>cnpm i koa2<span class="token operator">-</span>cors<span class="token comment" spellcheck="true">// 这里cors中间件一定要写在路由之前</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="九、读取静态资源文件"><a href="#九、读取静态资源文件" class="headerlink" title="九、读取静态资源文件"></a>九、读取静态资源文件</h2><p>首先，在项目的根目录下创建 <code>assets</code> 后，将图片资源文件夹 <code>images</code> 放到其中，并且执行以下操作：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 安装koa-static</span>cnpm install koa<span class="token operator">-</span><span class="token keyword">static</span><span class="token comment" spellcheck="true">// 引入</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-static'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获取静态资源文件夹</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">'/assets'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>假设其中有一张图片叫做 <code>banner1.png</code>，那么我们打开浏览器，访问：<code>http://localhost:5050/images/banner1.png</code> 即可得到图片。这里注意：</p><blockquote><p>路径上不需要写assets，因为我们已经指定了访问资源时， <a href="http://localhost:5050/">http://localhost:5050</a> 自动指向 assets 文件夹。</p></blockquote><p>由此，我们知道数据库中图片的地址只需要填写 <code>/images/banner1.png</code> 即可。</p><h2 id="十、mysql录入数据"><a href="#十、mysql录入数据" class="headerlink" title="十、mysql录入数据"></a>十、mysql录入数据</h2><p>请参考当前目录下的《Chapter2-mysql2操作.md》。</p><h2 id="十一、POST请求"><a href="#十一、POST请求" class="headerlink" title="十一、POST请求"></a>十一、POST请求</h2><p>我们以登录举例讲post请求。</p><p>这里规定：前端发送 账号+密码 到后端，如果账号不存在于数据库，则注册账号。</p><p>如果账号存在于数据库中，则验证密码。</p><p>验证密码通过或注册账号成功，都返回token给前端。</p><h3 id="1、建表"><a href="#1、建表" class="headerlink" title="1、建表"></a>1、建表</h3><p>设定字段为account和pwd</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> users <span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    account <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'账号'</span><span class="token punctuation">,</span>    pwd <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  token <span class="token keyword">LONGTEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'令牌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2、form表单页面"><a href="#2、form表单页面" class="headerlink" title="2、form表单页面"></a>2、form表单页面</h3><p>在 <code>assets</code> 下创建 <code>index.html</code> ：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>账号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>account<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入账号<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录/注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> <span class="token string">"/login/register"</span><span class="token punctuation">,</span>            method<span class="token punctuation">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                account<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.account'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                pwd<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.pwd'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在浏览器直接访问 <code>http://localhost:5050/index.html</code> 即可进入表单页。</p><h3 id="3、安装中间件"><a href="#3、安装中间件" class="headerlink" title="3、安装中间件"></a>3、安装中间件</h3><p>安装 <code>koa-bodyparser</code> 与 <code>jsonwebtoken</code> 中间件:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// koa-bodyparser用于获取post请求数据</span>cnpm install koa<span class="token operator">-</span>bodyparser <span class="token operator">--</span>save<span class="token comment" spellcheck="true">// jsonwebtoken用于生成token</span>cnpm install jsonwebtoken <span class="token operator">--</span>save</code></pre><h4 id="JWT"><a href="#JWT" class="headerlink" title="* JWT"></a>* JWT</h4><p>在用户登录的路由中使用 jwt.sign 来生成token，一共定义三个参数，第一个是存入token的信息，第二个是token的钥匙，和config/passport.js的配置的钥匙相同，第三个是保存的时间，3600即一个小时，最后返回token，要在前面加Bearer:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> myaccount<span class="token punctuation">:</span> myaccount<span class="token punctuation">,</span> mypwd<span class="token punctuation">:</span> mypwd <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'secret'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> expiresIn<span class="token punctuation">:</span> <span class="token number">3600</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  token<span class="token punctuation">,</span>  msg<span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">}</span><span class="token function">resolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><h3 id="4、添加post接口"><a href="#4、添加post接口" class="headerlink" title="4、添加post接口"></a>4、添加post接口</h3><p>在 <code>router/login.js</code> 中加入：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span>login<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>login<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可以打印得到数据</span>    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"登录或注册"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="5、登录与自动注册"><a href="#5、登录与自动注册" class="headerlink" title="5、登录与自动注册"></a>5、登录与自动注册</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/db'</span><span class="token punctuation">)</span><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span>login<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"登录页面"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>login<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>login<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> myaccount <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>account<span class="token punctuation">;</span>    <span class="token keyword">let</span> mypwd <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>pwd<span class="token punctuation">;</span>    <span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token string">`SELECT * FROM users WHERE account='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>myaccount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'`</span></span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 能找到对应的账号</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pwd <span class="token operator">==</span> mypwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 账号密码正确，返回token</span>            ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>                token<span class="token punctuation">:</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                msg<span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span>                account<span class="token punctuation">:</span> myaccount            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 密码错误</span>            ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span> <span class="token string">'密码错误'</span><span class="token punctuation">,</span>                account<span class="token punctuation">:</span> myaccount            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 找不到对应的账号，直接插入一个</span>        <span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 生成token</span>            <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> myaccount<span class="token punctuation">:</span> myaccount<span class="token punctuation">,</span> mypwd<span class="token punctuation">:</span> mypwd <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'secret'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> expiresIn<span class="token punctuation">:</span> <span class="token number">3600</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`INSERT INTO users (account, pwd, token) values ('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>myaccount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mypwd<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">')`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> datas<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 已插入数据，返回用户名与token</span>                <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>                    token<span class="token punctuation">,</span>                    msg<span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span>                    account<span class="token punctuation">:</span> myaccount                <span class="token punctuation">}</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> result1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> login<span class="token punctuation">;</span></code></pre><p>此时，前端做这个post请求后，就会得到相应的数据。</p><h2 id="十二、部署到服务器上"><a href="#十二、部署到服务器上" class="headerlink" title="十二、部署到服务器上"></a>十二、部署到服务器上</h2><p>部署需要先购买服务器，下载filezilla软件。</p><p>服务器上需要安装node 、mysql、pm2</p><p>具体教程请参考下面这篇文章</p><p><a href="https://blog.csdn.net/yh8899abc/article/details/105201742">https://blog.csdn.net/yh8899abc/article/details/105201742</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
